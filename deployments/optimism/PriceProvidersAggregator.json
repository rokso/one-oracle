{
  "address": "0x99866a6074ADb027f09c9AF31929dB5941D36DA7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nativeToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum DataTypes.Provider",
          "name": "provider",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "contract IPriceProvider",
          "name": "oldPriceProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPriceProvider",
          "name": "newPriceProvider",
          "type": "address"
        }
      ],
      "name": "PriceProviderUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "provider_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceInUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "priceProviders",
      "outputs": [
        {
          "internalType": "contract IPriceProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "provider_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenInLastUpdatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenOutLastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "providerIn_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "enum DataTypes.Provider",
          "name": "providerOut_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenInLastUpdatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeTokenLastUpdatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenOutLastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "provider_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteTokenToUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "provider_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteUsdToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "provider_",
          "type": "uint8"
        },
        {
          "internalType": "contract IPriceProvider",
          "name": "priceProvider_",
          "type": "address"
        }
      ],
      "name": "setPriceProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9691d44dd5709cbf350a5f1f5859b4613f4dbab77316d2f669b564c9c59c9a41",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x99866a6074ADb027f09c9AF31929dB5941D36DA7",
    "transactionIndex": 0,
    "gasUsed": "968506",
    "logsBloom": "0x
    "blockHash": "0x28acdd7a38f9fda2fc76217f52e660193e05fb26b400340236c863f65c10c55c",
    "transactionHash": "0x9691d44dd5709cbf350a5f1f5859b4613f4dbab77316d2f669b564c9c59c9a41",
    "logs": [],
    "blockNumber": 74149408,
    "cumulativeGasUsed": "968506",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4200000000000000000000000000000000000006"
  ],
  "numDeployments": 1,
  "solcInputHash": "6560b70d562cf6c2a7aadabeef5e4dc6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nativeToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum DataTypes.Provider\",\"name\":\"provider\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"contract IPriceProvider\",\"name\":\"oldPriceProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPriceProvider\",\"name\":\"newPriceProvider\",\"type\":\"address\"}],\"name\":\"PriceProviderUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"provider_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"priceProviders\",\"outputs\":[{\"internalType\":\"contract IPriceProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"provider_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenInLastUpdatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenOutLastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"providerIn_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"providerOut_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenInLastUpdatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeTokenLastUpdatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenOutLastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"provider_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteTokenToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"provider_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteUsdToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"provider_\",\"type\":\"uint8\"},{\"internalType\":\"contract IPriceProvider\",\"name\":\"priceProvider_\",\"type\":\"address\"}],\"name\":\"setPriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPriceInUsd(uint8,address)\":{\"params\":{\"provider_\":\"The price provider to get quote from\",\"token_\":\"The address of asset\"},\"returns\":{\"_lastUpdatedAt\":\"Last updated timestamp\",\"_priceInUsd\":\"The USD price\"}},\"quote(uint8,address,address,uint256)\":{\"params\":{\"amountIn_\":\"Amount of input token\",\"provider_\":\"The price provider to get quote from\",\"tokenIn_\":\"The address of assetIn\",\"tokenOut_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Amount out\",\"_tokenInLastUpdatedAt\":\"Last updated timestamp of `tokenIn_`\",\"_tokenOutLastUpdatedAt\":\"Last updated timestamp of `tokenOut_`\"}},\"quote(uint8,address,uint8,address,uint256)\":{\"details\":\"If providers aren't the same, uses native token as \\\"bridge\\\"\",\"params\":{\"amountIn_\":\"Amount of input token\",\"providerIn_\":\"The price provider to get quote for the tokenIn\",\"providerOut_\":\"The price provider to get quote for the tokenOut\",\"tokenIn_\":\"The address of assetIn\",\"tokenOut_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Amount out\",\"_nativeTokenLastUpdatedAt\":\"Last updated timestamp of native token (i.e. WETH) used when providers aren't the same\",\"_tokenInLastUpdatedAt\":\"Last updated timestamp of `tokenIn_`\",\"_tokenOutLastUpdatedAt\":\"Last updated timestamp of `tokenOut_`\"}},\"quoteTokenToUsd(uint8,address,uint256)\":{\"params\":{\"amountIn_\":\"Amount of input token.\",\"provider_\":\"The price provider to get quote from\",\"token_\":\"The address of assetIn\"},\"returns\":{\"_lastUpdatedAt\":\"Last updated timestamp\",\"amountOut_\":\"Amount in USD\"}},\"quoteUsdToToken(uint8,address,uint256)\":{\"params\":{\"amountIn_\":\"Input amount in USD\",\"provider_\":\"The price provider to get quote from\",\"token_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Output amount of token\",\"_lastUpdatedAt\":\"Last updated timestamp\"}},\"setPriceProvider(uint8,address)\":{\"details\":\"Administrative function\",\"params\":{\"priceProvider_\":\"The price provider contract\",\"provider_\":\"The provider (from enum)\"}}},\"stateVariables\":{\"nativeToken\":{\"details\":\"Is used when getting quote from two price providers\"}},\"title\":\"Price Providers Aggregator\",\"version\":1},\"userdoc\":{\"events\":{\"PriceProviderUpdated(uint8,address,address)\":{\"notice\":\"Emitted when an price provider is updated\"}},\"kind\":\"user\",\"methods\":{\"getPriceInUsd(uint8,address)\":{\"notice\":\"Get USD (or equivalent) price of an asset\"},\"nativeToken()\":{\"notice\":\"The native token (usually the most liquid asset in the chain)\"},\"priceProviders(uint8)\":{\"notice\":\"Price providers map\"},\"quote(uint8,address,address,uint256)\":{\"notice\":\"Get quote\"},\"quote(uint8,address,uint8,address,uint256)\":{\"notice\":\"Get quote\"},\"quoteTokenToUsd(uint8,address,uint256)\":{\"notice\":\"Get quote in USD (or equivalent) amount\"},\"quoteUsdToToken(uint8,address,uint256)\":{\"notice\":\"Get quote from USD (or equivalent) amount to amount of token\"},\"setPriceProvider(uint8,address)\":{\"notice\":\"Set a price provider\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/PriceProvidersAggregator.sol\":\"PriceProvidersAggregator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/core/IAddressProvider.sol\\\";\\n\\n/**\\n * @notice Contract module which provides access control mechanism, where\\n * the governor account is granted with exclusive access to specific functions.\\n * @dev Uses the AddressProvider to get the governor\\n */\\nabstract contract Governable {\\n    IAddressProvider public constant addressProvider = IAddressProvider(0xfbA0816A81bcAbBf3829bED28618177a2bf0e82A);\\n\\n    /// @dev Throws if called by any account other than the governor.\\n    modifier onlyGovernor() {\\n        require(msg.sender == addressProvider.governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9fcc955db07cc6517e7456517eae374a3910d557b7d16f9372154188290d3da0\",\"license\":\"MIT\"},\"contracts/core/PriceProvidersAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../interfaces/core/IPriceProvidersAggregator.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\n/**\\n * @title Price Providers Aggregator\\n */\\ncontract PriceProvidersAggregator is IPriceProvidersAggregator, Governable {\\n    /**\\n     * The native token (usually the most liquid asset in the chain)\\n     * @dev Is used when getting quote from two price providers\\n     */\\n    address public immutable nativeToken;\\n\\n    /**\\n     * @notice Price providers map\\n     */\\n    mapping(DataTypes.Provider => IPriceProvider) public override priceProviders;\\n\\n    /// Emitted when an price provider is updated\\n    event PriceProviderUpdated(\\n        DataTypes.Provider provider,\\n        IPriceProvider oldPriceProvider,\\n        IPriceProvider newPriceProvider\\n    );\\n\\n    constructor(address nativeToken_) {\\n        require(nativeToken_ != address(0), \\\"native-token-is-null\\\");\\n        nativeToken = nativeToken_;\\n    }\\n\\n    /// @inheritdoc IPriceProvidersAggregator\\n    function getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        external\\n        view\\n        override\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt)\\n    {\\n        IPriceProvider _provider = priceProviders[provider_];\\n        require(address(_provider) != address(0), \\\"provider-not-set\\\");\\n        return _provider.getPriceInUsd(token_);\\n    }\\n\\n    /// @inheritdoc IPriceProvidersAggregator\\n    function quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        )\\n    {\\n        IPriceProvider _provider = priceProviders[provider_];\\n        require(address(_provider) != address(0), \\\"provider-not-set\\\");\\n        return _provider.quote(tokenIn_, tokenOut_, amountIn_);\\n    }\\n\\n    /// @inheritdoc IPriceProvidersAggregator\\n    function quote(\\n        DataTypes.Provider providerIn_,\\n        address tokenIn_,\\n        DataTypes.Provider providerOut_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _nativeTokenLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        )\\n    {\\n        IPriceProvider _providerIn = priceProviders[providerIn_];\\n        require(address(_providerIn) != address(0), \\\"provider-in-not-set\\\");\\n\\n        if (providerIn_ == providerOut_) {\\n            (_amountOut, _tokenInLastUpdatedAt, _tokenOutLastUpdatedAt) = _providerIn.quote(\\n                tokenIn_,\\n                tokenOut_,\\n                amountIn_\\n            );\\n            _nativeTokenLastUpdatedAt = block.timestamp;\\n            return (_amountOut, _tokenInLastUpdatedAt, _nativeTokenLastUpdatedAt, _tokenOutLastUpdatedAt);\\n        }\\n\\n        IPriceProvider _providerOut = priceProviders[providerOut_];\\n        require(address(_providerOut) != address(0), \\\"provider-out-not-set\\\");\\n\\n        uint256 _nativeTokenLastUpdatedAt0;\\n        uint256 _nativeTokenLastUpdatedAt1;\\n        (_amountOut, _tokenInLastUpdatedAt, _nativeTokenLastUpdatedAt0) = _providerIn.quote(\\n            tokenIn_,\\n            nativeToken,\\n            amountIn_\\n        );\\n        (_amountOut, _nativeTokenLastUpdatedAt1, _tokenOutLastUpdatedAt) = _providerOut.quote(\\n            nativeToken,\\n            tokenOut_,\\n            _amountOut\\n        );\\n        _nativeTokenLastUpdatedAt = Math.min(_nativeTokenLastUpdatedAt0, _nativeTokenLastUpdatedAt1);\\n    }\\n\\n    /// @inheritdoc IPriceProvidersAggregator\\n    function quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view override returns (uint256 amountOut_, uint256 _lastUpdatedAt) {\\n        IPriceProvider _provider = priceProviders[provider_];\\n        require(address(_provider) != address(0), \\\"provider-not-set\\\");\\n        return _provider.quoteTokenToUsd(token_, amountIn_);\\n    }\\n\\n    /// @inheritdoc IPriceProvidersAggregator\\n    function quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view override returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        IPriceProvider _provider = priceProviders[provider_];\\n        require(address(_provider) != address(0), \\\"provider-not-set\\\");\\n        return _provider.quoteUsdToToken(token_, amountIn_);\\n    }\\n\\n    /// @inheritdoc IPriceProvidersAggregator\\n    function setPriceProvider(DataTypes.Provider provider_, IPriceProvider priceProvider_)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        require(provider_ != DataTypes.Provider.NONE, \\\"invalid-provider\\\");\\n        IPriceProvider _current = priceProviders[provider_];\\n        require(priceProvider_ != _current, \\\"same-as-current\\\");\\n\\n        emit PriceProviderUpdated(provider_, _current, priceProvider_);\\n\\n        priceProviders[provider_] = priceProvider_;\\n    }\\n}\\n\",\"keccak256\":\"0xdf871ad29de7647c99ec0772c6ffac36cc39d902bd8c116951642bedf5ecfd75\",\"license\":\"MIT\"},\"contracts/interfaces/core/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStableCoinProvider.sol\\\";\\nimport \\\"./IPriceProvidersAggregator.sol\\\";\\n\\ninterface IAddressProvider {\\n    function governor() external view returns (address);\\n\\n    function providersAggregator() external view returns (IPriceProvidersAggregator);\\n\\n    function stableCoinProvider() external view returns (IStableCoinProvider);\\n\\n    function updateProvidersAggregator(IPriceProvidersAggregator providersAggregator_) external;\\n}\\n\",\"keccak256\":\"0x133c36faf973cdef1639bdbc837c21368240146875b5aa28e533bb1769b84329\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n}\\n\",\"keccak256\":\"0x188c27728bd50b187944ef217b58751efd7b8ec3f1ef0d923be82298b2b0af0e\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvidersAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"./IPriceProvider.sol\\\";\\n\\n/**\\n * @notice PriceProvidersAggregator interface\\n * @dev Worth noting that the `_lastUpdatedAt` logic depends on the underlying price provider. In summary:\\n * ChainLink: returns the last updated date from the aggregator\\n * UniswapV2: returns the date of the latest pair oracle update\\n * UniswapV3: assumes that the price is always updated (returns block.timestamp)\\n * Flux: returns the last updated date from the aggregator\\n * Umbrella (FCD): returns the last updated date returned from their oracle contract\\n * Umbrella (Passport): returns the date of the latest pallet submission\\n * Anytime that a quote performs more than one query, it uses the oldest date as the `_lastUpdatedAt`.\\n * See more: https://github.com/bloqpriv/one-oracle/issues/64\\n */\\ninterface IPriceProvidersAggregator {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        external\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Provider Providers' mapping\\n     */\\n    function priceProviders(DataTypes.Provider provider_) external view returns (IPriceProvider _priceProvider);\\n\\n    /**\\n     * @notice Get quote\\n     * @param provider_ The price provider to get quote from\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote\\n     * @dev If providers aren't the same, uses native token as \\\"bridge\\\"\\n     * @param providerIn_ The price provider to get quote for the tokenIn\\n     * @param tokenIn_ The address of assetIn\\n     * @param providerOut_ The price provider to get quote for the tokenOut\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _nativeTokenLastUpdatedAt Last updated timestamp of native token (i.e. WETH) used when providers aren't the same\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        DataTypes.Provider providerIn_,\\n        address tokenIn_,\\n        DataTypes.Provider providerOut_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _nativeTokenLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Set a price provider\\n     * @dev Administrative function\\n     * @param provider_ The provider (from enum)\\n     * @param priceProvider_ The price provider contract\\n     */\\n    function setPriceProvider(DataTypes.Provider provider_, IPriceProvider priceProvider_) external;\\n}\\n\",\"keccak256\":\"0xbd791bd564866a61c6aac64171095a9134dfe9c5173a0ddbe22312a9bdfc9c19\",\"license\":\"MIT\"},\"contracts/interfaces/core/IStableCoinProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStableCoinProvider {\\n    /**\\n     * @notice Return the stable coin if pegged\\n     * @dev Check price relation between both stable coins and revert if peg is too loose\\n     * @return _stableCoin The primary stable coin if pass all checks\\n     */\\n    function getStableCoinIfPegged() external view returns (address _stableCoin);\\n\\n    /**\\n     * @notice Convert given amount of stable coin to USD representation (18 decimals)\\n     */\\n    function toUsdRepresentation(uint256 stableCoinAmount_) external view returns (uint256 _usdAmount);\\n}\\n\",\"keccak256\":\"0x57121c0faef63ea2d06b05048054ffa78d4d3c5734c2dabc1aaa4c5032e194c5\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary DataTypes {\\n    /**\\n     * @notice Price providers enumeration\\n     */\\n    enum Provider {\\n        NONE,\\n        CHAINLINK,\\n        UNISWAP_V3,\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UMBRELLA_FIRST_CLASS,\\n        UMBRELLA_PASSPORT,\\n        FLUX\\n    }\\n\\n    enum ExchangeType {\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UNISWAP_V3,\\n        PANCAKE_SWAP,\\n        CURVE\\n    }\\n\\n    enum SwapType {\\n        EXACT_INPUT,\\n        EXACT_OUTPUT\\n    }\\n}\\n\",\"keccak256\":\"0x95f2896f7ec6df99ed860b7682fd2801477b4517a27dd3f7bb111c879f43f847\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPriceInUsd(uint8,address)": {
        "params": {
          "provider_": "The price provider to get quote from",
          "token_": "The address of asset"
        },
        "returns": {
          "_lastUpdatedAt": "Last updated timestamp",
          "_priceInUsd": "The USD price"
        }
      },
      "quote(uint8,address,address,uint256)": {
        "params": {
          "amountIn_": "Amount of input token",
          "provider_": "The price provider to get quote from",
          "tokenIn_": "The address of assetIn",
          "tokenOut_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Amount out",
          "_tokenInLastUpdatedAt": "Last updated timestamp of `tokenIn_`",
          "_tokenOutLastUpdatedAt": "Last updated timestamp of `tokenOut_`"
        }
      },
      "quote(uint8,address,uint8,address,uint256)": {
        "details": "If providers aren't the same, uses native token as \"bridge\"",
        "params": {
          "amountIn_": "Amount of input token",
          "providerIn_": "The price provider to get quote for the tokenIn",
          "providerOut_": "The price provider to get quote for the tokenOut",
          "tokenIn_": "The address of assetIn",
          "tokenOut_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Amount out",
          "_nativeTokenLastUpdatedAt": "Last updated timestamp of native token (i.e. WETH) used when providers aren't the same",
          "_tokenInLastUpdatedAt": "Last updated timestamp of `tokenIn_`",
          "_tokenOutLastUpdatedAt": "Last updated timestamp of `tokenOut_`"
        }
      },
      "quoteTokenToUsd(uint8,address,uint256)": {
        "params": {
          "amountIn_": "Amount of input token.",
          "provider_": "The price provider to get quote from",
          "token_": "The address of assetIn"
        },
        "returns": {
          "_lastUpdatedAt": "Last updated timestamp",
          "amountOut_": "Amount in USD"
        }
      },
      "quoteUsdToToken(uint8,address,uint256)": {
        "params": {
          "amountIn_": "Input amount in USD",
          "provider_": "The price provider to get quote from",
          "token_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Output amount of token",
          "_lastUpdatedAt": "Last updated timestamp"
        }
      },
      "setPriceProvider(uint8,address)": {
        "details": "Administrative function",
        "params": {
          "priceProvider_": "The price provider contract",
          "provider_": "The provider (from enum)"
        }
      }
    },
    "stateVariables": {
      "nativeToken": {
        "details": "Is used when getting quote from two price providers"
      }
    },
    "title": "Price Providers Aggregator",
    "version": 1
  },
  "userdoc": {
    "events": {
      "PriceProviderUpdated(uint8,address,address)": {
        "notice": "Emitted when an price provider is updated"
      }
    },
    "kind": "user",
    "methods": {
      "getPriceInUsd(uint8,address)": {
        "notice": "Get USD (or equivalent) price of an asset"
      },
      "nativeToken()": {
        "notice": "The native token (usually the most liquid asset in the chain)"
      },
      "priceProviders(uint8)": {
        "notice": "Price providers map"
      },
      "quote(uint8,address,address,uint256)": {
        "notice": "Get quote"
      },
      "quote(uint8,address,uint8,address,uint256)": {
        "notice": "Get quote"
      },
      "quoteTokenToUsd(uint8,address,uint256)": {
        "notice": "Get quote in USD (or equivalent) amount"
      },
      "quoteUsdToToken(uint8,address,uint256)": {
        "notice": "Get quote from USD (or equivalent) amount to amount of token"
      },
      "setPriceProvider(uint8,address)": {
        "notice": "Set a price provider"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8625,
        "contract": "contracts/core/PriceProvidersAggregator.sol:PriceProvidersAggregator",
        "label": "priceProviders",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_enum(Provider)14011,t_contract(IPriceProvider)12415)"
      }
    ],
    "types": {
      "t_contract(IPriceProvider)12415": {
        "encoding": "inplace",
        "label": "contract IPriceProvider",
        "numberOfBytes": "20"
      },
      "t_enum(Provider)14011": {
        "encoding": "inplace",
        "label": "enum DataTypes.Provider",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(Provider)14011,t_contract(IPriceProvider)12415)": {
        "encoding": "mapping",
        "key": "t_enum(Provider)14011",
        "label": "mapping(enum DataTypes.Provider => contract IPriceProvider)",
        "numberOfBytes": "32",
        "value": "t_contract(IPriceProvider)12415"
      }
    }
  }
}
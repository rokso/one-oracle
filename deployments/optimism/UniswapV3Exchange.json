{
  "address": "0x7d0DC1ec332512E16Ca5b63A61Db9Ad9Ac9839Dc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wethLike_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "POOL_FEE_BPS",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_V3_FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPoolFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "outReceiver_",
          "type": "address"
        }
      ],
      "name": "swapExactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "remainingReceiver_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outReceiver_",
          "type": "address"
        }
      ],
      "name": "swapExactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethLike",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b646072c8a8b6b3a17744ff6c3ca30d889fbaef3180ef9cddbcf948e7e9e07e",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x7d0DC1ec332512E16Ca5b63A61Db9Ad9Ac9839Dc",
    "transactionIndex": 0,
    "gasUsed": "1238016",
    "logsBloom": "0x
    "blockHash": "0x12331a83a1e0d802254dd41c9c0c2d13e1d41ee44c82a1d0ef7c1f117d7f7786",
    "transactionHash": "0x8b646072c8a8b6b3a17744ff6c3ca30d889fbaef3180ef9cddbcf948e7e9e07e",
    "logs": [],
    "blockNumber": 74149602,
    "cumulativeGasUsed": "1238016",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4200000000000000000000000000000000000006"
  ],
  "numDeployments": 1,
  "solcInputHash": "3f700629f3c05da05b55250433de2d74",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wethLike_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"POOL_FEE_BPS\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V3_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPoolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outReceiver_\",\"type\":\"address\"}],\"name\":\"swapExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"remainingReceiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outReceiver_\",\"type\":\"address\"}],\"name\":\"swapExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethLike\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Doesn't consider router.WETH() as `wethLike` because isn't guaranteed that it's the most liquid token. For instance: On Polygon, the `WETH` is more liquid than `WMATIC` on UniV3 protocol.\"},\"getAmountsIn(uint256,bytes)\":{\"details\":\"Returns `0` if reverts\"},\"getAmountsOut(uint256,bytes)\":{\"details\":\"Returns `0` if reverts\"},\"swapExactInput(bytes,uint256,uint256,address)\":{\"details\":\"Should transfer `amountIn_` before performing swap\"},\"swapExactOutput(bytes,uint256,uint256,address,address)\":{\"details\":\"Should transfer `amountInMax_` before performing swapSends swap remains - if any - to the `inSender_`\"}},\"title\":\"UniswapV3 Exchange\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAmountsIn(uint256,bytes)\":{\"notice\":\"Wraps `quoter.quoteExactOutput()` function\"},\"getAmountsOut(uint256,bytes)\":{\"notice\":\"Wraps `quoter.quoteExactInput()` function\"},\"swapExactInput(bytes,uint256,uint256,address)\":{\"notice\":\"Perform an exact input swap\"},\"swapExactOutput(bytes,uint256,uint256,address,address)\":{\"notice\":\"Perform an exact output swap\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swapper/UniswapV3Exchange.sol\":\"UniswapV3Exchange\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-v3.4.2-solc-0.7/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts-v3.4.2-solc-0.7/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-v3.4.2-solc-0.7/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-v3.4.2-solc-0.7/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.5.0 <0.8.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_start + _length >= _start, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, 'toAddress_overflow');\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, 'toUint24_overflow');\\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport './BytesLib.sol';\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary Path {\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n    /// @dev The length of the bytes encoded fee\\n    uint256 private constant FEE_SIZE = 3;\\n\\n    /// @dev The offset of a single token address and pool fee\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true iff the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param path The bytes encoded swap path\\n    /// @return tokenA The first token of the given pool\\n    /// @return tokenB The second token of the given pool\\n    /// @return fee The fee level of the pool\\n    function decodeFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (\\n            address tokenA,\\n            address tokenB,\\n            uint24 fee\\n        )\\n    {\\n        tokenA = path.toAddress(0);\\n        fee = path.toUint24(ADDR_SIZE);\\n        tokenB = path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\n    /// @param path The swap path\\n    /// @return The remaining token + fee elements in the path\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0xb22c562b5175d50dbcc2224325666090d985f052abdcfe275c8dfc884e34de61\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/swapper/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity <=0.8.9;\\n\\n/**\\n * @notice Exchange interface\\n */\\ninterface IExchange {\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the given path (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountsIn(uint256 _amountOut, bytes memory path_) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the given path (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountsOut(uint256 amountIn_, bytes memory path_) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap\\n     * @dev Should transfer `amountIn_` before performing swap\\n     */\\n    function swapExactInput(\\n        bytes calldata path_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address outReceiver_\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap\\n     * @dev Should transfer `amountInMax_` before performing swap\\n     * @dev Sends swap remains - if any - to the `inSender_`\\n     */\\n    function swapExactOutput(\\n        bytes calldata path_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address inSender_,\\n        address outRecipient_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x846e6bddb6629399764a31235bba7819a28846852d1e0df3bf1e76285a47e847\",\"license\":\"MIT\"},\"contracts/swapper/UniswapV3Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-v3.4.2-solc-0.7/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/Path.sol\\\";\\nimport \\\"../interfaces/swapper/IExchange.sol\\\";\\n\\n/**\\n * @title UniswapV3 Exchange\\n */\\ncontract UniswapV3Exchange is IExchange {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using SafeMath for uint24;\\n    using Path for bytes;\\n\\n    IQuoter internal constant QUOTER = IQuoter(0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6);\\n    ISwapRouter internal constant UNI3_ROUTER = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n    uint24 public constant POOL_FEE_BPS = 1_000_000;\\n    address public constant UNISWAP_V3_FACTORY = 0x1F98431c8aD98523631AE4a59f267346ea31F984;\\n\\n    address public immutable wethLike;\\n    uint24 public defaultPoolFee = 3000; // 0.3%\\n\\n    /**\\n     * @dev Doesn't consider router.WETH() as `wethLike` because isn't guaranteed that it's the most liquid token.\\n     * For instance: On Polygon, the `WETH` is more liquid than `WMATIC` on UniV3 protocol.\\n     */\\n    constructor(address wethLike_) {\\n        wethLike = wethLike_;\\n    }\\n\\n    /**\\n     * @notice Wraps `quoter.quoteExactOutput()` function\\n     * @dev Returns `0` if reverts\\n     */\\n    function getAmountsIn(uint256 amountOut_, bytes memory path_) public override returns (uint256 _amountIn) {\\n        try QUOTER.quoteExactOutput(path_, amountOut_) returns (uint256 __amountIn) {\\n            _amountIn = __amountIn;\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Wraps `quoter.quoteExactInput()` function\\n     * @dev Returns `0` if reverts\\n     */\\n    function getAmountsOut(uint256 amountIn_, bytes memory path_) public override returns (uint256 _amountOut) {\\n        try QUOTER.quoteExactInput(path_, amountIn_) returns (uint256 __amountOut) {\\n            _amountOut = __amountOut;\\n        } catch {}\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function swapExactInput(\\n        bytes calldata path_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address outReceiver_\\n    ) external override returns (uint256 _amountOut) {\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: path_,\\n            recipient: outReceiver_,\\n            deadline: block.timestamp,\\n            amountIn: amountIn_,\\n            amountOutMinimum: amountOutMin_\\n        });\\n\\n        (address _tokenInAddress, , ) = path_.decodeFirstPool();\\n        IERC20 _tokenIn = IERC20(_tokenInAddress);\\n        if (_tokenIn.allowance(address(this), address(UNI3_ROUTER)) < amountIn_) {\\n            _tokenIn.approve(address(UNI3_ROUTER), type(uint256).max);\\n        }\\n        _amountOut = UNI3_ROUTER.exactInput(params);\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function swapExactOutput(\\n        bytes calldata path_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address remainingReceiver_,\\n        address outReceiver_\\n    ) external override returns (uint256 _amountIn) {\\n        address _tokenInAddress;\\n        if (path_.numPools() == 1) {\\n            (, _tokenInAddress, ) = path_.decodeFirstPool();\\n        } else if (path_.numPools() == 2) {\\n            (, _tokenInAddress, ) = path_.skipToken().decodeFirstPool();\\n        } else {\\n            revert(\\\"invalid-path-length\\\");\\n        }\\n\\n        IERC20 _tokenIn = IERC20(_tokenInAddress);\\n        if (_tokenIn.allowance(address(this), address(UNI3_ROUTER)) < amountInMax_) {\\n            _tokenIn.approve(address(UNI3_ROUTER), type(uint256).max);\\n        }\\n\\n        ISwapRouter.ExactOutputParams memory params = ISwapRouter.ExactOutputParams({\\n            path: path_,\\n            recipient: outReceiver_,\\n            deadline: block.timestamp,\\n            amountOut: amountOut_,\\n            amountInMaximum: amountInMax_\\n        });\\n\\n        _amountIn = UNI3_ROUTER.exactOutput(params);\\n\\n        // If swap end up costly less than _amountInMax then return remaining to caller\\n        uint256 _remainingAmountIn = amountInMax_ - _amountIn;\\n        if (_remainingAmountIn > 0) {\\n            _tokenIn.safeTransfer(remainingReceiver_, _remainingAmountIn);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd4af5e73785863064668bf0cb0b87338e395d2564776af40163e3f3abf250c5b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526000805462ffffff1916610bb817905534801561002057600080fd5b506040516115b13803806115b183398101604081905261003f91610054565b60601b6001600160601b031916608052610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b60805160601c61151261009f6000398061012b52506115126000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639d9f384d1161005b5780639d9f384d146100f3578063cd6c787314610106578063f73e5aab1461010e578063fee9574a1461011657610088565b806329dbd9441461008d5780632aa4a9e5146100ab5780634909c29a146100cb5780636f60a6dd146100de575b600080fd5b610095610129565b6040516100a29190611399565b60405180910390f35b6100be6100b936600461124e565b61014d565b6040516100a29190611483565b6100be6100d936600461115d565b6101fe565b6100e661050d565b6040516100a29190611473565b6100be6101013660046111c2565b610518565b6100e661094b565b610095610952565b6100be61012436600461124e565b61096a565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517f2f80bb1d00000000000000000000000000000000000000000000000000000000815260009073b27308f9f90d607463bb33ea1bebb41c27ce5ab690632f80bb1d906101a29085908790600401611407565b602060405180830381600087803b1580156101bc57600080fd5b505af19250505080156101ec575060408051601f3d908101601f191682019092526101e991810190611236565b60015b6101f5576101f8565b90505b92915050565b6000806040518060a0016040528088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250505073ffffffffffffffffffffffffffffffffffffffff861660208084019190915242604080850191909152606084018a905260809093018890528251601f8b01829004820281018201909352898352929350916102bb91908a908a90819084018382808284376000920191909152506109bf92505050565b50506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081529091508190879073ffffffffffffffffffffffffffffffffffffffff83169063dd62ed3e9061032c90309073e592427a0aece92de3edee1f18e0157c05861564906004016113ba565b60206040518083038186803b15801561034457600080fd5b505afa158015610358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037c9190611236565b101561045e576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063095ea7b39061040a9073e592427a0aece92de3edee1f18e0157c05861564907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906004016113e1565b602060405180830381600087803b15801561042457600080fd5b505af1158015610438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045c919061113d565b505b6040517fc04b8d5900000000000000000000000000000000000000000000000000000000815273e592427a0aece92de3edee1f18e0157c058615649063c04b8d59906104ae908690600401611460565b602060405180830381600087803b1580156104c857600080fd5b505af11580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105009190611236565b9998505050505050505050565b60005462ffffff1681565b60008061055a88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506109f092505050565b600114156105ab576105a188888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506109bf92505050565b50915061065a9050565b6105ea88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506109f092505050565b60021415610639576105a161063489898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a1f92505050565b6109bf565b60405162461bcd60e51b815260040161065190611429565b60405180910390fd5b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081528190869073ffffffffffffffffffffffffffffffffffffffff83169063dd62ed3e906106c690309073e592427a0aece92de3edee1f18e0157c05861564906004016113ba565b60206040518083038186803b1580156106de57600080fd5b505afa1580156106f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107169190611236565b10156107f8576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063095ea7b3906107a49073e592427a0aece92de3edee1f18e0157c05861564907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906004016113e1565b602060405180830381600087803b1580156107be57600080fd5b505af11580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f6919061113d565b505b6040805160c06020601f8c01819004028201810190925260a081018a81526000928291908d908d908190850183828082843760009201919091525050509082525073ffffffffffffffffffffffffffffffffffffffff8716602082015242604080830191909152606082018b90526080909101899052517ff28c049800000000000000000000000000000000000000000000000000000000815290915073e592427a0aece92de3edee1f18e0157c058615649063f28c0498906108bf908490600401611460565b602060405180830381600087803b1580156108d957600080fd5b505af11580156108ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109119190611236565b9350838703801561093d5761093d73ffffffffffffffffffffffffffffffffffffffff84168883610a54565b505050509695505050505050565b620f424081565b731f98431c8ad98523631ae4a59f267346ea31f98481565b6040517fcdca175300000000000000000000000000000000000000000000000000000000815260009073b27308f9f90d607463bb33ea1bebb41c27ce5ab69063cdca1753906101a29085908790600401611407565b600080806109cd8482610ae6565b92506109da846014610bb2565b90506109e7846017610ae6565b91509193909250565b805160177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec909101045b919050565b80516060906101f89083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901610c6e565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610ae1908490610deb565b505050565b600081826014011015610b40576040805162461bcd60e51b815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b8160140183511015610b99576040805162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081826003011015610c0c576040805162461bcd60e51b815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b8160030183511015610c65576040805162461bcd60e51b815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610cc8576040805162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610d1f576040805162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015610d77576040805162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015610d965760405191506000825260208201604052610de0565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610dcf578051835260209283019201610db7565b5050858452601f01601f1916604052505b5090505b9392505050565b6000610e4d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610ea99092919063ffffffff16565b805190915015610ae157808060200190516020811015610e6c57600080fd5b5051610ae15760405162461bcd60e51b815260040180806020018281038252602a8152602001806114b3602a913960400191505060405180910390fd5b6060610eb88484600085610ec0565b949350505050565b606082471015610f015760405162461bcd60e51b815260040180806020018281038252602681526020018061148d6026913960400191505060405180910390fd5b610f0a85611028565b610f5b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310610fa65780518252601f199092019160209182019101610f87565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611008576040519150601f19603f3d011682016040523d82523d6000602084013e61100d565b606091505b509150915061101d82828661102e565b979650505050505050565b3b151590565b6060831561103d575081610de4565b82511561104d5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561109757818101518382015260200161107f565b50505050905090810190601f1680156110c45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b803573ffffffffffffffffffffffffffffffffffffffff81168114610a1a57600080fd5b60008083601f840112611107578081fd5b50813567ffffffffffffffff81111561111e578182fd5b60208301915083602082850101111561113657600080fd5b9250929050565b60006020828403121561114e578081fd5b815180151581146101f5578182fd5b600080600080600060808688031215611174578081fd5b853567ffffffffffffffff81111561118a578182fd5b611196888289016110f6565b90965094505060208601359250604086013591506111b6606087016110d2565b90509295509295909350565b60008060008060008060a087890312156111da578081fd5b863567ffffffffffffffff8111156111f0578182fd5b6111fc89828a016110f6565b909750955050602087013593506040870135925061121c606088016110d2565b915061122a608088016110d2565b90509295509295509295565b600060208284031215611247578081fd5b5051919050565b60008060408385031215611260578182fd5b8235915060208084013567ffffffffffffffff8082111561127f578384fd5b818601915086601f830112611292578384fd5b81358181111561129e57fe5b60405184601f19601f84011682010181811084821117156112bb57fe5b60405281815283820185018910156112d1578586fd5b81858501868301378585838301015280955050505050509250929050565b60008151808452815b81811015611314576020818501810151868301820152016112f8565b818111156113255782602083870101525b50601f01601f19169290920160200192915050565b6000815160a0845261134f60a08501826112ef565b905073ffffffffffffffffffffffffffffffffffffffff60208401511660208501526040830151604085015260608301516060850152608083015160808501528091505092915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60006040825261141a60408301856112ef565b90508260208301529392505050565b60208082526013908201527f696e76616c69642d706174682d6c656e67746800000000000000000000000000604082015260600190565b600060208252610de4602083018461133a565b62ffffff91909116815260200190565b9081526020019056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220bedc03b08c5fba12c47c85d9a6142d50bd2b77f8ef8a4a5a78e7a826eaf1f94564736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80639d9f384d1161005b5780639d9f384d146100f3578063cd6c787314610106578063f73e5aab1461010e578063fee9574a1461011657610088565b806329dbd9441461008d5780632aa4a9e5146100ab5780634909c29a146100cb5780636f60a6dd146100de575b600080fd5b610095610129565b6040516100a29190611399565b60405180910390f35b6100be6100b936600461124e565b61014d565b6040516100a29190611483565b6100be6100d936600461115d565b6101fe565b6100e661050d565b6040516100a29190611473565b6100be6101013660046111c2565b610518565b6100e661094b565b610095610952565b6100be61012436600461124e565b61096a565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517f2f80bb1d00000000000000000000000000000000000000000000000000000000815260009073b27308f9f90d607463bb33ea1bebb41c27ce5ab690632f80bb1d906101a29085908790600401611407565b602060405180830381600087803b1580156101bc57600080fd5b505af19250505080156101ec575060408051601f3d908101601f191682019092526101e991810190611236565b60015b6101f5576101f8565b90505b92915050565b6000806040518060a0016040528088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250505073ffffffffffffffffffffffffffffffffffffffff861660208084019190915242604080850191909152606084018a905260809093018890528251601f8b01829004820281018201909352898352929350916102bb91908a908a90819084018382808284376000920191909152506109bf92505050565b50506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081529091508190879073ffffffffffffffffffffffffffffffffffffffff83169063dd62ed3e9061032c90309073e592427a0aece92de3edee1f18e0157c05861564906004016113ba565b60206040518083038186803b15801561034457600080fd5b505afa158015610358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037c9190611236565b101561045e576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063095ea7b39061040a9073e592427a0aece92de3edee1f18e0157c05861564907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906004016113e1565b602060405180830381600087803b15801561042457600080fd5b505af1158015610438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045c919061113d565b505b6040517fc04b8d5900000000000000000000000000000000000000000000000000000000815273e592427a0aece92de3edee1f18e0157c058615649063c04b8d59906104ae908690600401611460565b602060405180830381600087803b1580156104c857600080fd5b505af11580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105009190611236565b9998505050505050505050565b60005462ffffff1681565b60008061055a88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506109f092505050565b600114156105ab576105a188888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506109bf92505050565b50915061065a9050565b6105ea88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506109f092505050565b60021415610639576105a161063489898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a1f92505050565b6109bf565b60405162461bcd60e51b815260040161065190611429565b60405180910390fd5b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081528190869073ffffffffffffffffffffffffffffffffffffffff83169063dd62ed3e906106c690309073e592427a0aece92de3edee1f18e0157c05861564906004016113ba565b60206040518083038186803b1580156106de57600080fd5b505afa1580156106f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107169190611236565b10156107f8576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063095ea7b3906107a49073e592427a0aece92de3edee1f18e0157c05861564907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff906004016113e1565b602060405180830381600087803b1580156107be57600080fd5b505af11580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f6919061113d565b505b6040805160c06020601f8c01819004028201810190925260a081018a81526000928291908d908d908190850183828082843760009201919091525050509082525073ffffffffffffffffffffffffffffffffffffffff8716602082015242604080830191909152606082018b90526080909101899052517ff28c049800000000000000000000000000000000000000000000000000000000815290915073e592427a0aece92de3edee1f18e0157c058615649063f28c0498906108bf908490600401611460565b602060405180830381600087803b1580156108d957600080fd5b505af11580156108ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109119190611236565b9350838703801561093d5761093d73ffffffffffffffffffffffffffffffffffffffff84168883610a54565b505050509695505050505050565b620f424081565b731f98431c8ad98523631ae4a59f267346ea31f98481565b6040517fcdca175300000000000000000000000000000000000000000000000000000000815260009073b27308f9f90d607463bb33ea1bebb41c27ce5ab69063cdca1753906101a29085908790600401611407565b600080806109cd8482610ae6565b92506109da846014610bb2565b90506109e7846017610ae6565b91509193909250565b805160177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec909101045b919050565b80516060906101f89083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901610c6e565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610ae1908490610deb565b505050565b600081826014011015610b40576040805162461bcd60e51b815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b8160140183511015610b99576040805162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081826003011015610c0c576040805162461bcd60e51b815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b8160030183511015610c65576040805162461bcd60e51b815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610cc8576040805162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610d1f576040805162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015610d77576040805162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015610d965760405191506000825260208201604052610de0565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610dcf578051835260209283019201610db7565b5050858452601f01601f1916604052505b5090505b9392505050565b6000610e4d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610ea99092919063ffffffff16565b805190915015610ae157808060200190516020811015610e6c57600080fd5b5051610ae15760405162461bcd60e51b815260040180806020018281038252602a8152602001806114b3602a913960400191505060405180910390fd5b6060610eb88484600085610ec0565b949350505050565b606082471015610f015760405162461bcd60e51b815260040180806020018281038252602681526020018061148d6026913960400191505060405180910390fd5b610f0a85611028565b610f5b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310610fa65780518252601f199092019160209182019101610f87565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611008576040519150601f19603f3d011682016040523d82523d6000602084013e61100d565b606091505b509150915061101d82828661102e565b979650505050505050565b3b151590565b6060831561103d575081610de4565b82511561104d5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561109757818101518382015260200161107f565b50505050905090810190601f1680156110c45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b803573ffffffffffffffffffffffffffffffffffffffff81168114610a1a57600080fd5b60008083601f840112611107578081fd5b50813567ffffffffffffffff81111561111e578182fd5b60208301915083602082850101111561113657600080fd5b9250929050565b60006020828403121561114e578081fd5b815180151581146101f5578182fd5b600080600080600060808688031215611174578081fd5b853567ffffffffffffffff81111561118a578182fd5b611196888289016110f6565b90965094505060208601359250604086013591506111b6606087016110d2565b90509295509295909350565b60008060008060008060a087890312156111da578081fd5b863567ffffffffffffffff8111156111f0578182fd5b6111fc89828a016110f6565b909750955050602087013593506040870135925061121c606088016110d2565b915061122a608088016110d2565b90509295509295509295565b600060208284031215611247578081fd5b5051919050565b60008060408385031215611260578182fd5b8235915060208084013567ffffffffffffffff8082111561127f578384fd5b818601915086601f830112611292578384fd5b81358181111561129e57fe5b60405184601f19601f84011682010181811084821117156112bb57fe5b60405281815283820185018910156112d1578586fd5b81858501868301378585838301015280955050505050509250929050565b60008151808452815b81811015611314576020818501810151868301820152016112f8565b818111156113255782602083870101525b50601f01601f19169290920160200192915050565b6000815160a0845261134f60a08501826112ef565b905073ffffffffffffffffffffffffffffffffffffffff60208401511660208501526040830151604085015260608301516060850152608083015160808501528091505092915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60006040825261141a60408301856112ef565b90508260208301529392505050565b60208082526013908201527f696e76616c69642d706174682d6c656e67746800000000000000000000000000604082015260600190565b600060208252610de4602083018461133a565b62ffffff91909116815260200190565b9081526020019056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220bedc03b08c5fba12c47c85d9a6142d50bd2b77f8ef8a4a5a78e7a826eaf1f94564736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Doesn't consider router.WETH() as `wethLike` because isn't guaranteed that it's the most liquid token. For instance: On Polygon, the `WETH` is more liquid than `WMATIC` on UniV3 protocol."
      },
      "getAmountsIn(uint256,bytes)": {
        "details": "Returns `0` if reverts"
      },
      "getAmountsOut(uint256,bytes)": {
        "details": "Returns `0` if reverts"
      },
      "swapExactInput(bytes,uint256,uint256,address)": {
        "details": "Should transfer `amountIn_` before performing swap"
      },
      "swapExactOutput(bytes,uint256,uint256,address,address)": {
        "details": "Should transfer `amountInMax_` before performing swapSends swap remains - if any - to the `inSender_`"
      }
    },
    "title": "UniswapV3 Exchange",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAmountsIn(uint256,bytes)": {
        "notice": "Wraps `quoter.quoteExactOutput()` function"
      },
      "getAmountsOut(uint256,bytes)": {
        "notice": "Wraps `quoter.quoteExactInput()` function"
      },
      "swapExactInput(bytes,uint256,uint256,address)": {
        "notice": "Perform an exact input swap"
      },
      "swapExactOutput(bytes,uint256,uint256,address,address)": {
        "notice": "Perform an exact output swap"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3316,
        "contract": "contracts/swapper/UniswapV3Exchange.sol:UniswapV3Exchange",
        "label": "defaultPoolFee",
        "offset": 0,
        "slot": "0",
        "type": "t_uint24"
      }
    ],
    "types": {
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      }
    }
  }
}
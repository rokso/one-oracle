{
  "address": "0xFdcb4cc4a75235f53Db7a3dF3e0e839f421c072f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICurveAddressProvider",
          "name": "curveAddressProvider_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLending",
          "type": "bool"
        }
      ],
      "name": "LpRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curveAddressProvider",
      "outputs": [
        {
          "internalType": "contract ICurveAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken_",
          "type": "address"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken_",
          "type": "address"
        }
      ],
      "name": "registerLendingLp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken_",
          "type": "address"
        }
      ],
      "name": "registerLp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "underlyingTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd8244581ec891ce022d9591efced8beabe3a6504624b3d11511e2216b6625caa",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xFdcb4cc4a75235f53Db7a3dF3e0e839f421c072f",
    "transactionIndex": 0,
    "gasUsed": "811453",
    "logsBloom": "0x
    "blockHash": "0x04760eb5c2a1edd2bef032feb50d445f3bfdbe19ee0c12bfd419387401e9f8a9",
    "transactionHash": "0xd8244581ec891ce022d9591efced8beabe3a6504624b3d11511e2216b6625caa",
    "logs": [],
    "blockNumber": 74954634,
    "cumulativeGasUsed": "811453",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000022D53366457F9d5E68Ec105046FC4383"
  ],
  "numDeployments": 1,
  "solcInputHash": "6560b70d562cf6c2a7aadabeef5e4dc6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICurveAddressProvider\",\"name\":\"curveAddressProvider_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLending\",\"type\":\"bool\"}],\"name\":\"LpRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveAddressProvider\",\"outputs\":[{\"internalType\":\"contract ICurveAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"name\":\"registerLendingLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"name\":\"registerLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"underlyingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPriceInUsd(address)\":{\"details\":\"This function is supposed to be called from `MasterOracle` only\",\"params\":{\"token_\":\"The address of asset\"},\"returns\":{\"_priceInUsd\":\"The USD price\"}}},\"title\":\"Oracle for Curve LP tokens\",\"version\":1},\"userdoc\":{\"events\":{\"LpRegistered(address,bool)\":{\"notice\":\"Emitted when a token is registered\"}},\"kind\":\"user\",\"methods\":{\"getPriceInUsd(address)\":{\"notice\":\"Get USD (or equivalent) price of an asset\"},\"poolOf(address)\":{\"notice\":\"LP token => pool\"},\"registerLendingLp(address)\":{\"notice\":\"Register LP token data\"},\"registerLp(address)\":{\"notice\":\"Register LP token data\"},\"registry()\":{\"notice\":\"Registry contract\"},\"underlyingTokens(address,uint256)\":{\"notice\":\"LP token => coins mapping\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/tokens/CurveLpTokenOracle.sol\":\"CurveLpTokenOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/core/IAddressProvider.sol\\\";\\n\\n/**\\n * @notice Contract module which provides access control mechanism, where\\n * the governor account is granted with exclusive access to specific functions.\\n * @dev Uses the AddressProvider to get the governor\\n */\\nabstract contract Governable {\\n    IAddressProvider public constant addressProvider = IAddressProvider(0xfbA0816A81bcAbBf3829bED28618177a2bf0e82A);\\n\\n    /// @dev Throws if called by any account other than the governor.\\n    modifier onlyGovernor() {\\n        require(msg.sender == addressProvider.governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9fcc955db07cc6517e7456517eae374a3910d557b7d16f9372154188290d3da0\",\"license\":\"MIT\"},\"contracts/interfaces/core/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStableCoinProvider.sol\\\";\\nimport \\\"./IPriceProvidersAggregator.sol\\\";\\n\\ninterface IAddressProvider {\\n    function governor() external view returns (address);\\n\\n    function providersAggregator() external view returns (IPriceProvidersAggregator);\\n\\n    function stableCoinProvider() external view returns (IStableCoinProvider);\\n\\n    function updateProvidersAggregator(IPriceProvidersAggregator providersAggregator_) external;\\n}\\n\",\"keccak256\":\"0x133c36faf973cdef1639bdbc837c21368240146875b5aa28e533bb1769b84329\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n}\\n\",\"keccak256\":\"0x188c27728bd50b187944ef217b58751efd7b8ec3f1ef0d923be82298b2b0af0e\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvidersAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"./IPriceProvider.sol\\\";\\n\\n/**\\n * @notice PriceProvidersAggregator interface\\n * @dev Worth noting that the `_lastUpdatedAt` logic depends on the underlying price provider. In summary:\\n * ChainLink: returns the last updated date from the aggregator\\n * UniswapV2: returns the date of the latest pair oracle update\\n * UniswapV3: assumes that the price is always updated (returns block.timestamp)\\n * Flux: returns the last updated date from the aggregator\\n * Umbrella (FCD): returns the last updated date returned from their oracle contract\\n * Umbrella (Passport): returns the date of the latest pallet submission\\n * Anytime that a quote performs more than one query, it uses the oldest date as the `_lastUpdatedAt`.\\n * See more: https://github.com/bloqpriv/one-oracle/issues/64\\n */\\ninterface IPriceProvidersAggregator {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        external\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Provider Providers' mapping\\n     */\\n    function priceProviders(DataTypes.Provider provider_) external view returns (IPriceProvider _priceProvider);\\n\\n    /**\\n     * @notice Get quote\\n     * @param provider_ The price provider to get quote from\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote\\n     * @dev If providers aren't the same, uses native token as \\\"bridge\\\"\\n     * @param providerIn_ The price provider to get quote for the tokenIn\\n     * @param tokenIn_ The address of assetIn\\n     * @param providerOut_ The price provider to get quote for the tokenOut\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _nativeTokenLastUpdatedAt Last updated timestamp of native token (i.e. WETH) used when providers aren't the same\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        DataTypes.Provider providerIn_,\\n        address tokenIn_,\\n        DataTypes.Provider providerOut_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _nativeTokenLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Set a price provider\\n     * @dev Administrative function\\n     * @param provider_ The provider (from enum)\\n     * @param priceProvider_ The price provider contract\\n     */\\n    function setPriceProvider(DataTypes.Provider provider_, IPriceProvider priceProvider_) external;\\n}\\n\",\"keccak256\":\"0xbd791bd564866a61c6aac64171095a9134dfe9c5173a0ddbe22312a9bdfc9c19\",\"license\":\"MIT\"},\"contracts/interfaces/core/IStableCoinProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStableCoinProvider {\\n    /**\\n     * @notice Return the stable coin if pegged\\n     * @dev Check price relation between both stable coins and revert if peg is too loose\\n     * @return _stableCoin The primary stable coin if pass all checks\\n     */\\n    function getStableCoinIfPegged() external view returns (address _stableCoin);\\n\\n    /**\\n     * @notice Convert given amount of stable coin to USD representation (18 decimals)\\n     */\\n    function toUsdRepresentation(uint256 stableCoinAmount_) external view returns (uint256 _usdAmount);\\n}\\n\",\"keccak256\":\"0x57121c0faef63ea2d06b05048054ffa78d4d3c5734c2dabc1aaa4c5032e194c5\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurveAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurveAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 i) external view returns (address);\\n}\\n\",\"keccak256\":\"0x461681ed41c74b517147ff27f29139bff11d5e5de6f258e58b18d540fb779b58\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx,\\n        uint256 _min_dy\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x030f3b115d45dfb8cb7c00e42b803f862093d93093dc23f6b479c0e89caac459\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurveRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurveRegistry {\\n    function get_n_coins(address lp) external view returns (uint256);\\n\\n    function get_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_pool_from_lp_token(address lp) external view returns (address);\\n\\n    function is_meta(address pool) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x782c2e185d8abe18c8c41d91a913b27ec2908033052edfc9e22f332efaffcb5b\",\"license\":\"MIT\"},\"contracts/interfaces/periphery/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0xb48d57d83e75abecacbd065d3df55ee50eef4998fad94560cb1dbb0644049caa\",\"license\":\"MIT\"},\"contracts/interfaces/periphery/ITokenOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITokenOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n}\\n\",\"keccak256\":\"0x0a458745d97e56d125d348a597133af8572f34a7830c17d91b82cf8229c1492f\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary DataTypes {\\n    /**\\n     * @notice Price providers enumeration\\n     */\\n    enum Provider {\\n        NONE,\\n        CHAINLINK,\\n        UNISWAP_V3,\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UMBRELLA_FIRST_CLASS,\\n        UMBRELLA_PASSPORT,\\n        FLUX\\n    }\\n\\n    enum ExchangeType {\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UNISWAP_V3,\\n        PANCAKE_SWAP,\\n        CURVE\\n    }\\n\\n    enum SwapType {\\n        EXACT_INPUT,\\n        EXACT_OUTPUT\\n    }\\n}\\n\",\"keccak256\":\"0x95f2896f7ec6df99ed860b7682fd2801477b4517a27dd3f7bb111c879f43f847\",\"license\":\"MIT\"},\"contracts/periphery/tokens/CurveLpTokenOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/periphery/ITokenOracle.sol\\\";\\nimport \\\"../../interfaces/external/curve/ICurveAddressProvider.sol\\\";\\nimport \\\"../../interfaces/external/curve/ICurveRegistry.sol\\\";\\nimport \\\"../../interfaces/external/curve/ICurvePool.sol\\\";\\nimport \\\"../../interfaces/periphery/IOracle.sol\\\";\\nimport \\\"../../access/Governable.sol\\\";\\n\\n/**\\n * @title Oracle for Curve LP tokens\\n */\\ncontract CurveLpTokenOracle is ITokenOracle, Governable {\\n    ICurveAddressProvider public immutable curveAddressProvider;\\n\\n    /// @notice Registry contract\\n    address public immutable registry;\\n\\n    /// @notice LP token => coins mapping\\n    mapping(address => address[]) public underlyingTokens;\\n\\n    /// @notice LP token => pool\\n    mapping(address => address) public poolOf;\\n\\n    /// @notice Emitted when a token is registered\\n    event LpRegistered(address indexed lpToken, bool isLending);\\n\\n    constructor(ICurveAddressProvider curveAddressProvider_) {\\n        require(address(curveAddressProvider_) != address(0), \\\"null-address-provider\\\");\\n        curveAddressProvider = curveAddressProvider_;\\n        registry = curveAddressProvider.get_registry();\\n    }\\n\\n    /// @inheritdoc ITokenOracle\\n    /// @dev This function is supposed to be called from `MasterOracle` only\\n    function getPriceInUsd(address lpToken_) public view override returns (uint256 _priceInUsd) {\\n        address _pool = poolOf[lpToken_];\\n        require(_pool != address(0), \\\"lp-is-not-registered\\\");\\n        address[] memory _tokens = underlyingTokens[lpToken_];\\n        uint256 _min = type(uint256).max;\\n        uint256 _n = _tokens.length;\\n\\n        for (uint256 i; i < _n; i++) {\\n            // Note: `msg.sender` is the `MasterOracle` contract\\n            uint256 _price = IOracle(msg.sender).getPriceInUsd(_tokens[i]);\\n            if (_price < _min) _min = _price;\\n        }\\n\\n        require(_min < type(uint256).max, \\\"no-min-underlying-price-found\\\");\\n        require(_min > 0, \\\"invalid-min-price\\\");\\n\\n        return (_min * ICurvePool(_pool).get_virtual_price()) / 1e18;\\n    }\\n\\n    /// @notice Register LP token data\\n    function registerLp(address lpToken_) external onlyGovernor {\\n        _registerLp(lpToken_, false);\\n    }\\n\\n    /// @notice Register LP token data\\n    function registerLendingLp(address lpToken_) external onlyGovernor {\\n        _registerLp(lpToken_, true);\\n    }\\n\\n    /// @notice Register LP token data\\n    function _registerLp(address lpToken_, bool isLending_) internal virtual {\\n        ICurveRegistry _registry = ICurveRegistry(registry);\\n        address _pool = _registry.get_pool_from_lp_token(lpToken_);\\n        require(_pool != address(0), \\\"invalid-non-factory-lp\\\");\\n\\n        address[8] memory _tokens;\\n        if (isLending_) {\\n            _tokens = _registry.get_underlying_coins(_pool);\\n        } else {\\n            _tokens = _registry.get_coins(_pool);\\n        }\\n\\n        if (poolOf[lpToken_] != address(0)) {\\n            // Clean current tokens if LP exists\\n            delete underlyingTokens[lpToken_];\\n        }\\n\\n        poolOf[lpToken_] = _pool;\\n\\n        uint256 _n = _registry.get_n_coins(_pool);\\n        for (uint256 i; i < _n; i++) {\\n            underlyingTokens[lpToken_].push(_tokens[i]);\\n        }\\n\\n        emit LpRegistered(lpToken_, isLending_);\\n    }\\n}\\n\",\"keccak256\":\"0x0006722b6aa7f35dbbcc8a33409d820b8a009a99461f56f37d7504a99e3e4b88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610f1b380380610f1b83398101604081905261002f91610130565b6001600160a01b0381166100895760405162461bcd60e51b815260206004820152601560248201527f6e756c6c2d616464726573732d70726f76696465720000000000000000000000604482015260640160405180910390fd5b6001600160a01b03811660808190526040805163a262904b60e01b8152905163a262904b91600480820192602092909190829003018186803b1580156100ce57600080fd5b505afa1580156100e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101069190610130565b6001600160a01b031660a05250610154565b6001600160a01b038116811461012d57600080fd5b50565b60006020828403121561014257600080fd5b815161014d81610118565b9392505050565b60805160a051610d9c61017f6000396000818161012501526106da0152600060fe0152610d9c6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637b1039991161005b5780637b103999146101205780637e3d431914610147578063988b1fa71461015c578063fd182f381461018557600080fd5b806301eadec41461008d57806307ee40bf146100bd5780632954018c146100de5780633d6e7388146100f9575b600080fd5b6100a061009b366004610b50565b610198565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d06100cb366004610b7c565b6101d0565b6040519081526020016100b4565b6100a073fba0816a81bcabbf3829bed28618177a2bf0e82a81565b6100a07f000000000000000000000000000000000000000000000000000000000000000081565b6100a07f000000000000000000000000000000000000000000000000000000000000000081565b61015a610155366004610b7c565b6104c3565b005b6100a061016a366004610b7c565b6001602052600090815260409020546001600160a01b031681565b61015a610193366004610b7c565b6105b6565b600060205281600052604060002081815481106101b457600080fd5b6000918252602090912001546001600160a01b03169150829050565b6001600160a01b038082166000908152600160205260408120549091168061023f5760405162461bcd60e51b815260206004820152601460248201527f6c702d69732d6e6f742d7265676973746572656400000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038316600090815260208181526040808320805482518185028101850190935280835291929091908301828280156102a757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610289575b5050835193945060001993925060009150505b81811015610389576000336001600160a01b03166307ee40bf8684815181106102e5576102e5610ba0565b60200260200101516040518263ffffffff1660e01b815260040161031891906001600160a01b0391909116815260200190565b60206040518083038186803b15801561033057600080fd5b505afa158015610344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103689190610bcf565b905083811015610376578093505b508061038181610c17565b9150506102ba565b5060001982106103db5760405162461bcd60e51b815260206004820152601d60248201527f6e6f2d6d696e2d756e6465726c79696e672d70726963652d666f756e640000006044820152606401610236565b6000821161042b5760405162461bcd60e51b815260206004820152601160248201527f696e76616c69642d6d696e2d70726963650000000000000000000000000000006044820152606401610236565b670de0b6b3a7640000846001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561046d57600080fd5b505afa158015610481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a59190610bcf565b6104af9084610c32565b6104b99190610c51565b9695505050505050565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561051057600080fd5b505afa158015610524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105489190610c9c565b6001600160a01b0316336001600160a01b0316146105a85760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610236565b6105b38160006106a2565b50565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561060357600080fd5b505afa158015610617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063b9190610c9c565b6001600160a01b0316336001600160a01b03161461069b5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610236565b6105b38160015b6040517fbdf475c30000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000009160009183169063bdf475c39060240160206040518083038186803b15801561072157600080fd5b505afa158015610735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107599190610c9c565b90506001600160a01b0381166107b15760405162461bcd60e51b815260206004820152601660248201527f696e76616c69642d6e6f6e2d666163746f72792d6c70000000000000000000006044820152606401610236565b6107b9610aea565b8315610859576040517fa77576ef0000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015284169063a77576ef906024016101006040518083038186803b15801561081a57600080fd5b505afa15801561082e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108529190610cb9565b90506108ef565b6040517f9ac90d3d0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152841690639ac90d3d906024016101006040518083038186803b1580156108b457600080fd5b505afa1580156108c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ec9190610cb9565b90505b6001600160a01b038581166000908152600160205260409020541615610930576001600160a01b038516600090815260208190526040812061093091610b09565b6001600160a01b0385811660009081526001602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001686851690811790915590517f940494f10000000000000000000000000000000000000000000000000000000081526004810191909152909185169063940494f19060240160206040518083038186803b1580156109ca57600080fd5b505afa1580156109de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a029190610bcf565b905060005b81811015610a9c576001600160a01b0387166000908152602081905260409020838260088110610a3957610a39610ba0565b6020908102919091015182546001810184556000938452919092200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390921691909117905580610a9481610c17565b915050610a07565b50856001600160a01b03167f57d0e2ad10d7bd8ccdedffbc52e5e50ff5314a8d8be6248e7c0d05d4cd81435386604051610ada911515815260200190565b60405180910390a2505050505050565b6040518061010001604052806008906020820280368337509192915050565b50805460008255906000526020600020908101906105b391905b80821115610b375760008155600101610b23565b5090565b6001600160a01b03811681146105b357600080fd5b60008060408385031215610b6357600080fd5b8235610b6e81610b3b565b946020939093013593505050565b600060208284031215610b8e57600080fd5b8135610b9981610b3b565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610be157600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000600019821415610c2b57610c2b610be8565b5060010190565b6000816000190483118215151615610c4c57610c4c610be8565b500290565b600082610c87577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8051610c9781610b3b565b919050565b600060208284031215610cae57600080fd5b8151610b9981610b3b565b6000610100808385031215610ccd57600080fd5b83601f840112610cdc57600080fd5b60405181810181811067ffffffffffffffff82111715610d25577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052908301908085831115610d3a57600080fd5b845b83811015610d5b57610d4d81610c8c565b825260209182019101610d3c565b50909594505050505056fea2646970667358221220cffd290bb80f9f313bd45cd8dcf8092d8ab2b8239ab9dfdbba469db473964ab764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80637b1039991161005b5780637b103999146101205780637e3d431914610147578063988b1fa71461015c578063fd182f381461018557600080fd5b806301eadec41461008d57806307ee40bf146100bd5780632954018c146100de5780633d6e7388146100f9575b600080fd5b6100a061009b366004610b50565b610198565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d06100cb366004610b7c565b6101d0565b6040519081526020016100b4565b6100a073fba0816a81bcabbf3829bed28618177a2bf0e82a81565b6100a07f000000000000000000000000000000000000000000000000000000000000000081565b6100a07f000000000000000000000000000000000000000000000000000000000000000081565b61015a610155366004610b7c565b6104c3565b005b6100a061016a366004610b7c565b6001602052600090815260409020546001600160a01b031681565b61015a610193366004610b7c565b6105b6565b600060205281600052604060002081815481106101b457600080fd5b6000918252602090912001546001600160a01b03169150829050565b6001600160a01b038082166000908152600160205260408120549091168061023f5760405162461bcd60e51b815260206004820152601460248201527f6c702d69732d6e6f742d7265676973746572656400000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038316600090815260208181526040808320805482518185028101850190935280835291929091908301828280156102a757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610289575b5050835193945060001993925060009150505b81811015610389576000336001600160a01b03166307ee40bf8684815181106102e5576102e5610ba0565b60200260200101516040518263ffffffff1660e01b815260040161031891906001600160a01b0391909116815260200190565b60206040518083038186803b15801561033057600080fd5b505afa158015610344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103689190610bcf565b905083811015610376578093505b508061038181610c17565b9150506102ba565b5060001982106103db5760405162461bcd60e51b815260206004820152601d60248201527f6e6f2d6d696e2d756e6465726c79696e672d70726963652d666f756e640000006044820152606401610236565b6000821161042b5760405162461bcd60e51b815260206004820152601160248201527f696e76616c69642d6d696e2d70726963650000000000000000000000000000006044820152606401610236565b670de0b6b3a7640000846001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561046d57600080fd5b505afa158015610481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a59190610bcf565b6104af9084610c32565b6104b99190610c51565b9695505050505050565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561051057600080fd5b505afa158015610524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105489190610c9c565b6001600160a01b0316336001600160a01b0316146105a85760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610236565b6105b38160006106a2565b50565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561060357600080fd5b505afa158015610617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063b9190610c9c565b6001600160a01b0316336001600160a01b03161461069b5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610236565b6105b38160015b6040517fbdf475c30000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000009160009183169063bdf475c39060240160206040518083038186803b15801561072157600080fd5b505afa158015610735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107599190610c9c565b90506001600160a01b0381166107b15760405162461bcd60e51b815260206004820152601660248201527f696e76616c69642d6e6f6e2d666163746f72792d6c70000000000000000000006044820152606401610236565b6107b9610aea565b8315610859576040517fa77576ef0000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015284169063a77576ef906024016101006040518083038186803b15801561081a57600080fd5b505afa15801561082e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108529190610cb9565b90506108ef565b6040517f9ac90d3d0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152841690639ac90d3d906024016101006040518083038186803b1580156108b457600080fd5b505afa1580156108c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ec9190610cb9565b90505b6001600160a01b038581166000908152600160205260409020541615610930576001600160a01b038516600090815260208190526040812061093091610b09565b6001600160a01b0385811660009081526001602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001686851690811790915590517f940494f10000000000000000000000000000000000000000000000000000000081526004810191909152909185169063940494f19060240160206040518083038186803b1580156109ca57600080fd5b505afa1580156109de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a029190610bcf565b905060005b81811015610a9c576001600160a01b0387166000908152602081905260409020838260088110610a3957610a39610ba0565b6020908102919091015182546001810184556000938452919092200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390921691909117905580610a9481610c17565b915050610a07565b50856001600160a01b03167f57d0e2ad10d7bd8ccdedffbc52e5e50ff5314a8d8be6248e7c0d05d4cd81435386604051610ada911515815260200190565b60405180910390a2505050505050565b6040518061010001604052806008906020820280368337509192915050565b50805460008255906000526020600020908101906105b391905b80821115610b375760008155600101610b23565b5090565b6001600160a01b03811681146105b357600080fd5b60008060408385031215610b6357600080fd5b8235610b6e81610b3b565b946020939093013593505050565b600060208284031215610b8e57600080fd5b8135610b9981610b3b565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610be157600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000600019821415610c2b57610c2b610be8565b5060010190565b6000816000190483118215151615610c4c57610c4c610be8565b500290565b600082610c87577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8051610c9781610b3b565b919050565b600060208284031215610cae57600080fd5b8151610b9981610b3b565b6000610100808385031215610ccd57600080fd5b83601f840112610cdc57600080fd5b60405181810181811067ffffffffffffffff82111715610d25577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052908301908085831115610d3a57600080fd5b845b83811015610d5b57610d4d81610c8c565b825260209182019101610d3c565b50909594505050505056fea2646970667358221220cffd290bb80f9f313bd45cd8dcf8092d8ab2b8239ab9dfdbba469db473964ab764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPriceInUsd(address)": {
        "details": "This function is supposed to be called from `MasterOracle` only",
        "params": {
          "token_": "The address of asset"
        },
        "returns": {
          "_priceInUsd": "The USD price"
        }
      }
    },
    "title": "Oracle for Curve LP tokens",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LpRegistered(address,bool)": {
        "notice": "Emitted when a token is registered"
      }
    },
    "kind": "user",
    "methods": {
      "getPriceInUsd(address)": {
        "notice": "Get USD (or equivalent) price of an asset"
      },
      "poolOf(address)": {
        "notice": "LP token => pool"
      },
      "registerLendingLp(address)": {
        "notice": "Register LP token data"
      },
      "registerLp(address)": {
        "notice": "Register LP token data"
      },
      "registry()": {
        "notice": "Registry contract"
      },
      "underlyingTokens(address,uint256)": {
        "notice": "LP token => coins mapping"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16592,
        "contract": "contracts/periphery/tokens/CurveLpTokenOracle.sol:CurveLpTokenOracle",
        "label": "underlyingTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 16597,
        "contract": "contracts/periphery/tokens/CurveLpTokenOracle.sol:CurveLpTokenOracle",
        "label": "poolOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      }
    }
  }
}
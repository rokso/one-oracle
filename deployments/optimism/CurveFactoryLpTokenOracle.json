{
  "address": "0x522040e6738Ac009da4FC11b2aE25aD4C4079ca9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        }
      ],
      "name": "LpRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "contract ICurveAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken_",
          "type": "address"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken_",
          "type": "address"
        }
      ],
      "name": "isLpRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken_",
          "type": "address"
        }
      ],
      "name": "registerLp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract ICurveFactoryRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "underlyingTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1f906b29925382f9a99809b67126d411bb13c01f40f5b7dea734e2f7fc0c0ab7",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x522040e6738Ac009da4FC11b2aE25aD4C4079ca9",
    "transactionIndex": 0,
    "gasUsed": "708963",
    "logsBloom": "0x
    "blockHash": "0x66bdeb4f7cc067217166e66011f434f1257673938cb7f9d1317fe874bd5d0c93",
    "transactionHash": "0x1f906b29925382f9a99809b67126d411bb13c01f40f5b7dea734e2f7fc0c0ab7",
    "logs": [],
    "blockNumber": 74954655,
    "cumulativeGasUsed": "708963",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6560b70d562cf6c2a7aadabeef5e4dc6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"LpRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract ICurveAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"name\":\"isLpRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"name\":\"registerLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ICurveFactoryRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"underlyingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPriceInUsd(address)\":{\"params\":{\"token_\":\"The address of asset\"},\"returns\":{\"_priceInUsd\":\"The USD price\"}},\"registerLp(address)\":{\"details\":\"For factory pools, the LP and pool addresses are the same\"}},\"stateVariables\":{\"addressProvider\":{\"details\":\"Same address for all chains\"}},\"title\":\"Oracle for Curve LP tokens (Factory Pools)\",\"version\":1},\"userdoc\":{\"events\":{\"LpRegistered(address)\":{\"notice\":\"Emitted when a token is registered\"}},\"kind\":\"user\",\"methods\":{\"getPriceInUsd(address)\":{\"notice\":\"Get USD (or equivalent) price of an asset\"},\"isLpRegistered(address)\":{\"notice\":\"Check if a token is already registered\"},\"registerLp(address)\":{\"notice\":\"Register LP token data\"},\"registry()\":{\"notice\":\"Factory Registry contract\"},\"underlyingTokens(address,uint256)\":{\"notice\":\"LP token => coins mapping\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/tokens/CurveFactoryLpTokenOracle.sol\":\"CurveFactoryLpTokenOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"contracts/interfaces/external/curve/ICurveAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurveAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 i) external view returns (address);\\n}\\n\",\"keccak256\":\"0x461681ed41c74b517147ff27f29139bff11d5e5de6f258e58b18d540fb779b58\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurveFactoryRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurveFactoryRegistry {\\n    function get_n_coins(address lp) external view returns (uint256);\\n\\n    function get_coins(address pool) external view returns (address[4] memory);\\n\\n    function get_meta_n_coins(address pool) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x513e6814114ae19180ac2e3f0e6ce884e7d3589ed0e36067e90ba4d60d2a968d\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx,\\n        uint256 _min_dy\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x030f3b115d45dfb8cb7c00e42b803f862093d93093dc23f6b479c0e89caac459\",\"license\":\"MIT\"},\"contracts/interfaces/periphery/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0xb48d57d83e75abecacbd065d3df55ee50eef4998fad94560cb1dbb0644049caa\",\"license\":\"MIT\"},\"contracts/interfaces/periphery/ITokenOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITokenOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n}\\n\",\"keccak256\":\"0x0a458745d97e56d125d348a597133af8572f34a7830c17d91b82cf8229c1492f\",\"license\":\"MIT\"},\"contracts/periphery/tokens/CurveFactoryLpTokenOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/periphery/ITokenOracle.sol\\\";\\nimport \\\"../../interfaces/external/curve/ICurveAddressProvider.sol\\\";\\nimport \\\"../../interfaces/external/curve/ICurveFactoryRegistry.sol\\\";\\nimport \\\"../../interfaces/external/curve/ICurvePool.sol\\\";\\nimport \\\"../../interfaces/periphery/IOracle.sol\\\";\\n\\n/**\\n * @title Oracle for Curve LP tokens (Factory Pools)\\n */\\ncontract CurveFactoryLpTokenOracle is ITokenOracle {\\n    /// @dev Same address for all chains\\n    ICurveAddressProvider public constant addressProvider =\\n        ICurveAddressProvider(0x0000000022D53366457F9d5E68Ec105046FC4383);\\n\\n    /// @notice Factory Registry contract\\n    ICurveFactoryRegistry public immutable registry;\\n\\n    /// @notice LP token => coins mapping\\n    mapping(address => address[]) public underlyingTokens;\\n\\n    /// @notice Emitted when a token is registered\\n    event LpRegistered(address indexed lpToken);\\n\\n    constructor() {\\n        registry = ICurveFactoryRegistry(addressProvider.get_address(3));\\n    }\\n\\n    /// @inheritdoc ITokenOracle\\n    function getPriceInUsd(address lpToken_) public view override returns (uint256 _priceInUsd) {\\n        address[] memory _tokens = underlyingTokens[lpToken_];\\n        require(_tokens.length > 0, \\\"lp-is-not-registered\\\");\\n        uint256 _min = type(uint256).max;\\n        uint256 _n = _tokens.length;\\n\\n        for (uint256 i; i < _n; i++) {\\n            uint256 _price = IOracle(msg.sender).getPriceInUsd(_tokens[i]);\\n            if (_price < _min) _min = _price;\\n        }\\n\\n        require(_min < type(uint256).max, \\\"no-min-underlying-price-found\\\");\\n        require(_min > 0, \\\"invalid-min-price\\\");\\n\\n        return (_min * ICurvePool(lpToken_).get_virtual_price()) / 1e18;\\n    }\\n\\n    /// @notice Check if a token is already registered\\n    function isLpRegistered(address lpToken_) public view returns (bool) {\\n        return underlyingTokens[lpToken_].length > 0;\\n    }\\n\\n    /// @notice Register LP token data\\n    /// @dev For factory pools, the LP and pool addresses are the same\\n    function registerLp(address lpToken_) external {\\n        require(!isLpRegistered(lpToken_), \\\"lp-already-registered\\\");\\n\\n        uint256 _n = registry.get_n_coins(lpToken_);\\n        if (_n == 0) (_n, ) = registry.get_meta_n_coins(lpToken_);\\n        require(_n > 0, \\\"invalid-factory-lp-token\\\");\\n\\n        address[4] memory _tokens = registry.get_coins(lpToken_);\\n        for (uint256 i; i < _n; i++) {\\n            underlyingTokens[lpToken_].push(_tokens[i]);\\n        }\\n\\n        emit LpRegistered(lpToken_);\\n    }\\n}\\n\",\"keccak256\":\"0x70caf29304b86645cda6306b97e2b3346d23252f4b1dbcc83d3a133bfd4d64bd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405163124fd3dd60e21b8152600360048201526f22d53366457f9d5e68ec105046fc43839063493f4f749060240160206040518083038186803b15801561005857600080fd5b505afa15801561006c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009091906100a1565b6001600160a01b03166080526100d1565b6000602082840312156100b357600080fd5b81516001600160a01b03811681146100ca57600080fd5b9392505050565b608051610bd16101006000396000818160f1015281816105ec015281816106b401526107e30152610bd16000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80637b103999116100505780637b103999146100ec5780637e3d431914610113578063e27dbd5e1461012857600080fd5b806301eadec41461007757806307ee40bf146100b45780632954018c146100d5575b600080fd5b61008a61008536600461097f565b610170565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100c76100c23660046109ab565b6101b5565b6040519081526020016100ab565b61008a6f22d53366457f9d5e68ec105046fc438381565b61008a7f000000000000000000000000000000000000000000000000000000000000000081565b6101266101213660046109ab565b610517565b005b6101606101363660046109ab565b73ffffffffffffffffffffffffffffffffffffffff16600090815260208190526040902054151590565b60405190151581526020016100ab565b6000602052816000526040600020818154811061018c57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169150829050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081815260408083208054825181850281018501909352808352849383018282801561023457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610209575b5050505050905060008151116102ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6c702d69732d6e6f742d7265676973746572656400000000000000000000000060448201526064015b60405180910390fd5b80516000199060005b8181101561039d5760003373ffffffffffffffffffffffffffffffffffffffff166307ee40bf8684815181106102ec576102ec6109cf565b60200260200101516040518263ffffffff1660e01b815260040161032c919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60206040518083038186803b15801561034457600080fd5b505afa158015610358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037c91906109fe565b90508381101561038a578093505b508061039581610a46565b9150506102b4565b506000198210610409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6e6f2d6d696e2d756e6465726c79696e672d70726963652d666f756e6400000060448201526064016102a2565b60008211610473576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c69642d6d696e2d707269636500000000000000000000000000000060448201526064016102a2565b670de0b6b3a76400008573ffffffffffffffffffffffffffffffffffffffff1663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c257600080fd5b505afa1580156104d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fa91906109fe565b6105049084610a61565b61050e9190610a80565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040902054156105a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6c702d616c72656164792d72656769737465726564000000000000000000000060448201526064016102a2565b6040517f940494f100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063940494f19060240160206040518083038186803b15801561063057600080fd5b505afa158015610644573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066891906109fe565b905080610731576040517feb73f37d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063eb73f37d90602401604080518083038186803b1580156106f557600080fd5b505afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d9190610abb565b5090505b6000811161079b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c69642d666163746f72792d6c702d746f6b656e000000000000000060448201526064016102a2565b6040517f9ac90d3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690639ac90d3d9060240160806040518083038186803b15801561082757600080fd5b505afa15801561083b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085f9190610aef565b905060005b828110156109135773ffffffffffffffffffffffffffffffffffffffff841660009081526020819052604090208282600481106108a3576108a36109cf565b6020908102919091015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790558061090b81610a46565b915050610864565b5060405173ffffffffffffffffffffffffffffffffffffffff8416907f21ebaedd59f317b5de83c2b833f2f8f6e38e5e826f527a827412bce37c93a14890600090a2505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461097c57600080fd5b50565b6000806040838503121561099257600080fd5b823561099d8161095a565b946020939093013593505050565b6000602082840312156109bd57600080fd5b81356109c88161095a565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610a1057600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000600019821415610a5a57610a5a610a17565b5060010190565b6000816000190483118215151615610a7b57610a7b610a17565b500290565b600082610ab6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008060408385031215610ace57600080fd5b505080516020909101519092909150565b8051610aea8161095a565b919050565b600060808284031215610b0157600080fd5b82601f830112610b1057600080fd5b6040516080810181811067ffffffffffffffff82111715610b5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052806080840185811115610b6f57600080fd5b845b81811015610b9057610b8281610adf565b835260209283019201610b71565b50919594505050505056fea2646970667358221220d229c82d6767b1c53327ee053e6c2537beea7d8e7c3261fb86f2b2ee40ebd3a764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80637b103999116100505780637b103999146100ec5780637e3d431914610113578063e27dbd5e1461012857600080fd5b806301eadec41461007757806307ee40bf146100b45780632954018c146100d5575b600080fd5b61008a61008536600461097f565b610170565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100c76100c23660046109ab565b6101b5565b6040519081526020016100ab565b61008a6f22d53366457f9d5e68ec105046fc438381565b61008a7f000000000000000000000000000000000000000000000000000000000000000081565b6101266101213660046109ab565b610517565b005b6101606101363660046109ab565b73ffffffffffffffffffffffffffffffffffffffff16600090815260208190526040902054151590565b60405190151581526020016100ab565b6000602052816000526040600020818154811061018c57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169150829050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081815260408083208054825181850281018501909352808352849383018282801561023457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610209575b5050505050905060008151116102ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6c702d69732d6e6f742d7265676973746572656400000000000000000000000060448201526064015b60405180910390fd5b80516000199060005b8181101561039d5760003373ffffffffffffffffffffffffffffffffffffffff166307ee40bf8684815181106102ec576102ec6109cf565b60200260200101516040518263ffffffff1660e01b815260040161032c919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60206040518083038186803b15801561034457600080fd5b505afa158015610358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037c91906109fe565b90508381101561038a578093505b508061039581610a46565b9150506102b4565b506000198210610409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6e6f2d6d696e2d756e6465726c79696e672d70726963652d666f756e6400000060448201526064016102a2565b60008211610473576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c69642d6d696e2d707269636500000000000000000000000000000060448201526064016102a2565b670de0b6b3a76400008573ffffffffffffffffffffffffffffffffffffffff1663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c257600080fd5b505afa1580156104d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fa91906109fe565b6105049084610a61565b61050e9190610a80565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040902054156105a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6c702d616c72656164792d72656769737465726564000000000000000000000060448201526064016102a2565b6040517f940494f100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063940494f19060240160206040518083038186803b15801561063057600080fd5b505afa158015610644573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066891906109fe565b905080610731576040517feb73f37d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063eb73f37d90602401604080518083038186803b1580156106f557600080fd5b505afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d9190610abb565b5090505b6000811161079b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c69642d666163746f72792d6c702d746f6b656e000000000000000060448201526064016102a2565b6040517f9ac90d3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690639ac90d3d9060240160806040518083038186803b15801561082757600080fd5b505afa15801561083b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085f9190610aef565b905060005b828110156109135773ffffffffffffffffffffffffffffffffffffffff841660009081526020819052604090208282600481106108a3576108a36109cf565b6020908102919091015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790558061090b81610a46565b915050610864565b5060405173ffffffffffffffffffffffffffffffffffffffff8416907f21ebaedd59f317b5de83c2b833f2f8f6e38e5e826f527a827412bce37c93a14890600090a2505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461097c57600080fd5b50565b6000806040838503121561099257600080fd5b823561099d8161095a565b946020939093013593505050565b6000602082840312156109bd57600080fd5b81356109c88161095a565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610a1057600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000600019821415610a5a57610a5a610a17565b5060010190565b6000816000190483118215151615610a7b57610a7b610a17565b500290565b600082610ab6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008060408385031215610ace57600080fd5b505080516020909101519092909150565b8051610aea8161095a565b919050565b600060808284031215610b0157600080fd5b82601f830112610b1057600080fd5b6040516080810181811067ffffffffffffffff82111715610b5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052806080840185811115610b6f57600080fd5b845b81811015610b9057610b8281610adf565b835260209283019201610b71565b50919594505050505056fea2646970667358221220d229c82d6767b1c53327ee053e6c2537beea7d8e7c3261fb86f2b2ee40ebd3a764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPriceInUsd(address)": {
        "params": {
          "token_": "The address of asset"
        },
        "returns": {
          "_priceInUsd": "The USD price"
        }
      },
      "registerLp(address)": {
        "details": "For factory pools, the LP and pool addresses are the same"
      }
    },
    "stateVariables": {
      "addressProvider": {
        "details": "Same address for all chains"
      }
    },
    "title": "Oracle for Curve LP tokens (Factory Pools)",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LpRegistered(address)": {
        "notice": "Emitted when a token is registered"
      }
    },
    "kind": "user",
    "methods": {
      "getPriceInUsd(address)": {
        "notice": "Get USD (or equivalent) price of an asset"
      },
      "isLpRegistered(address)": {
        "notice": "Check if a token is already registered"
      },
      "registerLp(address)": {
        "notice": "Register LP token data"
      },
      "registry()": {
        "notice": "Factory Registry contract"
      },
      "underlyingTokens(address,uint256)": {
        "notice": "LP token => coins mapping"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16356,
        "contract": "contracts/periphery/tokens/CurveFactoryLpTokenOracle.sol:CurveFactoryLpTokenOracle",
        "label": "underlyingTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      }
    }
  }
}
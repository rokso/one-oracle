{
  "address": "0x0aac835162D368F246dc71628AfcD6d2930c47d3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOracle",
          "name": "defaultOracle_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IOracle",
          "name": "defaultOracle",
          "type": "address"
        }
      ],
      "name": "DefaultOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IOracle",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "TokenOracleUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultOracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteTokenToUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteUsdToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOracle",
          "name": "defaultOracle_",
          "type": "address"
        }
      ],
      "name": "updateDefaultOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "contract IOracle",
          "name": "oracle_",
          "type": "address"
        }
      ],
      "name": "updateTokenOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens_",
          "type": "address[]"
        },
        {
          "internalType": "contract IOracle[]",
          "name": "oracles_",
          "type": "address[]"
        }
      ],
      "name": "updateTokenOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f33ce210fa0867aaf559ec72608594b9744f7f9af5d65f7add1feb2c2af4495",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x0aac835162D368F246dc71628AfcD6d2930c47d3",
    "transactionIndex": 0,
    "gasUsed": "878672",
    "logsBloom": "0x
    "blockHash": "0x15ab7508c3e0b9047c8034253ff50776a338ed19f8d2c0879156939ff20cc151",
    "transactionHash": "0x2f33ce210fa0867aaf559ec72608594b9744f7f9af5d65f7add1feb2c2af4495",
    "logs": [],
    "blockNumber": 74149584,
    "cumulativeGasUsed": "878672",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x42c9De8bf891F0bE9dA7dA8078c1f301553CE064"
  ],
  "numDeployments": 1,
  "solcInputHash": "6560b70d562cf6c2a7aadabeef5e4dc6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"defaultOracle_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOracle\",\"name\":\"defaultOracle\",\"type\":\"address\"}],\"name\":\"DefaultOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"TokenOracleUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteTokenToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteUsdToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"defaultOracle_\",\"type\":\"address\"}],\"name\":\"updateDefaultOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle_\",\"type\":\"address\"}],\"name\":\"updateTokenOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"contract IOracle[]\",\"name\":\"oracles_\",\"type\":\"address[]\"}],\"name\":\"updateTokenOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPriceInUsd(address)\":{\"params\":{\"token_\":\"The address of asset\"},\"returns\":{\"_priceInUsd\":\"The USD price\"}},\"quote(address,address,uint256)\":{\"params\":{\"amountIn_\":\"Amount of input token\",\"tokenIn_\":\"The address of assetIn\",\"tokenOut_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Amount out\"}},\"quoteTokenToUsd(address,uint256)\":{\"params\":{\"amountIn_\":\"Amount of input token.\",\"token_\":\"The address of assetIn\"},\"returns\":{\"_amountOut\":\"Amount in USD\"}},\"quoteUsdToToken(address,uint256)\":{\"params\":{\"amountIn_\":\"Input amount in USD\",\"token_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Output amount of token\"}},\"updateTokenOracles(address[],address[])\":{\"details\":\"We allow null address inside of the `oracles_` array in order to turn off oracle for a given asset\"}},\"stateVariables\":{\"oracles\":{\"details\":\"Useful when dealing with special tokens (e.g. LP, IB, etc)\"}},\"title\":\"MasterOracle\",\"version\":1},\"userdoc\":{\"events\":{\"DefaultOracleUpdated(address)\":{\"notice\":\"Emitted when the default oracle is updated\"},\"TokenOracleUpdated(address,address)\":{\"notice\":\"Emitted when a token's oracle is set\"}},\"kind\":\"user\",\"methods\":{\"defaultOracle()\":{\"notice\":\"Default oracle to use when token hasn't custom oracle\"},\"getPriceInUsd(address)\":{\"notice\":\"Get USD (or equivalent) price of an asset\"},\"oracles(address)\":{\"notice\":\"Custom tokens' oracles\"},\"quote(address,address,uint256)\":{\"notice\":\"Get quote\"},\"quoteTokenToUsd(address,uint256)\":{\"notice\":\"Get quote in USD (or equivalent) amount\"},\"quoteUsdToToken(address,uint256)\":{\"notice\":\"Get quote from USD (or equivalent) amount to amount of token\"},\"updateDefaultOracle(address)\":{\"notice\":\"Update the default oracle\"},\"updateTokenOracle(address,address)\":{\"notice\":\"Set custom oracle for a token\"},\"updateTokenOracles(address[],address[])\":{\"notice\":\"Set custom oracles for a set of tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/MasterOracle.sol\":\"MasterOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/core/IAddressProvider.sol\\\";\\n\\n/**\\n * @notice Contract module which provides access control mechanism, where\\n * the governor account is granted with exclusive access to specific functions.\\n * @dev Uses the AddressProvider to get the governor\\n */\\nabstract contract Governable {\\n    IAddressProvider public constant addressProvider = IAddressProvider(0xfbA0816A81bcAbBf3829bED28618177a2bf0e82A);\\n\\n    /// @dev Throws if called by any account other than the governor.\\n    modifier onlyGovernor() {\\n        require(msg.sender == addressProvider.governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9fcc955db07cc6517e7456517eae374a3910d557b7d16f9372154188290d3da0\",\"license\":\"MIT\"},\"contracts/interfaces/core/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStableCoinProvider.sol\\\";\\nimport \\\"./IPriceProvidersAggregator.sol\\\";\\n\\ninterface IAddressProvider {\\n    function governor() external view returns (address);\\n\\n    function providersAggregator() external view returns (IPriceProvidersAggregator);\\n\\n    function stableCoinProvider() external view returns (IStableCoinProvider);\\n\\n    function updateProvidersAggregator(IPriceProvidersAggregator providersAggregator_) external;\\n}\\n\",\"keccak256\":\"0x133c36faf973cdef1639bdbc837c21368240146875b5aa28e533bb1769b84329\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n}\\n\",\"keccak256\":\"0x188c27728bd50b187944ef217b58751efd7b8ec3f1ef0d923be82298b2b0af0e\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvidersAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"./IPriceProvider.sol\\\";\\n\\n/**\\n * @notice PriceProvidersAggregator interface\\n * @dev Worth noting that the `_lastUpdatedAt` logic depends on the underlying price provider. In summary:\\n * ChainLink: returns the last updated date from the aggregator\\n * UniswapV2: returns the date of the latest pair oracle update\\n * UniswapV3: assumes that the price is always updated (returns block.timestamp)\\n * Flux: returns the last updated date from the aggregator\\n * Umbrella (FCD): returns the last updated date returned from their oracle contract\\n * Umbrella (Passport): returns the date of the latest pallet submission\\n * Anytime that a quote performs more than one query, it uses the oldest date as the `_lastUpdatedAt`.\\n * See more: https://github.com/bloqpriv/one-oracle/issues/64\\n */\\ninterface IPriceProvidersAggregator {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        external\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Provider Providers' mapping\\n     */\\n    function priceProviders(DataTypes.Provider provider_) external view returns (IPriceProvider _priceProvider);\\n\\n    /**\\n     * @notice Get quote\\n     * @param provider_ The price provider to get quote from\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote\\n     * @dev If providers aren't the same, uses native token as \\\"bridge\\\"\\n     * @param providerIn_ The price provider to get quote for the tokenIn\\n     * @param tokenIn_ The address of assetIn\\n     * @param providerOut_ The price provider to get quote for the tokenOut\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _nativeTokenLastUpdatedAt Last updated timestamp of native token (i.e. WETH) used when providers aren't the same\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        DataTypes.Provider providerIn_,\\n        address tokenIn_,\\n        DataTypes.Provider providerOut_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _nativeTokenLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Set a price provider\\n     * @dev Administrative function\\n     * @param provider_ The provider (from enum)\\n     * @param priceProvider_ The price provider contract\\n     */\\n    function setPriceProvider(DataTypes.Provider provider_, IPriceProvider priceProvider_) external;\\n}\\n\",\"keccak256\":\"0xbd791bd564866a61c6aac64171095a9134dfe9c5173a0ddbe22312a9bdfc9c19\",\"license\":\"MIT\"},\"contracts/interfaces/core/IStableCoinProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStableCoinProvider {\\n    /**\\n     * @notice Return the stable coin if pegged\\n     * @dev Check price relation between both stable coins and revert if peg is too loose\\n     * @return _stableCoin The primary stable coin if pass all checks\\n     */\\n    function getStableCoinIfPegged() external view returns (address _stableCoin);\\n\\n    /**\\n     * @notice Convert given amount of stable coin to USD representation (18 decimals)\\n     */\\n    function toUsdRepresentation(uint256 stableCoinAmount_) external view returns (uint256 _usdAmount);\\n}\\n\",\"keccak256\":\"0x57121c0faef63ea2d06b05048054ffa78d4d3c5734c2dabc1aaa4c5032e194c5\",\"license\":\"MIT\"},\"contracts/interfaces/periphery/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0xb48d57d83e75abecacbd065d3df55ee50eef4998fad94560cb1dbb0644049caa\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary DataTypes {\\n    /**\\n     * @notice Price providers enumeration\\n     */\\n    enum Provider {\\n        NONE,\\n        CHAINLINK,\\n        UNISWAP_V3,\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UMBRELLA_FIRST_CLASS,\\n        UMBRELLA_PASSPORT,\\n        FLUX\\n    }\\n\\n    enum ExchangeType {\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UNISWAP_V3,\\n        PANCAKE_SWAP,\\n        CURVE\\n    }\\n\\n    enum SwapType {\\n        EXACT_INPUT,\\n        EXACT_OUTPUT\\n    }\\n}\\n\",\"keccak256\":\"0x95f2896f7ec6df99ed860b7682fd2801477b4517a27dd3f7bb111c879f43f847\",\"license\":\"MIT\"},\"contracts/periphery/MasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/periphery/IOracle.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\n/**\\n * @title MasterOracle\\n */\\ncontract MasterOracle is IOracle, Governable {\\n    /**\\n     * @notice Default oracle to use when token hasn't custom oracle\\n     */\\n    IOracle public defaultOracle;\\n\\n    /**\\n     * @notice Custom tokens' oracles\\n     * @dev Useful when dealing with special tokens (e.g. LP, IB, etc)\\n     */\\n    mapping(address => IOracle) public oracles;\\n\\n    /// @notice Emitted when a token's oracle is set\\n    event TokenOracleUpdated(address indexed token, IOracle indexed oracle);\\n\\n    /// @notice Emitted when the default oracle is updated\\n    event DefaultOracleUpdated(IOracle indexed defaultOracle);\\n\\n    constructor(IOracle defaultOracle_) {\\n        defaultOracle = defaultOracle_;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function getPriceInUsd(address token_) public view override returns (uint256 _priceInUsd) {\\n        IOracle _oracle = oracles[token_];\\n\\n        if (address(_oracle) != address(0)) {\\n            _priceInUsd = _oracle.getPriceInUsd(token_);\\n        } else if (address(defaultOracle) != address(0)) {\\n            _priceInUsd = defaultOracle.getPriceInUsd(token_);\\n        } else {\\n            revert(\\\"token-without-oracle\\\");\\n        }\\n\\n        require(_priceInUsd > 0, \\\"invalid-token-price\\\");\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view virtual override returns (uint256 _amountOut) {\\n        _amountOut = quoteUsdToToken(tokenOut_, quoteTokenToUsd(tokenIn_, amountIn_));\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) public view override returns (uint256 _amountOut) {\\n        _amountOut = (amountIn_ * getPriceInUsd(token_)) / 10**IERC20Metadata(token_).decimals();\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function quoteUsdToToken(address token_, uint256 amountIn_) public view override returns (uint256 _amountOut) {\\n        _amountOut = (amountIn_ * 10**IERC20Metadata(token_).decimals()) / getPriceInUsd(token_);\\n    }\\n\\n    /// @notice Set custom oracle for a token\\n    function _updateTokenOracle(address token_, IOracle oracle_) private {\\n        oracles[token_] = oracle_;\\n        emit TokenOracleUpdated(token_, oracle_);\\n    }\\n\\n    /// @notice Update the default oracle\\n    function updateDefaultOracle(IOracle defaultOracle_) external onlyGovernor {\\n        defaultOracle = defaultOracle_;\\n        emit DefaultOracleUpdated(defaultOracle_);\\n    }\\n\\n    /// @notice Set custom oracle for a token\\n    function updateTokenOracle(address token_, IOracle oracle_) external onlyGovernor {\\n        _updateTokenOracle(token_, oracle_);\\n    }\\n\\n    /**\\n     * @notice Set custom oracles for a set of tokens\\n     * @dev We allow null address inside of the `oracles_` array in order to turn off oracle for a given asset\\n     */\\n    function updateTokenOracles(address[] calldata tokens_, IOracle[] calldata oracles_) external onlyGovernor {\\n        uint256 _tokensLength = tokens_.length;\\n        require(_tokensLength > 0 && _tokensLength == oracles_.length, \\\"invalid-arrays-length\\\");\\n\\n        for (uint256 i; i < _tokensLength; ++i) {\\n            address _token = tokens_[i];\\n            require(_token != address(0), \\\"a-token-has-null-address\\\");\\n            _updateTokenOracle(_token, oracles_[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbd8ecbe3f8e6909b0abd0b46455bfe2be613d2f77c9a7a9cdc005cc2fb4f4962\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610f20380380610f2083398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610e8d806100936000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638d0dba0011610076578063b5e9bef51161005b578063b5e9bef5146101ba578063b6466384146101cd578063c1934d9b146101e057600080fd5b80638d0dba0014610171578063addd50991461018457600080fd5b80633e797970116100a75780633e7979701461012957806359fd69481461013e57806380dce1691461015157600080fd5b806307ee40bf146100c35780632954018c146100e9575b600080fd5b6100d66100d1366004610abb565b6101f3565b6040519081526020015b60405180910390f35b61010473fba0816a81bcabbf3829bed28618177a2bf0e82a81565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e0565b61013c610137366004610abb565b6103e3565b005b61013c61014c366004610b24565b61055c565b6000546101049073ffffffffffffffffffffffffffffffffffffffff1681565b6100d661017f366004610b90565b6107a5565b610104610192366004610abb565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6100d66101c8366004610b90565b610854565b6100d66101db366004610bbc565b6108e8565b61013c6101ee366004610bfd565b610900565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526001602052604081205490911680156102ca576040517f07ee40bf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528216906307ee40bf906024015b60206040518083038186803b15801561028b57600080fd5b505afa15801561029f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c39190610c36565b915061038d565b60005473ffffffffffffffffffffffffffffffffffffffff1615610340576000546040517f07ee40bf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152909116906307ee40bf90602401610273565b60405162461bcd60e51b815260206004820152601460248201527f746f6b656e2d776974686f75742d6f7261636c6500000000000000000000000060448201526064015b60405180910390fd5b600082116103dd5760405162461bcd60e51b815260206004820152601360248201527f696e76616c69642d746f6b656e2d7072696365000000000000000000000000006044820152606401610384565b50919050565b73fba0816a81bcabbf3829bed28618177a2bf0e82a73ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561043d57600080fd5b505afa158015610451573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104759190610c4f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ef5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610384565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f1bc296d82f6c12b9613275344793ebdb1c8ed5dca91d1699898b5c9adf1e997891a250565b73fba0816a81bcabbf3829bed28618177a2bf0e82a73ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156105b657600080fd5b505afa1580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee9190610c4f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106685760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610384565b82801580159061067757508082145b6106c35760405162461bcd60e51b815260206004820152601560248201527f696e76616c69642d6172726179732d6c656e67746800000000000000000000006044820152606401610384565b60005b8181101561079d5760008686838181106106e2576106e2610c6c565b90506020020160208101906106f79190610abb565b905073ffffffffffffffffffffffffffffffffffffffff811661075c5760405162461bcd60e51b815260206004820152601860248201527f612d746f6b656e2d6861732d6e756c6c2d6164647265737300000000000000006044820152606401610384565b61078c8186868581811061077257610772610c6c565b90506020020160208101906107879190610abb565b610a1a565b5061079681610cca565b90506106c6565b505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ed57600080fd5b505afa158015610801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108259190610ce5565b61083090600a610dee565b610839846101f3565b6108439084610dfd565b61084d9190610e1c565b9392505050565b600061085f836101f3565b8373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a557600080fd5b505afa1580156108b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dd9190610ce5565b61083990600a610dee565b60006108f8836101c886856107a5565b949350505050565b73fba0816a81bcabbf3829bed28618177a2bf0e82a73ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561095a57600080fd5b505afa15801561096e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109929190610c4f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a0c5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610384565b610a168282610a1a565b5050565b73ffffffffffffffffffffffffffffffffffffffff82811660008181526001602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055517f38af5c16b8276594303df55e002ec2a4e461e676aa19663bcb1ff9e1823acdf79190a35050565b73ffffffffffffffffffffffffffffffffffffffff81168114610ab857600080fd5b50565b600060208284031215610acd57600080fd5b813561084d81610a96565b60008083601f840112610aea57600080fd5b50813567ffffffffffffffff811115610b0257600080fd5b6020830191508360208260051b8501011115610b1d57600080fd5b9250929050565b60008060008060408587031215610b3a57600080fd5b843567ffffffffffffffff80821115610b5257600080fd5b610b5e88838901610ad8565b90965094506020870135915080821115610b7757600080fd5b50610b8487828801610ad8565b95989497509550505050565b60008060408385031215610ba357600080fd5b8235610bae81610a96565b946020939093013593505050565b600080600060608486031215610bd157600080fd5b8335610bdc81610a96565b92506020840135610bec81610a96565b929592945050506040919091013590565b60008060408385031215610c1057600080fd5b8235610c1b81610a96565b91506020830135610c2b81610a96565b809150509250929050565b600060208284031215610c4857600080fd5b5051919050565b600060208284031215610c6157600080fd5b815161084d81610a96565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000600019821415610cde57610cde610c9b565b5060010190565b600060208284031215610cf757600080fd5b815160ff8116811461084d57600080fd5b600181815b80851115610d43578160001904821115610d2957610d29610c9b565b80851615610d3657918102915b93841c9390800290610d0d565b509250929050565b600082610d5a57506001610de8565b81610d6757506000610de8565b8160018114610d7d5760028114610d8757610da3565b6001915050610de8565b60ff841115610d9857610d98610c9b565b50506001821b610de8565b5060208310610133831016604e8410600b8410161715610dc6575081810a610de8565b610dd08383610d08565b8060001904821115610de457610de4610c9b565b0290505b92915050565b600061084d60ff841683610d4b565b6000816000190483118215151615610e1757610e17610c9b565b500290565b600082610e52577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212204053a2478c2ca19f7ca15aefc302308681f8932a94b000864339f3e399b3126064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80638d0dba0011610076578063b5e9bef51161005b578063b5e9bef5146101ba578063b6466384146101cd578063c1934d9b146101e057600080fd5b80638d0dba0014610171578063addd50991461018457600080fd5b80633e797970116100a75780633e7979701461012957806359fd69481461013e57806380dce1691461015157600080fd5b806307ee40bf146100c35780632954018c146100e9575b600080fd5b6100d66100d1366004610abb565b6101f3565b6040519081526020015b60405180910390f35b61010473fba0816a81bcabbf3829bed28618177a2bf0e82a81565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e0565b61013c610137366004610abb565b6103e3565b005b61013c61014c366004610b24565b61055c565b6000546101049073ffffffffffffffffffffffffffffffffffffffff1681565b6100d661017f366004610b90565b6107a5565b610104610192366004610abb565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6100d66101c8366004610b90565b610854565b6100d66101db366004610bbc565b6108e8565b61013c6101ee366004610bfd565b610900565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526001602052604081205490911680156102ca576040517f07ee40bf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528216906307ee40bf906024015b60206040518083038186803b15801561028b57600080fd5b505afa15801561029f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c39190610c36565b915061038d565b60005473ffffffffffffffffffffffffffffffffffffffff1615610340576000546040517f07ee40bf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152909116906307ee40bf90602401610273565b60405162461bcd60e51b815260206004820152601460248201527f746f6b656e2d776974686f75742d6f7261636c6500000000000000000000000060448201526064015b60405180910390fd5b600082116103dd5760405162461bcd60e51b815260206004820152601360248201527f696e76616c69642d746f6b656e2d7072696365000000000000000000000000006044820152606401610384565b50919050565b73fba0816a81bcabbf3829bed28618177a2bf0e82a73ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561043d57600080fd5b505afa158015610451573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104759190610c4f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ef5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610384565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f1bc296d82f6c12b9613275344793ebdb1c8ed5dca91d1699898b5c9adf1e997891a250565b73fba0816a81bcabbf3829bed28618177a2bf0e82a73ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156105b657600080fd5b505afa1580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee9190610c4f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106685760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610384565b82801580159061067757508082145b6106c35760405162461bcd60e51b815260206004820152601560248201527f696e76616c69642d6172726179732d6c656e67746800000000000000000000006044820152606401610384565b60005b8181101561079d5760008686838181106106e2576106e2610c6c565b90506020020160208101906106f79190610abb565b905073ffffffffffffffffffffffffffffffffffffffff811661075c5760405162461bcd60e51b815260206004820152601860248201527f612d746f6b656e2d6861732d6e756c6c2d6164647265737300000000000000006044820152606401610384565b61078c8186868581811061077257610772610c6c565b90506020020160208101906107879190610abb565b610a1a565b5061079681610cca565b90506106c6565b505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ed57600080fd5b505afa158015610801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108259190610ce5565b61083090600a610dee565b610839846101f3565b6108439084610dfd565b61084d9190610e1c565b9392505050565b600061085f836101f3565b8373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a557600080fd5b505afa1580156108b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dd9190610ce5565b61083990600a610dee565b60006108f8836101c886856107a5565b949350505050565b73fba0816a81bcabbf3829bed28618177a2bf0e82a73ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561095a57600080fd5b505afa15801561096e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109929190610c4f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a0c5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610384565b610a168282610a1a565b5050565b73ffffffffffffffffffffffffffffffffffffffff82811660008181526001602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055517f38af5c16b8276594303df55e002ec2a4e461e676aa19663bcb1ff9e1823acdf79190a35050565b73ffffffffffffffffffffffffffffffffffffffff81168114610ab857600080fd5b50565b600060208284031215610acd57600080fd5b813561084d81610a96565b60008083601f840112610aea57600080fd5b50813567ffffffffffffffff811115610b0257600080fd5b6020830191508360208260051b8501011115610b1d57600080fd5b9250929050565b60008060008060408587031215610b3a57600080fd5b843567ffffffffffffffff80821115610b5257600080fd5b610b5e88838901610ad8565b90965094506020870135915080821115610b7757600080fd5b50610b8487828801610ad8565b95989497509550505050565b60008060408385031215610ba357600080fd5b8235610bae81610a96565b946020939093013593505050565b600080600060608486031215610bd157600080fd5b8335610bdc81610a96565b92506020840135610bec81610a96565b929592945050506040919091013590565b60008060408385031215610c1057600080fd5b8235610c1b81610a96565b91506020830135610c2b81610a96565b809150509250929050565b600060208284031215610c4857600080fd5b5051919050565b600060208284031215610c6157600080fd5b815161084d81610a96565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000600019821415610cde57610cde610c9b565b5060010190565b600060208284031215610cf757600080fd5b815160ff8116811461084d57600080fd5b600181815b80851115610d43578160001904821115610d2957610d29610c9b565b80851615610d3657918102915b93841c9390800290610d0d565b509250929050565b600082610d5a57506001610de8565b81610d6757506000610de8565b8160018114610d7d5760028114610d8757610da3565b6001915050610de8565b60ff841115610d9857610d98610c9b565b50506001821b610de8565b5060208310610133831016604e8410600b8410161715610dc6575081810a610de8565b610dd08383610d08565b8060001904821115610de457610de4610c9b565b0290505b92915050565b600061084d60ff841683610d4b565b6000816000190483118215151615610e1757610e17610c9b565b500290565b600082610e52577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212204053a2478c2ca19f7ca15aefc302308681f8932a94b000864339f3e399b3126064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPriceInUsd(address)": {
        "params": {
          "token_": "The address of asset"
        },
        "returns": {
          "_priceInUsd": "The USD price"
        }
      },
      "quote(address,address,uint256)": {
        "params": {
          "amountIn_": "Amount of input token",
          "tokenIn_": "The address of assetIn",
          "tokenOut_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Amount out"
        }
      },
      "quoteTokenToUsd(address,uint256)": {
        "params": {
          "amountIn_": "Amount of input token.",
          "token_": "The address of assetIn"
        },
        "returns": {
          "_amountOut": "Amount in USD"
        }
      },
      "quoteUsdToToken(address,uint256)": {
        "params": {
          "amountIn_": "Input amount in USD",
          "token_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Output amount of token"
        }
      },
      "updateTokenOracles(address[],address[])": {
        "details": "We allow null address inside of the `oracles_` array in order to turn off oracle for a given asset"
      }
    },
    "stateVariables": {
      "oracles": {
        "details": "Useful when dealing with special tokens (e.g. LP, IB, etc)"
      }
    },
    "title": "MasterOracle",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DefaultOracleUpdated(address)": {
        "notice": "Emitted when the default oracle is updated"
      },
      "TokenOracleUpdated(address,address)": {
        "notice": "Emitted when a token's oracle is set"
      }
    },
    "kind": "user",
    "methods": {
      "defaultOracle()": {
        "notice": "Default oracle to use when token hasn't custom oracle"
      },
      "getPriceInUsd(address)": {
        "notice": "Get USD (or equivalent) price of an asset"
      },
      "oracles(address)": {
        "notice": "Custom tokens' oracles"
      },
      "quote(address,address,uint256)": {
        "notice": "Get quote"
      },
      "quoteTokenToUsd(address,uint256)": {
        "notice": "Get quote in USD (or equivalent) amount"
      },
      "quoteUsdToToken(address,uint256)": {
        "notice": "Get quote from USD (or equivalent) amount to amount of token"
      },
      "updateDefaultOracle(address)": {
        "notice": "Update the default oracle"
      },
      "updateTokenOracle(address,address)": {
        "notice": "Set custom oracle for a token"
      },
      "updateTokenOracles(address[],address[])": {
        "notice": "Set custom oracles for a set of tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15593,
        "contract": "contracts/periphery/MasterOracle.sol:MasterOracle",
        "label": "defaultOracle",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IOracle)13786"
      },
      {
        "astId": 15599,
        "contract": "contracts/periphery/MasterOracle.sol:MasterOracle",
        "label": "oracles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_contract(IOracle)13786)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)13786": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(IOracle)13786)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IOracle)",
        "numberOfBytes": "32",
        "value": "t_contract(IOracle)13786"
      }
    }
  }
}
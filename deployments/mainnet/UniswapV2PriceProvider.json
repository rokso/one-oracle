{
  "address": "0x06950080017FC33628239Aa50E4Fd6cecAfd133D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "defaultTwapPeriod_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nativeToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTwapPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTwapPeriod",
          "type": "uint256"
        }
      ],
      "name": "DefaultTwapPeriodUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "USD_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultTwapPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceInUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "twapPeriod_",
          "type": "uint256"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceInUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "pair_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "twapPeriod_",
          "type": "uint256"
        }
      ],
      "name": "hasOracle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "pair_",
          "type": "address"
        }
      ],
      "name": "hasOracle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price0CumulativeLast",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price1CumulativeLast",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "blockTimestampLast",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "_x",
              "type": "uint224"
            }
          ],
          "internalType": "struct FixedPoint.uq112x112",
          "name": "price0Average",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "_x",
              "type": "uint224"
            }
          ],
          "internalType": "struct FixedPoint.uq112x112",
          "name": "price1Average",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1_",
          "type": "address"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "_pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "twapPeriod_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteTokenToUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "twapPeriod_",
          "type": "uint256"
        }
      ],
      "name": "quoteTokenToUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "twapPeriod_",
          "type": "uint256"
        }
      ],
      "name": "quoteUsdToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteUsdToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "twapPeriod_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "updateAndQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "updateAndQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDefaultTwapPeriod_",
          "type": "uint256"
        }
      ],
      "name": "updateDefaultTwapPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "twapPeriod_",
          "type": "uint256"
        }
      ],
      "name": "updateOrAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        }
      ],
      "name": "updateOrAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c7391241f1d4731e62e19028a29771a6da2a0c11d1e65fc0f814fe4b7ca3654",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x06950080017FC33628239Aa50E4Fd6cecAfd133D",
    "transactionIndex": 49,
    "gasUsed": "1704421",
    "logsBloom": "0x
    "blockHash": "0xa624673bc861a52cf43cf2c748da78e5af966a0e0daddf6232b1e66e9f88b8de",
    "transactionHash": "0x3c7391241f1d4731e62e19028a29771a6da2a0c11d1e65fc0f814fe4b7ca3654",
    "logs": [],
    "blockNumber": 15546216,
    "cumulativeGasUsed": "3394715",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
    7200,
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
  ],
  "numDeployments": 2,
  "solcInputHash": "8b654c506c10a4071125075f82070c93",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"defaultTwapPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nativeToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTwapPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTwapPeriod\",\"type\":\"uint256\"}],\"name\":\"DefaultTwapPeriodUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USD_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultTwapPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"twapPeriod_\",\"type\":\"uint256\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"twapPeriod_\",\"type\":\"uint256\"}],\"name\":\"hasOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair_\",\"type\":\"address\"}],\"name\":\"hasOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct FixedPoint.uq112x112\",\"name\":\"price0Average\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct FixedPoint.uq112x112\",\"name\":\"price1Average\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"_pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"twapPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteTokenToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"twapPeriod_\",\"type\":\"uint256\"}],\"name\":\"quoteTokenToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"twapPeriod_\",\"type\":\"uint256\"}],\"name\":\"quoteUsdToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteUsdToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"twapPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"updateAndQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"updateAndQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDefaultTwapPeriod_\",\"type\":\"uint256\"}],\"name\":\"updateDefaultTwapPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"twapPeriod_\",\"type\":\"uint256\"}],\"name\":\"updateOrAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"}],\"name\":\"updateOrAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPriceInUsd(address)\":{\"params\":{\"token_\":\"The address of asset\"},\"returns\":{\"_lastUpdatedAt\":\"Last updated timestamp\",\"_priceInUsd\":\"The USD price\"}},\"getPriceInUsd(address,uint256)\":{\"params\":{\"token_\":\"The address of assetIn\",\"twapPeriod_\":\"The TWAP period\"},\"returns\":{\"_lastUpdatedAt\":\"Last updated timestamp\",\"_priceInUsd\":\"The USD price\"}},\"hasOracle(address)\":{\"details\":\"Uses `defaultTwapPeriod`\",\"params\":{\"pair_\":\"The pair\"},\"returns\":{\"_0\":\"True if exists\"}},\"hasOracle(address,uint256)\":{\"params\":{\"pair_\":\"The pair\",\"twapPeriod_\":\"The TWAP period\"},\"returns\":{\"_0\":\"True if exists\"}},\"quote(address,address,uint256)\":{\"params\":{\"amountIn_\":\"Amount of input token\",\"tokenIn_\":\"The address of assetIn\",\"tokenOut_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Amount out\",\"_lastUpdatedAt\":\"Last updated timestamp\"}},\"quote(address,address,uint256,uint256)\":{\"params\":{\"amountIn_\":\"Amount of input token\",\"tokenIn_\":\"The address of assetIn\",\"tokenOut_\":\"The address of assetOut\",\"twapPeriod_\":\"The TWAP period\"},\"returns\":{\"_amountOut\":\"Amount out\",\"_lastUpdatedAt\":\"Last updated timestamp\"}},\"quoteTokenToUsd(address,uint256)\":{\"params\":{\"amountIn_\":\"Amount of input token.\",\"token_\":\"The address of assetIn\"},\"returns\":{\"_amountOut\":\"Amount in USD\",\"_lastUpdatedAt\":\"Last updated timestamp\"}},\"quoteTokenToUsd(address,uint256,uint256)\":{\"params\":{\"amountIn_\":\"Amount of input token.\",\"token_\":\"The address of assetIn\",\"twapPeriod_\":\"The TWAP period\"},\"returns\":{\"_amountOut\":\"Amount in USD\",\"_lastUpdatedAt\":\"Last updated timestamp\"}},\"quoteUsdToToken(address,uint256)\":{\"params\":{\"amountIn_\":\"Input amount in USD\",\"token_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Output amount of token\",\"_lastUpdatedAt\":\"Last updated timestamp\"}},\"quoteUsdToToken(address,uint256,uint256)\":{\"params\":{\"amountIn_\":\"Input amount in USD\",\"token_\":\"The address of assetIn\",\"twapPeriod_\":\"The TWAP period\"},\"returns\":{\"_amountOut\":\"Output amount of token\",\"_lastUpdatedAt\":\"Last updated timestamp\"}},\"updateAndQuote(address,address,uint256)\":{\"details\":\"Will update the oracle if needed before getting quoteUses `defaultTwapPeriod`\",\"params\":{\"amountIn_\":\"Amount of input token\",\"tokenIn_\":\"The address of assetIn\",\"tokenOut_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Amount out\",\"_lastUpdatedAt\":\"Last updated timestamp\"}},\"updateAndQuote(address,address,uint256,uint256)\":{\"details\":\"Will update the oracle if needed before getting quote\",\"params\":{\"amountIn_\":\"Amount of input token\",\"tokenIn_\":\"The address of assetIn\",\"tokenOut_\":\"The address of assetOut\",\"twapPeriod_\":\"The TWAP period\"},\"returns\":{\"_amountOut\":\"Amount out\",\"_lastUpdatedAt\":\"Last updated timestamp\"}},\"updateDefaultTwapPeriod(uint256)\":{\"details\":\"Administrative function\",\"params\":{\"newDefaultTwapPeriod_\":\"The new default period\"}},\"updateOrAdd(address,address)\":{\"details\":\"Will create the pair if it doesn't existUses `defaultTwapPeriod`\",\"params\":{\"tokenIn_\":\"The address of assetIn\",\"tokenOut_\":\"The address of assetOut\"}},\"updateOrAdd(address,address,uint256)\":{\"details\":\"Will create the pair if it doesn't exist\",\"params\":{\"tokenIn_\":\"The address of assetIn\",\"tokenOut_\":\"The address of assetOut\",\"twapPeriod_\":\"The TWAP period\"}}},\"stateVariables\":{\"defaultTwapPeriod\":{\"details\":\"See more: https://docs.uniswap.org/protocol/concepts/V3-overview/oracle\"},\"oracles\":{\"details\":\"pair => twapPeriod => oracle\"}},\"title\":\"UniswapV2 (and forks) TWAP Oracle implementation Based on https://github.com/Uniswap/v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol\",\"version\":1},\"userdoc\":{\"events\":{\"DefaultTwapPeriodUpdated(uint256,uint256)\":{\"notice\":\"Emitted when default TWAP period is updated\"}},\"kind\":\"user\",\"methods\":{\"defaultTwapPeriod()\":{\"notice\":\"The default time-weighted average price (TWAP) period Used when a period isn't specified\"},\"factory()\":{\"notice\":\"The UniswapV2-like factory's address\"},\"getPriceInUsd(address)\":{\"notice\":\"Get USD (or equivalent) price of an asset\"},\"getPriceInUsd(address,uint256)\":{\"notice\":\"Get USD (or equivalent) price of an asset\"},\"hasOracle(address)\":{\"notice\":\"Check if there is an oracle for the PAIR-TWAP key\"},\"hasOracle(address,uint256)\":{\"notice\":\"Check if there is an oracle for the PAIR-TWAP key\"},\"nativeToken()\":{\"notice\":\"The native wrapped token (e.g. WETH, WAVAX, WMATIC, etc)\"},\"oracles(address,uint256)\":{\"notice\":\"Oracles'\"},\"pairFor(address,address)\":{\"notice\":\"Returns the pair's contract\"},\"quote(address,address,uint256)\":{\"notice\":\"Get quote\"},\"quote(address,address,uint256,uint256)\":{\"notice\":\"Get quote\"},\"quoteTokenToUsd(address,uint256)\":{\"notice\":\"Get quote in USD (or equivalent) amount\"},\"quoteTokenToUsd(address,uint256,uint256)\":{\"notice\":\"Get quote in USD (or equivalent) amount\"},\"quoteUsdToToken(address,uint256)\":{\"notice\":\"Get quote from USD (or equivalent) amount to amount of token\"},\"quoteUsdToToken(address,uint256,uint256)\":{\"notice\":\"Get quote from USD (or equivalent) amount to amount of token\"},\"updateAndQuote(address,address,uint256)\":{\"notice\":\"Get quote\"},\"updateAndQuote(address,address,uint256,uint256)\":{\"notice\":\"Get quote\"},\"updateDefaultTwapPeriod(uint256)\":{\"notice\":\"Update the default TWAP period\"},\"updateOrAdd(address,address)\":{\"notice\":\"Update cumulative and average price of pair\"},\"updateOrAdd(address,address,uint256)\":{\"notice\":\"Update cumulative and average price of pair\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/UniswapV2LikePriceProvider.sol\":\"UniswapV2LikePriceProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\",\"keccak256\":\"0xad37a774ad6a438432acb1a475b71b2991a41ba98f1cd814c6d78f9109370a38\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/lib/contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\nimport './Babylonian.sol';\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint private constant Q112 = uint(1) << RESOLUTION;\\n    uint private constant Q224 = Q112 << RESOLUTION;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\\n        return uq112x112(self._x / uint224(x));\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\\n        uint z;\\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, 'FixedPoint: ZERO_RECIPROCAL');\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\\n    }\\n}\\n\",\"keccak256\":\"0x589aacdc69a24cc0500bc13581b34d4431ee972333fa288a9b42a4d14707e003\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/lib/contracts/libraries/FixedPoint.sol';\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x993538630a9568290c39140d54c034a66cf1b95cdeef4ba804a948c4ee2fc311\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../core/AddressProvider.sol\\\";\\n\\n/**\\n * @notice Contract module which provides access control mechanism, where\\n * the governor account is granted with exclusive access to specific functions.\\n * @dev Uses the AddressProvider to get the governor\\n */\\nabstract contract Governable {\\n    IAddressProvider public constant addressProvider = IAddressProvider(0xfbA0816A81bcAbBf3829bED28618177a2bf0e82A);\\n\\n    /// @dev Throws if called by any account other than the governor.\\n    modifier onlyGovernor() {\\n        require(msg.sender == addressProvider.governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0aeb534826bb8e2428dd859d5cf5eb82664c4de97106a783d8fb92a2a7661e38\",\"license\":\"MIT\"},\"contracts/core/AddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/core/IAddressProvider.sol\\\";\\n\\ncontract AddressProvider is IAddressProvider, Initializable {\\n    /// @notice The governor account\\n    address public governor;\\n\\n    /// @notice The proposed governor account. Becomes the new governor after acceptance\\n    address public proposedGovernor;\\n\\n    /// @notice The PriceProvidersAggregator contract\\n    IPriceProvidersAggregator public override providersAggregator;\\n\\n    /// @notice The StableCoinProvider contract\\n    IStableCoinProvider public override stableCoinProvider;\\n\\n    /// @notice Emitted when providers aggregator is updated\\n    event ProvidersAggregatorUpdated(\\n        IPriceProvidersAggregator oldProvidersAggregator,\\n        IPriceProvidersAggregator newProvidersAggregator\\n    );\\n\\n    /// @notice Emitted when stable coin provider is updated\\n    event StableCoinProviderUpdated(\\n        IStableCoinProvider oldStableCoinProvider,\\n        IStableCoinProvider newStableCoinProvider\\n    );\\n\\n    /// @notice Emitted when governor is updated\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == msg.sender, \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    function initialize(address governor_) external initializer {\\n        governor = governor_;\\n        emit UpdatedGovernor(address(0), governor_);\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(msg.sender == proposedGovernor, \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @notice Update PriceProvidersAggregator contract\\n     */\\n    function updateProvidersAggregator(IPriceProvidersAggregator providersAggregator_) external onlyGovernor {\\n        require(address(providersAggregator_) != address(0), \\\"address-is-null\\\");\\n        emit ProvidersAggregatorUpdated(providersAggregator, providersAggregator_);\\n        providersAggregator = providersAggregator_;\\n    }\\n\\n    /**\\n     * @notice Update StableCoinProvider contract\\n     */\\n    function updateStableCoinProvider(IStableCoinProvider stableCoinProvider_) external onlyGovernor {\\n        emit StableCoinProviderUpdated(stableCoinProvider, stableCoinProvider_);\\n        stableCoinProvider = stableCoinProvider_;\\n    }\\n}\\n\",\"keccak256\":\"0x145bfcd3b2e957400f54636b517e54599fd918fd9e6e368a85e4362677e96ffa\",\"license\":\"MIT\"},\"contracts/core/PriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/core/IPriceProvider.sol\\\";\\n\\n/**\\n * @title Price providers' super class that implements common functions\\n */\\nabstract contract PriceProvider is IPriceProvider {\\n    uint256 public constant USD_DECIMALS = 18;\\n\\n    /// @inheritdoc IPriceProvider\\n    function getPriceInUsd(address token_) public view virtual returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /// @inheritdoc IPriceProvider\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view virtual override returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        (uint256 _amountInUsd, uint256 _lastUpdatedAt0) = quoteTokenToUsd(tokenIn_, amountIn_);\\n        (_amountOut, _lastUpdatedAt) = quoteUsdToToken(tokenOut_, _amountInUsd);\\n        _lastUpdatedAt = Math.min(_lastUpdatedAt0, _lastUpdatedAt);\\n    }\\n\\n    /// @inheritdoc IPriceProvider\\n    function quoteTokenToUsd(address token_, uint256 amountIn_)\\n        public\\n        view\\n        override\\n        returns (uint256 _amountOut, uint256 _lastUpdatedAt)\\n    {\\n        uint256 _price;\\n        (_price, _lastUpdatedAt) = getPriceInUsd(token_);\\n        _amountOut = (amountIn_ * _price) / 10**IERC20Metadata(token_).decimals();\\n    }\\n\\n    /// @inheritdoc IPriceProvider\\n    function quoteUsdToToken(address token_, uint256 amountIn_)\\n        public\\n        view\\n        override\\n        returns (uint256 _amountOut, uint256 _lastUpdatedAt)\\n    {\\n        uint256 _price;\\n        (_price, _lastUpdatedAt) = getPriceInUsd(token_);\\n        _amountOut = (amountIn_ * 10**IERC20Metadata(token_).decimals()) / _price;\\n    }\\n}\\n\",\"keccak256\":\"0xc112d7d1e62e5bb26449b294adfd2f5cee083a99b1ac7ab16cf6a4a34f33cfe5\",\"license\":\"MIT\"},\"contracts/core/UniswapV2LikePriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/FixedPoint.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\nimport \\\"../interfaces/core/IUniswapV2LikePriceProvider.sol\\\";\\nimport \\\"./PriceProvider.sol\\\";\\n\\n/**\\n * @title UniswapV2 (and forks) TWAP Oracle implementation\\n * Based on https://github.com/Uniswap/v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol\\n */\\ncontract UniswapV2LikePriceProvider is IUniswapV2LikePriceProvider, Governable, PriceProvider {\\n    using FixedPoint for *;\\n\\n    /**\\n     * @notice The UniswapV2-like factory's address\\n     */\\n    address public immutable factory;\\n\\n    /**\\n     * @notice The native wrapped token (e.g. WETH, WAVAX, WMATIC, etc)\\n     */\\n    address public immutable nativeToken;\\n\\n    /// @inheritdoc IUniswapV2LikePriceProvider\\n    uint256 public override defaultTwapPeriod;\\n\\n    struct Oracle {\\n        address token0;\\n        address token1;\\n        uint256 price0CumulativeLast;\\n        uint256 price1CumulativeLast;\\n        uint32 blockTimestampLast;\\n        FixedPoint.uq112x112 price0Average;\\n        FixedPoint.uq112x112 price1Average;\\n    }\\n\\n    /**\\n     * @notice Oracles'\\n     * @dev pair => twapPeriod => oracle\\n     */\\n    mapping(IUniswapV2Pair => mapping(uint256 => Oracle)) public oracles;\\n\\n    /// @notice Emitted when default TWAP period is updated\\n    event DefaultTwapPeriodUpdated(uint256 oldTwapPeriod, uint256 newTwapPeriod);\\n\\n    constructor(\\n        address factory_,\\n        uint256 defaultTwapPeriod_,\\n        address nativeToken_\\n    ) {\\n        require(factory_ != address(0), \\\"factory-is-null\\\");\\n        defaultTwapPeriod = defaultTwapPeriod_;\\n        factory = factory_;\\n        nativeToken = nativeToken_;\\n    }\\n\\n    /// @inheritdoc IUniswapV2LikePriceProvider\\n    function hasOracle(IUniswapV2Pair pair_) external view override returns (bool) {\\n        return hasOracle(pair_, defaultTwapPeriod);\\n    }\\n\\n    /// @inheritdoc IUniswapV2LikePriceProvider\\n    function hasOracle(IUniswapV2Pair pair_, uint256 twapPeriod_) public view override returns (bool) {\\n        return oracles[pair_][twapPeriod_].blockTimestampLast > 0;\\n    }\\n\\n    /// @inheritdoc IUniswapV2LikePriceProvider\\n    function pairFor(address token0_, address token1_) public view override returns (IUniswapV2Pair _pair) {\\n        _pair = IUniswapV2Pair(IUniswapV2Factory(factory).getPair(token0_, token1_));\\n    }\\n\\n    /// @inheritdoc IPriceProvider\\n    function getPriceInUsd(address token_)\\n        public\\n        view\\n        override(IPriceProvider, PriceProvider)\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt)\\n    {\\n        return getPriceInUsd(token_, defaultTwapPeriod);\\n    }\\n\\n    /// @inheritdoc IUniswapV2LikePriceProvider\\n    function getPriceInUsd(address token_, uint256 twapPeriod_)\\n        public\\n        view\\n        override\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt)\\n    {\\n        IStableCoinProvider _stableCoinProvider = addressProvider.stableCoinProvider();\\n        require(address(_stableCoinProvider) != address(0), \\\"stable-coin-not-supported\\\");\\n\\n        uint256 _stableCoinAmount;\\n        (_stableCoinAmount, _lastUpdatedAt) = quote(\\n            token_,\\n            _stableCoinProvider.getStableCoinIfPegged(),\\n            twapPeriod_,\\n            10**IERC20Metadata(token_).decimals() // ONE\\n        );\\n        _priceInUsd = _stableCoinProvider.toUsdRepresentation(_stableCoinAmount);\\n    }\\n\\n    /// @inheritdoc IPriceProvider\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view override(IPriceProvider, PriceProvider) returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        return quote(tokenIn_, tokenOut_, defaultTwapPeriod, amountIn_);\\n    }\\n\\n    /// @inheritdoc IUniswapV2LikePriceProvider\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 twapPeriod_,\\n        uint256 amountIn_\\n    ) public view override returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        if (tokenIn_ == tokenOut_) {\\n            return (amountIn_, block.timestamp);\\n        }\\n\\n        if (hasOracle(pairFor(tokenIn_, tokenOut_), twapPeriod_)) {\\n            (_amountOut, _lastUpdatedAt) = _getAmountOut(tokenIn_, tokenOut_, twapPeriod_, amountIn_);\\n        } else {\\n            (_amountOut, _lastUpdatedAt) = _getAmountOut(tokenIn_, nativeToken, twapPeriod_, amountIn_);\\n            uint256 __lastUpdatedAt;\\n            (_amountOut, __lastUpdatedAt) = _getAmountOut(nativeToken, tokenOut_, twapPeriod_, _amountOut);\\n            _lastUpdatedAt = Math.min(__lastUpdatedAt, _lastUpdatedAt);\\n        }\\n    }\\n\\n    /// @inheritdoc IUniswapV2LikePriceProvider\\n    function quoteTokenToUsd(\\n        address token_,\\n        uint256 amountIn_,\\n        uint256 twapPeriod_\\n    ) public view override returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        uint256 _price;\\n        (_price, _lastUpdatedAt) = getPriceInUsd(token_, twapPeriod_);\\n        _amountOut = (amountIn_ * _price) / 10**IERC20Metadata(token_).decimals();\\n    }\\n\\n    /// @inheritdoc IUniswapV2LikePriceProvider\\n    function quoteUsdToToken(\\n        address token_,\\n        uint256 amountIn_,\\n        uint256 twapPeriod_\\n    ) public view override returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        uint256 _price;\\n        (_price, _lastUpdatedAt) = getPriceInUsd(token_, twapPeriod_);\\n        _amountOut = (amountIn_ * 10**IERC20Metadata(token_).decimals()) / _price;\\n    }\\n\\n    /// @inheritdoc IUniswapV2LikePriceProvider\\n    function updateAndQuote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external override returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        return updateAndQuote(tokenIn_, tokenOut_, defaultTwapPeriod, amountIn_);\\n    }\\n\\n    /// @inheritdoc IUniswapV2LikePriceProvider\\n    function updateAndQuote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 twapPeriod_,\\n        uint256 amountIn_\\n    ) public override returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        updateOrAdd(tokenIn_, tokenOut_, twapPeriod_);\\n        return quote(tokenIn_, tokenOut_, twapPeriod_, amountIn_);\\n    }\\n\\n    /// @inheritdoc IUniswapV2LikePriceProvider\\n    function updateOrAdd(address tokenIn_, address tokenOut_) external override {\\n        updateOrAdd(tokenIn_, tokenOut_, defaultTwapPeriod);\\n    }\\n\\n    /// @inheritdoc IUniswapV2LikePriceProvider\\n    function updateOrAdd(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 twapPeriod_\\n    ) public override {\\n        IUniswapV2Pair _pair = pairFor(tokenIn_, tokenOut_);\\n        if (!hasOracle(_pair, twapPeriod_)) {\\n            _addOracleFor(_pair, twapPeriod_);\\n        }\\n        _updateIfNeeded(_pair, twapPeriod_);\\n    }\\n\\n    /**\\n     * @notice Create new oracle\\n     * @param pair_ The pair to get prices from\\n     * @param twapPeriod_ The TWAP period\\n     */\\n    function _addOracleFor(IUniswapV2Pair pair_, uint256 twapPeriod_) private {\\n        require(address(pair_) != address(0), \\\"invalid-pair\\\");\\n\\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = pair_.getReserves();\\n\\n        require(_reserve0 != 0 && _reserve1 != 0, \\\"no-reserves\\\");\\n\\n        oracles[pair_][twapPeriod_] = Oracle({\\n            token0: pair_.token0(),\\n            token1: pair_.token1(),\\n            price0CumulativeLast: pair_.price0CumulativeLast(),\\n            price1CumulativeLast: pair_.price1CumulativeLast(),\\n            blockTimestampLast: _blockTimestampLast,\\n            price0Average: uint112(0).encode(),\\n            price1Average: uint112(0).encode()\\n        });\\n    }\\n\\n    /**\\n     * @notice Get the output amount for a given oracle\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param twapPeriod_ The TWAP period\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function _getAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 twapPeriod_,\\n        uint256 amountIn_\\n    ) private view returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        Oracle memory _oracle = oracles[pairFor(tokenIn_, tokenOut_)][twapPeriod_];\\n        if (tokenIn_ == _oracle.token0) {\\n            _amountOut = _oracle.price0Average.mul(amountIn_).decode144();\\n        } else {\\n            _amountOut = _oracle.price1Average.mul(amountIn_).decode144();\\n        }\\n        _lastUpdatedAt = _oracle.blockTimestampLast;\\n    }\\n\\n    /**\\n     * @notice Update an oracle\\n     * @param pair_ The pair to update\\n     * @param twapPeriod_ The TWAP period\\n     * @return True if updated was performed\\n     */\\n    function _updateIfNeeded(IUniswapV2Pair pair_, uint256 twapPeriod_) private returns (bool) {\\n        Oracle storage _oracle = oracles[pair_][twapPeriod_];\\n\\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary\\n            .currentCumulativePrices(address(pair_));\\n        uint32 timeElapsed;\\n        unchecked {\\n            timeElapsed = blockTimestamp - _oracle.blockTimestampLast; // overflow is desired\\n        }\\n        // ensure that at least one full period has passed since the last update\\n        if (timeElapsed < twapPeriod_) return false;\\n\\n        uint256 price0new;\\n        uint256 price1new;\\n\\n        unchecked {\\n            price0new = price0Cumulative - _oracle.price0CumulativeLast;\\n            price1new = price1Cumulative - _oracle.price1CumulativeLast;\\n        }\\n\\n        // overflow is desired, casting never truncates\\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n        _oracle.price0Average = FixedPoint.uq112x112(uint224(price0new / timeElapsed));\\n        _oracle.price1Average = FixedPoint.uq112x112(uint224(price1new / timeElapsed));\\n        _oracle.price0CumulativeLast = price0Cumulative;\\n        _oracle.price1CumulativeLast = price1Cumulative;\\n        _oracle.blockTimestampLast = blockTimestamp;\\n        return true;\\n    }\\n\\n    /// @inheritdoc IUniswapV2LikePriceProvider\\n    function updateDefaultTwapPeriod(uint256 newDefaultTwapPeriod_) external override onlyGovernor {\\n        emit DefaultTwapPeriodUpdated(defaultTwapPeriod, newDefaultTwapPeriod_);\\n        defaultTwapPeriod = newDefaultTwapPeriod_;\\n    }\\n}\\n\",\"keccak256\":\"0xfff37b41c56bc1cc9a100b5a6be019738343de340291c0f0430399b4dc8f445d\",\"license\":\"MIT\"},\"contracts/interfaces/core/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStableCoinProvider.sol\\\";\\nimport \\\"./IPriceProvidersAggregator.sol\\\";\\n\\ninterface IAddressProvider {\\n    function governor() external view returns (address);\\n\\n    function providersAggregator() external view returns (IPriceProvidersAggregator);\\n\\n    function stableCoinProvider() external view returns (IStableCoinProvider);\\n}\\n\",\"keccak256\":\"0xa17f9e29e3de520c35faa21ddeb139fe73b3663c1ebf83f17b2c0aa00c297cf8\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n}\\n\",\"keccak256\":\"0x05e6cf557c19e2f9e439b483ed67e85713c0045dced6133f530003382e9b72d1\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvidersAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"./IPriceProvider.sol\\\";\\n\\n/**\\n * @notice PriceProvidersAggregator interface\\n * @dev Worth noting that the `_lastUpdatedAt` logic depends on the underlying price provider. In summary:\\n * ChainLink: returns the last updated date from the aggregator\\n * UniswapV2: returns the date of the latest pair oracle update\\n * UniswapV3: assumes that the price is always updated (returns block.timestamp)\\n * Flux: returns the last updated date from the aggregator\\n * Umbrella (FCD): returns the last updated date returned from their oracle contract\\n * Umbrella (Passport): returns the date of the latest pallet submission\\n * Anytime that a quote performs more than one query, it uses the oldest date as the `_lastUpdatedAt`.\\n * See more: https://github.com/bloqpriv/one-oracle/issues/64\\n */\\ninterface IPriceProvidersAggregator {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        external\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Provider Providers' mapping\\n     */\\n    function priceProviders(DataTypes.Provider provider_) external view returns (IPriceProvider _priceProvider);\\n\\n    /**\\n     * @notice Get quote\\n     * @param provider_ The price provider to get quote from\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @dev If providers aren't the same, uses native token as \\\"bridge\\\"\\n     * @param providerIn_ The price provider to get quote for the tokenIn\\n     * @param tokenIn_ The address of assetIn\\n     * @param providerOut_ The price provider to get quote for the tokenOut\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        DataTypes.Provider providerIn_,\\n        address tokenIn_,\\n        DataTypes.Provider providerOut_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Set a price provider\\n     * @dev Administrative function\\n     * @param provider_ The provider (from enum)\\n     * @param priceProvider_ The price provider contract\\n     */\\n    function setPriceProvider(DataTypes.Provider provider_, IPriceProvider priceProvider_) external;\\n}\\n\",\"keccak256\":\"0xf1708572db9b1b429856b6f5fc22e5c9a6e98047559f1d29ba854621bf155dc9\",\"license\":\"MIT\"},\"contracts/interfaces/core/IStableCoinProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStableCoinProvider {\\n    /**\\n     * @notice Return the stable coin if pegged\\n     * @dev Check price relation between both stable coins and revert if peg is too loose\\n     * @return _stableCoin The primary stable coin if pass all checks\\n     */\\n    function getStableCoinIfPegged() external view returns (address _stableCoin);\\n\\n    /**\\n     * @notice Convert given amount of stable coin to USD representation (18 decimals)\\n     */\\n    function toUsdRepresentation(uint256 stableCoinAmount_) external view returns (uint256 _usdAmount);\\n}\\n\",\"keccak256\":\"0x57121c0faef63ea2d06b05048054ffa78d4d3c5734c2dabc1aaa4c5032e194c5\",\"license\":\"MIT\"},\"contracts/interfaces/core/IUniswapV2LikePriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./IPriceProvider.sol\\\";\\n\\ninterface IUniswapV2LikePriceProvider is IPriceProvider {\\n    /**\\n     * @notice The default time-weighted average price (TWAP) period\\n     * Used when a period isn't specified\\n     * @dev See more: https://docs.uniswap.org/protocol/concepts/V3-overview/oracle\\n     */\\n    function defaultTwapPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Check if there is an oracle for the PAIR-TWAP key\\n     * @param pair_ The pair\\n     * @param twapPeriod_ The TWAP period\\n     * @return True if exists\\n     */\\n    function hasOracle(IUniswapV2Pair pair_, uint256 twapPeriod_) external view returns (bool);\\n\\n    /**\\n     * @notice Check if there is an oracle for the PAIR-TWAP key\\n     * @dev Uses `defaultTwapPeriod`\\n     * @param pair_ The pair\\n     * @return True if exists\\n     */\\n    function hasOracle(IUniswapV2Pair pair_) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the pair's contract\\n     */\\n    function pairFor(address token0_, address token1_) external view returns (IUniswapV2Pair _pair);\\n\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of assetIn\\n     * @param twapPeriod_ The TWAP period\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(address token_, uint256 twapPeriod_)\\n        external\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param twapPeriod_ The TWAP period\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 twapPeriod_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @param twapPeriod_ The TWAP period\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(\\n        address token_,\\n        uint256 amountIn_,\\n        uint256 twapPeriod_\\n    ) external view returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Input amount in USD\\n     * @param twapPeriod_ The TWAP period\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(\\n        address token_,\\n        uint256 amountIn_,\\n        uint256 twapPeriod_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @dev Will update the oracle if needed before getting quote\\n     * @dev Uses `defaultTwapPeriod`\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function updateAndQuote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @dev Will update the oracle if needed before getting quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param twapPeriod_ The TWAP period\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function updateAndQuote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 twapPeriod_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Update the default TWAP period\\n     * @dev Administrative function\\n     * @param newDefaultTwapPeriod_ The new default period\\n     */\\n    function updateDefaultTwapPeriod(uint256 newDefaultTwapPeriod_) external;\\n\\n    /**\\n     * @notice Update cumulative and average price of pair\\n     * @dev Will create the pair if it doesn't exist\\n     * @dev Uses `defaultTwapPeriod`\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     */\\n    function updateOrAdd(address tokenIn_, address tokenOut_) external;\\n\\n    /**\\n     * @notice Update cumulative and average price of pair\\n     * @dev Will create the pair if it doesn't exist\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param twapPeriod_ The TWAP period\\n     */\\n    function updateOrAdd(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 twapPeriod_\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd0933edecafd3c57282ce761af55c5e48753fd1a7779496fdf9114894751244a\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary DataTypes {\\n    /**\\n     * @notice Price providers enumeration\\n     */\\n    enum Provider {\\n        NONE,\\n        CHAINLINK,\\n        UNISWAP_V3,\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UMBRELLA_FIRST_CLASS,\\n        UMBRELLA_PASSPORT,\\n        FLUX\\n    }\\n\\n    enum ExchangeType {\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UNISWAP_V3\\n    }\\n\\n    enum SwapType {\\n        EXACT_INPUT,\\n        EXACT_OUTPUT\\n    }\\n}\\n\",\"keccak256\":\"0xfafdbf0aa3657f082acf0fba2742fddd38552382646a14193a78782f731dc393\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001eb238038062001eb28339810160408190526200003491620000bc565b6001600160a01b038316620000815760405162461bcd60e51b815260206004820152600f60248201526e199858dd1bdc9e4b5a5ccb5b9d5b1b608a1b604482015260640160405180910390fd5b6000919091556001600160a01b039182166080521660a052620000fd565b80516001600160a01b0381168114620000b757600080fd5b919050565b600080600060608486031215620000d257600080fd5b620000dd846200009f565b925060208401519150620000f4604085016200009f565b90509250925092565b60805160a051611d7a62000138600039600081816104690152818161079001526107c201526000818161042f01526109140152611d7a6000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806372499689116100d8578063a00a8b2c1161008c578063c45a015511610066578063c45a01551461042a578063d0578a0114610451578063e1758bd81461046457600080fd5b8063a00a8b2c146102fc578063b5e9bef514610404578063b64663841461041757600080fd5b80638d0dba00116100bd5780638d0dba00146102c357806396ed28f9146102d65780639f15ec9d146102e957600080fd5b806372499689146102a757806384e0b233146102ba57600080fd5b80632954018c1161013a57806341118ef41161011457806341118ef41461026e5780634ad1a30e14610281578063520b93551461029457600080fd5b80632954018c146102125780632f6ee695146102455780633c4144531461025b57600080fd5b80631676a0bf1161016b5780631676a0bf146101c9578063180c9309146101ec578063197dd8c0146101ff57600080fd5b806307ee40bf146101875780631648b846146101b4575b600080fd5b61019a610195366004611911565b61048b565b604080519283526020830191909152015b60405180910390f35b6101c76101c236600461192e565b6104a3565b005b6101dc6101d7366004611947565b6105ce565b60405190151581526020016101ab565b6101dc6101fa366004611911565b610604565b6101c761020d366004611973565b610612565b61022d73fba0816a81bcabbf3829bed28618177a2bf0e82a81565b6040516001600160a01b0390911681526020016101ab565b61024d601281565b6040519081526020016101ab565b61019a6102693660046119b4565b610649565b6101c761027c3660046119e9565b6106fc565b61019a61028f366004611a22565b61070d565b61019a6102a2366004611a22565b610735565b61019a6102b5366004611973565b610804565b61024d60005481565b61019a6102d1366004611947565b610821565b61022d6102e43660046119e9565b6108d1565b61019a6102f73660046119b4565b610997565b61039a61030a366004611947565b60016020818152600093845260408085208252928452928290208054918101546002820154600383015460048401548651808901885260058601547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811682528851998a0190985260069095015490961687526001600160a01b0394851696929094169490939263ffffffff9091169187565b604080516001600160a01b03988916815297909616602088015294860193909352606085019190915263ffffffff166080840152517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811660a084015290511660c082015260e0016101ab565b61019a610412366004611947565b610a34565b61019a610425366004611973565b610ad1565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b61019a61045f366004611947565b610ae2565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b60008061049a83600054610ae2565b91509150915091565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f057600080fd5b505afa158015610504573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105289190611a68565b6001600160a01b0316336001600160a01b03161461058d5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60005460408051918252602082018390527fb2d6c0b99b0405017e8d7385ed0ec304b6c63fcd04917f2fb5e6c88c75ad947a910160405180910390a1600055565b6001600160a01b038216600090815260016020908152604080832084845290915290206004015463ffffffff1615155b92915050565b60006105fe826000546105ce565b600061061e84846108d1565b905061062a81836105ce565b610638576106388183610d5a565b61064281836111fe565b5050505050565b60008060006106588685610ae2565b809350819250505080866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561069a57600080fd5b505afa1580156106ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d29190611a85565b6106dd90600a611bbb565b6106e79087611bca565b6106f19190611c18565b925050935093915050565b6107098282600054610612565b5050565b60008061071b868686610612565b61072786868686610735565b915091505b94509492505050565b600080846001600160a01b0316866001600160a01b0316141561075c57508190504261072c565b61076f61076987876108d1565b856105ce565b1561078a576107808686868661139e565b909250905061072c565b6107b6867f0000000000000000000000000000000000000000000000000000000000000000868661139e565b909250905060006107e97f000000000000000000000000000000000000000000000000000000000000000087878661139e565b90935090506107f881836114ec565b91505094509492505050565b60008061081585856000548661070d565b91509150935093915050565b600080600061082f8561048b565b8093508192505050846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561087057600080fd5b505afa158015610884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a89190611a85565b6108b390600a611bbb565b6108bd8286611bca565b6108c79190611c18565b9250509250929050565b6040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015282811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a439059060440160206040518083038186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109909190611a68565b9392505050565b60008060006109a68685610ae2565b8093508192505050856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e757600080fd5b505afa1580156109fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f9190611a85565b610a2a90600a611bbb565b6106e78287611bca565b6000806000610a428561048b565b809350819250505080856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a8457600080fd5b505afa158015610a98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abc9190611a85565b610ac790600a611bbb565b6108bd9086611bca565b600080610815858560005486610735565b600080600073fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316632082615f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b3457600080fd5b505afa158015610b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6c9190611a68565b90506001600160a01b038116610bc45760405162461bcd60e51b815260206004820152601960248201527f737461626c652d636f696e2d6e6f742d737570706f72746564000000000000006044820152606401610584565b6000610cb886836001600160a01b03166384537f0e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0357600080fd5b505afa158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b9190611a68565b87896001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7557600080fd5b505afa158015610c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cad9190611a85565b6102a290600a611bbb565b6040517fba55f5c1000000000000000000000000000000000000000000000000000000008152600481018390529094509091506001600160a01b0383169063ba55f5c19060240160206040518083038186803b158015610d1757600080fd5b505afa158015610d2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4f9190611c2c565b935050509250929050565b6001600160a01b038216610db05760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642d7061697200000000000000000000000000000000000000006044820152606401610584565b6000806000846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610dee57600080fd5b505afa158015610e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e269190611c68565b925092509250826dffffffffffffffffffffffffffff16600014158015610e5c57506dffffffffffffffffffffffffffff821615155b610ea85760405162461bcd60e51b815260206004820152600b60248201527f6e6f2d72657365727665730000000000000000000000000000000000000000006044820152606401610584565b6040518060e00160405280866001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610eec57600080fd5b505afa158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f249190611a68565b6001600160a01b03168152602001866001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6b57600080fd5b505afa158015610f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa39190611a68565b6001600160a01b03168152602001866001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b158015610fea57600080fd5b505afa158015610ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110229190611c2c565b8152602001866001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b15801561106057600080fd5b505afa158015611074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110989190611c2c565b815263ffffffff928316602080830191909152604080518083018252600090819052815180840183528181528285015281518084018352819052815180840183528181526060948501526001600160a01b03998a1681526001808452828220998252988352819020845181547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116918c169190911782559285015198810180549093169890991697909717905594810151600287015593840151600386015560808401516004860180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001691909216179055505060a0810151516005830180547fffffffff000000000000000000000000000000000000000000000000000000009081167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff9384161790915560c09092015151600690930180549092169216919091179055565b6001600160a01b0382166000908152600160209081526040808320848452909152812081808061122d87611502565b6004870154929550909350915063ffffffff908116820390811687111561125c576000955050505050506105fe565b60028501546003860154604080516020810190915291860391908503908061128a63ffffffff861685611c18565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811690915290516005890180547fffffffff0000000000000000000000000000000000000000000000000000000016919092161790556040805160208101909152806112fa63ffffffff861684611c18565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811690915290516006890180547fffffffff00000000000000000000000000000000000000000000000000000000169190921617905550505060028401929092556003830155600490910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff90921691909117905550600192915050565b6000806000600160006113b189896108d1565b6001600160a01b039081168252602080830193909352604091820160009081208982528452829020825160e081018452815483168152600182015483168186015260028201548185015260038201546060820152600482015463ffffffff1660808201528351808601855260058301547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff908116825260a08301919091528451958601909452600690910154909216835260c08201929092528051909250888216911614156114ab5760a081015161149090611489908661172c565b5160701c90565b71ffffffffffffffffffffffffffffffffffff1692506114d5565b60c08101516114be90611489908661172c565b71ffffffffffffffffffffffffffffffffffff1692505b806080015163ffffffff1691505094509492505050565b60008183106114fb5781610990565b5090919050565b600080600061150f611805565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561154a57600080fd5b505afa15801561155e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115829190611c2c565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b1580156115bd57600080fd5b505afa1580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f59190611c2c565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561163557600080fd5b505afa158015611649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166d9190611c68565b9250925092508363ffffffff168163ffffffff16146117225760006116928286611cb8565b90508063ffffffff166116a5848661181b565b516116ce91907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611bca565b6116d89088611cdd565b96508063ffffffff166116eb858561181b565b5161171491907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611bca565b61171e9087611cdd565b9550505b5050509193909250565b604080516020810190915260008152600082158061177e575083517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16836117708183611bca565b925061177c9083611c18565b145b6117f05760405162461bcd60e51b815260206004820152602360248201527f4669786564506f696e743a204d554c5449504c49434154494f4e5f4f5645524660448201527f4c4f5700000000000000000000000000000000000000000000000000000000006064820152608401610584565b60408051602081019091529081529392505050565b600061181664010000000042611cf5565b905090565b6040805160208101909152600081526000826dffffffffffffffffffffffffffff161161188a5760405162461bcd60e51b815260206004820152601760248201527f4669786564506f696e743a204449565f42595f5a45524f0000000000000000006044820152606401610584565b6040805160208101909152806118d26dffffffffffffffffffffffffffff85167bffffffffffffffffffffffffffff0000000000000000000000000000607088901b16611d09565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690529392505050565b6001600160a01b038116811461190e57600080fd5b50565b60006020828403121561192357600080fd5b8135610990816118f9565b60006020828403121561194057600080fd5b5035919050565b6000806040838503121561195a57600080fd5b8235611965816118f9565b946020939093013593505050565b60008060006060848603121561198857600080fd5b8335611993816118f9565b925060208401356119a3816118f9565b929592945050506040919091013590565b6000806000606084860312156119c957600080fd5b83356119d4816118f9565b95602085013595506040909401359392505050565b600080604083850312156119fc57600080fd5b8235611a07816118f9565b91506020830135611a17816118f9565b809150509250929050565b60008060008060808587031215611a3857600080fd5b8435611a43816118f9565b93506020850135611a53816118f9565b93969395505050506040820135916060013590565b600060208284031215611a7a57600080fd5b8151610990816118f9565b600060208284031215611a9757600080fd5b815160ff8116811461099057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b80851115611b12578160001904821115611af857611af8611aa8565b80851615611b0557918102915b93841c9390800290611adc565b509250929050565b600082611b29575060016105fe565b81611b36575060006105fe565b8160018114611b4c5760028114611b5657611b72565b60019150506105fe565b60ff841115611b6757611b67611aa8565b50506001821b6105fe565b5060208310610133831016604e8410600b8410161715611b95575081810a6105fe565b611b9f8383611ad7565b8060001904821115611bb357611bb3611aa8565b029392505050565b600061099060ff841683611b1a565b6000816000190483118215151615611be457611be4611aa8565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611c2757611c27611be9565b500490565b600060208284031215611c3e57600080fd5b5051919050565b80516dffffffffffffffffffffffffffff81168114611c6357600080fd5b919050565b600080600060608486031215611c7d57600080fd5b611c8684611c45565b9250611c9460208501611c45565b9150604084015163ffffffff81168114611cad57600080fd5b809150509250925092565b600063ffffffff83811690831681811015611cd557611cd5611aa8565b039392505050565b60008219821115611cf057611cf0611aa8565b500190565b600082611d0457611d04611be9565b500690565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80841680611d3857611d38611be9565b9216919091049291505056fea2646970667358221220d66c014ce4e8ed566ac54e0539fb0a461679755ffbec4558d2d572f389efeb0d64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c806372499689116100d8578063a00a8b2c1161008c578063c45a015511610066578063c45a01551461042a578063d0578a0114610451578063e1758bd81461046457600080fd5b8063a00a8b2c146102fc578063b5e9bef514610404578063b64663841461041757600080fd5b80638d0dba00116100bd5780638d0dba00146102c357806396ed28f9146102d65780639f15ec9d146102e957600080fd5b806372499689146102a757806384e0b233146102ba57600080fd5b80632954018c1161013a57806341118ef41161011457806341118ef41461026e5780634ad1a30e14610281578063520b93551461029457600080fd5b80632954018c146102125780632f6ee695146102455780633c4144531461025b57600080fd5b80631676a0bf1161016b5780631676a0bf146101c9578063180c9309146101ec578063197dd8c0146101ff57600080fd5b806307ee40bf146101875780631648b846146101b4575b600080fd5b61019a610195366004611911565b61048b565b604080519283526020830191909152015b60405180910390f35b6101c76101c236600461192e565b6104a3565b005b6101dc6101d7366004611947565b6105ce565b60405190151581526020016101ab565b6101dc6101fa366004611911565b610604565b6101c761020d366004611973565b610612565b61022d73fba0816a81bcabbf3829bed28618177a2bf0e82a81565b6040516001600160a01b0390911681526020016101ab565b61024d601281565b6040519081526020016101ab565b61019a6102693660046119b4565b610649565b6101c761027c3660046119e9565b6106fc565b61019a61028f366004611a22565b61070d565b61019a6102a2366004611a22565b610735565b61019a6102b5366004611973565b610804565b61024d60005481565b61019a6102d1366004611947565b610821565b61022d6102e43660046119e9565b6108d1565b61019a6102f73660046119b4565b610997565b61039a61030a366004611947565b60016020818152600093845260408085208252928452928290208054918101546002820154600383015460048401548651808901885260058601547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811682528851998a0190985260069095015490961687526001600160a01b0394851696929094169490939263ffffffff9091169187565b604080516001600160a01b03988916815297909616602088015294860193909352606085019190915263ffffffff166080840152517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811660a084015290511660c082015260e0016101ab565b61019a610412366004611947565b610a34565b61019a610425366004611973565b610ad1565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b61019a61045f366004611947565b610ae2565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b60008061049a83600054610ae2565b91509150915091565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f057600080fd5b505afa158015610504573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105289190611a68565b6001600160a01b0316336001600160a01b03161461058d5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60005460408051918252602082018390527fb2d6c0b99b0405017e8d7385ed0ec304b6c63fcd04917f2fb5e6c88c75ad947a910160405180910390a1600055565b6001600160a01b038216600090815260016020908152604080832084845290915290206004015463ffffffff1615155b92915050565b60006105fe826000546105ce565b600061061e84846108d1565b905061062a81836105ce565b610638576106388183610d5a565b61064281836111fe565b5050505050565b60008060006106588685610ae2565b809350819250505080866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561069a57600080fd5b505afa1580156106ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d29190611a85565b6106dd90600a611bbb565b6106e79087611bca565b6106f19190611c18565b925050935093915050565b6107098282600054610612565b5050565b60008061071b868686610612565b61072786868686610735565b915091505b94509492505050565b600080846001600160a01b0316866001600160a01b0316141561075c57508190504261072c565b61076f61076987876108d1565b856105ce565b1561078a576107808686868661139e565b909250905061072c565b6107b6867f0000000000000000000000000000000000000000000000000000000000000000868661139e565b909250905060006107e97f000000000000000000000000000000000000000000000000000000000000000087878661139e565b90935090506107f881836114ec565b91505094509492505050565b60008061081585856000548661070d565b91509150935093915050565b600080600061082f8561048b565b8093508192505050846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561087057600080fd5b505afa158015610884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a89190611a85565b6108b390600a611bbb565b6108bd8286611bca565b6108c79190611c18565b9250509250929050565b6040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015282811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a439059060440160206040518083038186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109909190611a68565b9392505050565b60008060006109a68685610ae2565b8093508192505050856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e757600080fd5b505afa1580156109fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f9190611a85565b610a2a90600a611bbb565b6106e78287611bca565b6000806000610a428561048b565b809350819250505080856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a8457600080fd5b505afa158015610a98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abc9190611a85565b610ac790600a611bbb565b6108bd9086611bca565b600080610815858560005486610735565b600080600073fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316632082615f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b3457600080fd5b505afa158015610b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6c9190611a68565b90506001600160a01b038116610bc45760405162461bcd60e51b815260206004820152601960248201527f737461626c652d636f696e2d6e6f742d737570706f72746564000000000000006044820152606401610584565b6000610cb886836001600160a01b03166384537f0e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0357600080fd5b505afa158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b9190611a68565b87896001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7557600080fd5b505afa158015610c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cad9190611a85565b6102a290600a611bbb565b6040517fba55f5c1000000000000000000000000000000000000000000000000000000008152600481018390529094509091506001600160a01b0383169063ba55f5c19060240160206040518083038186803b158015610d1757600080fd5b505afa158015610d2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4f9190611c2c565b935050509250929050565b6001600160a01b038216610db05760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642d7061697200000000000000000000000000000000000000006044820152606401610584565b6000806000846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610dee57600080fd5b505afa158015610e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e269190611c68565b925092509250826dffffffffffffffffffffffffffff16600014158015610e5c57506dffffffffffffffffffffffffffff821615155b610ea85760405162461bcd60e51b815260206004820152600b60248201527f6e6f2d72657365727665730000000000000000000000000000000000000000006044820152606401610584565b6040518060e00160405280866001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610eec57600080fd5b505afa158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f249190611a68565b6001600160a01b03168152602001866001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6b57600080fd5b505afa158015610f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa39190611a68565b6001600160a01b03168152602001866001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b158015610fea57600080fd5b505afa158015610ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110229190611c2c565b8152602001866001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b15801561106057600080fd5b505afa158015611074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110989190611c2c565b815263ffffffff928316602080830191909152604080518083018252600090819052815180840183528181528285015281518084018352819052815180840183528181526060948501526001600160a01b03998a1681526001808452828220998252988352819020845181547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116918c169190911782559285015198810180549093169890991697909717905594810151600287015593840151600386015560808401516004860180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001691909216179055505060a0810151516005830180547fffffffff000000000000000000000000000000000000000000000000000000009081167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff9384161790915560c09092015151600690930180549092169216919091179055565b6001600160a01b0382166000908152600160209081526040808320848452909152812081808061122d87611502565b6004870154929550909350915063ffffffff908116820390811687111561125c576000955050505050506105fe565b60028501546003860154604080516020810190915291860391908503908061128a63ffffffff861685611c18565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811690915290516005890180547fffffffff0000000000000000000000000000000000000000000000000000000016919092161790556040805160208101909152806112fa63ffffffff861684611c18565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811690915290516006890180547fffffffff00000000000000000000000000000000000000000000000000000000169190921617905550505060028401929092556003830155600490910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff90921691909117905550600192915050565b6000806000600160006113b189896108d1565b6001600160a01b039081168252602080830193909352604091820160009081208982528452829020825160e081018452815483168152600182015483168186015260028201548185015260038201546060820152600482015463ffffffff1660808201528351808601855260058301547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff908116825260a08301919091528451958601909452600690910154909216835260c08201929092528051909250888216911614156114ab5760a081015161149090611489908661172c565b5160701c90565b71ffffffffffffffffffffffffffffffffffff1692506114d5565b60c08101516114be90611489908661172c565b71ffffffffffffffffffffffffffffffffffff1692505b806080015163ffffffff1691505094509492505050565b60008183106114fb5781610990565b5090919050565b600080600061150f611805565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561154a57600080fd5b505afa15801561155e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115829190611c2c565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b1580156115bd57600080fd5b505afa1580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f59190611c2c565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561163557600080fd5b505afa158015611649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166d9190611c68565b9250925092508363ffffffff168163ffffffff16146117225760006116928286611cb8565b90508063ffffffff166116a5848661181b565b516116ce91907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611bca565b6116d89088611cdd565b96508063ffffffff166116eb858561181b565b5161171491907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611bca565b61171e9087611cdd565b9550505b5050509193909250565b604080516020810190915260008152600082158061177e575083517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16836117708183611bca565b925061177c9083611c18565b145b6117f05760405162461bcd60e51b815260206004820152602360248201527f4669786564506f696e743a204d554c5449504c49434154494f4e5f4f5645524660448201527f4c4f5700000000000000000000000000000000000000000000000000000000006064820152608401610584565b60408051602081019091529081529392505050565b600061181664010000000042611cf5565b905090565b6040805160208101909152600081526000826dffffffffffffffffffffffffffff161161188a5760405162461bcd60e51b815260206004820152601760248201527f4669786564506f696e743a204449565f42595f5a45524f0000000000000000006044820152606401610584565b6040805160208101909152806118d26dffffffffffffffffffffffffffff85167bffffffffffffffffffffffffffff0000000000000000000000000000607088901b16611d09565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690529392505050565b6001600160a01b038116811461190e57600080fd5b50565b60006020828403121561192357600080fd5b8135610990816118f9565b60006020828403121561194057600080fd5b5035919050565b6000806040838503121561195a57600080fd5b8235611965816118f9565b946020939093013593505050565b60008060006060848603121561198857600080fd5b8335611993816118f9565b925060208401356119a3816118f9565b929592945050506040919091013590565b6000806000606084860312156119c957600080fd5b83356119d4816118f9565b95602085013595506040909401359392505050565b600080604083850312156119fc57600080fd5b8235611a07816118f9565b91506020830135611a17816118f9565b809150509250929050565b60008060008060808587031215611a3857600080fd5b8435611a43816118f9565b93506020850135611a53816118f9565b93969395505050506040820135916060013590565b600060208284031215611a7a57600080fd5b8151610990816118f9565b600060208284031215611a9757600080fd5b815160ff8116811461099057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b80851115611b12578160001904821115611af857611af8611aa8565b80851615611b0557918102915b93841c9390800290611adc565b509250929050565b600082611b29575060016105fe565b81611b36575060006105fe565b8160018114611b4c5760028114611b5657611b72565b60019150506105fe565b60ff841115611b6757611b67611aa8565b50506001821b6105fe565b5060208310610133831016604e8410600b8410161715611b95575081810a6105fe565b611b9f8383611ad7565b8060001904821115611bb357611bb3611aa8565b029392505050565b600061099060ff841683611b1a565b6000816000190483118215151615611be457611be4611aa8565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611c2757611c27611be9565b500490565b600060208284031215611c3e57600080fd5b5051919050565b80516dffffffffffffffffffffffffffff81168114611c6357600080fd5b919050565b600080600060608486031215611c7d57600080fd5b611c8684611c45565b9250611c9460208501611c45565b9150604084015163ffffffff81168114611cad57600080fd5b809150509250925092565b600063ffffffff83811690831681811015611cd557611cd5611aa8565b039392505050565b60008219821115611cf057611cf0611aa8565b500190565b600082611d0457611d04611be9565b500690565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80841680611d3857611d38611be9565b9216919091049291505056fea2646970667358221220d66c014ce4e8ed566ac54e0539fb0a461679755ffbec4558d2d572f389efeb0d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPriceInUsd(address)": {
        "params": {
          "token_": "The address of asset"
        },
        "returns": {
          "_lastUpdatedAt": "Last updated timestamp",
          "_priceInUsd": "The USD price"
        }
      },
      "getPriceInUsd(address,uint256)": {
        "params": {
          "token_": "The address of assetIn",
          "twapPeriod_": "The TWAP period"
        },
        "returns": {
          "_lastUpdatedAt": "Last updated timestamp",
          "_priceInUsd": "The USD price"
        }
      },
      "hasOracle(address)": {
        "details": "Uses `defaultTwapPeriod`",
        "params": {
          "pair_": "The pair"
        },
        "returns": {
          "_0": "True if exists"
        }
      },
      "hasOracle(address,uint256)": {
        "params": {
          "pair_": "The pair",
          "twapPeriod_": "The TWAP period"
        },
        "returns": {
          "_0": "True if exists"
        }
      },
      "quote(address,address,uint256)": {
        "params": {
          "amountIn_": "Amount of input token",
          "tokenIn_": "The address of assetIn",
          "tokenOut_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Amount out",
          "_lastUpdatedAt": "Last updated timestamp"
        }
      },
      "quote(address,address,uint256,uint256)": {
        "params": {
          "amountIn_": "Amount of input token",
          "tokenIn_": "The address of assetIn",
          "tokenOut_": "The address of assetOut",
          "twapPeriod_": "The TWAP period"
        },
        "returns": {
          "_amountOut": "Amount out",
          "_lastUpdatedAt": "Last updated timestamp"
        }
      },
      "quoteTokenToUsd(address,uint256)": {
        "params": {
          "amountIn_": "Amount of input token.",
          "token_": "The address of assetIn"
        },
        "returns": {
          "_amountOut": "Amount in USD",
          "_lastUpdatedAt": "Last updated timestamp"
        }
      },
      "quoteTokenToUsd(address,uint256,uint256)": {
        "params": {
          "amountIn_": "Amount of input token.",
          "token_": "The address of assetIn",
          "twapPeriod_": "The TWAP period"
        },
        "returns": {
          "_amountOut": "Amount in USD",
          "_lastUpdatedAt": "Last updated timestamp"
        }
      },
      "quoteUsdToToken(address,uint256)": {
        "params": {
          "amountIn_": "Input amount in USD",
          "token_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Output amount of token",
          "_lastUpdatedAt": "Last updated timestamp"
        }
      },
      "quoteUsdToToken(address,uint256,uint256)": {
        "params": {
          "amountIn_": "Input amount in USD",
          "token_": "The address of assetIn",
          "twapPeriod_": "The TWAP period"
        },
        "returns": {
          "_amountOut": "Output amount of token",
          "_lastUpdatedAt": "Last updated timestamp"
        }
      },
      "updateAndQuote(address,address,uint256)": {
        "details": "Will update the oracle if needed before getting quoteUses `defaultTwapPeriod`",
        "params": {
          "amountIn_": "Amount of input token",
          "tokenIn_": "The address of assetIn",
          "tokenOut_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Amount out",
          "_lastUpdatedAt": "Last updated timestamp"
        }
      },
      "updateAndQuote(address,address,uint256,uint256)": {
        "details": "Will update the oracle if needed before getting quote",
        "params": {
          "amountIn_": "Amount of input token",
          "tokenIn_": "The address of assetIn",
          "tokenOut_": "The address of assetOut",
          "twapPeriod_": "The TWAP period"
        },
        "returns": {
          "_amountOut": "Amount out",
          "_lastUpdatedAt": "Last updated timestamp"
        }
      },
      "updateDefaultTwapPeriod(uint256)": {
        "details": "Administrative function",
        "params": {
          "newDefaultTwapPeriod_": "The new default period"
        }
      },
      "updateOrAdd(address,address)": {
        "details": "Will create the pair if it doesn't existUses `defaultTwapPeriod`",
        "params": {
          "tokenIn_": "The address of assetIn",
          "tokenOut_": "The address of assetOut"
        }
      },
      "updateOrAdd(address,address,uint256)": {
        "details": "Will create the pair if it doesn't exist",
        "params": {
          "tokenIn_": "The address of assetIn",
          "tokenOut_": "The address of assetOut",
          "twapPeriod_": "The TWAP period"
        }
      }
    },
    "stateVariables": {
      "defaultTwapPeriod": {
        "details": "See more: https://docs.uniswap.org/protocol/concepts/V3-overview/oracle"
      },
      "oracles": {
        "details": "pair => twapPeriod => oracle"
      }
    },
    "title": "UniswapV2 (and forks) TWAP Oracle implementation Based on https://github.com/Uniswap/v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DefaultTwapPeriodUpdated(uint256,uint256)": {
        "notice": "Emitted when default TWAP period is updated"
      }
    },
    "kind": "user",
    "methods": {
      "defaultTwapPeriod()": {
        "notice": "The default time-weighted average price (TWAP) period Used when a period isn't specified"
      },
      "factory()": {
        "notice": "The UniswapV2-like factory's address"
      },
      "getPriceInUsd(address)": {
        "notice": "Get USD (or equivalent) price of an asset"
      },
      "getPriceInUsd(address,uint256)": {
        "notice": "Get USD (or equivalent) price of an asset"
      },
      "hasOracle(address)": {
        "notice": "Check if there is an oracle for the PAIR-TWAP key"
      },
      "hasOracle(address,uint256)": {
        "notice": "Check if there is an oracle for the PAIR-TWAP key"
      },
      "nativeToken()": {
        "notice": "The native wrapped token (e.g. WETH, WAVAX, WMATIC, etc)"
      },
      "oracles(address,uint256)": {
        "notice": "Oracles'"
      },
      "pairFor(address,address)": {
        "notice": "Returns the pair's contract"
      },
      "quote(address,address,uint256)": {
        "notice": "Get quote"
      },
      "quote(address,address,uint256,uint256)": {
        "notice": "Get quote"
      },
      "quoteTokenToUsd(address,uint256)": {
        "notice": "Get quote in USD (or equivalent) amount"
      },
      "quoteTokenToUsd(address,uint256,uint256)": {
        "notice": "Get quote in USD (or equivalent) amount"
      },
      "quoteUsdToToken(address,uint256)": {
        "notice": "Get quote from USD (or equivalent) amount to amount of token"
      },
      "quoteUsdToToken(address,uint256,uint256)": {
        "notice": "Get quote from USD (or equivalent) amount to amount of token"
      },
      "updateAndQuote(address,address,uint256)": {
        "notice": "Get quote"
      },
      "updateAndQuote(address,address,uint256,uint256)": {
        "notice": "Get quote"
      },
      "updateDefaultTwapPeriod(uint256)": {
        "notice": "Update the default TWAP period"
      },
      "updateOrAdd(address,address)": {
        "notice": "Update cumulative and average price of pair"
      },
      "updateOrAdd(address,address,uint256)": {
        "notice": "Update cumulative and average price of pair"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9463,
        "contract": "contracts/core/UniswapV2LikePriceProvider.sol:UniswapV2LikePriceProvider",
        "label": "defaultTwapPeriod",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9489,
        "contract": "contracts/core/UniswapV2LikePriceProvider.sol:UniswapV2LikePriceProvider",
        "label": "oracles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IUniswapV2Pair)5649,t_mapping(t_uint256,t_struct(Oracle)9480_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)5649": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IUniswapV2Pair)5649,t_mapping(t_uint256,t_struct(Oracle)9480_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IUniswapV2Pair)5649",
        "label": "mapping(contract IUniswapV2Pair => mapping(uint256 => struct UniswapV2LikePriceProvider.Oracle))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Oracle)9480_storage)"
      },
      "t_mapping(t_uint256,t_struct(Oracle)9480_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UniswapV2LikePriceProvider.Oracle)",
        "numberOfBytes": "32",
        "value": "t_struct(Oracle)9480_storage"
      },
      "t_struct(Oracle)9480_storage": {
        "encoding": "inplace",
        "label": "struct UniswapV2LikePriceProvider.Oracle",
        "members": [
          {
            "astId": 9465,
            "contract": "contracts/core/UniswapV2LikePriceProvider.sol:UniswapV2LikePriceProvider",
            "label": "token0",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9467,
            "contract": "contracts/core/UniswapV2LikePriceProvider.sol:UniswapV2LikePriceProvider",
            "label": "token1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9469,
            "contract": "contracts/core/UniswapV2LikePriceProvider.sol:UniswapV2LikePriceProvider",
            "label": "price0CumulativeLast",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9471,
            "contract": "contracts/core/UniswapV2LikePriceProvider.sol:UniswapV2LikePriceProvider",
            "label": "price1CumulativeLast",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9473,
            "contract": "contracts/core/UniswapV2LikePriceProvider.sol:UniswapV2LikePriceProvider",
            "label": "blockTimestampLast",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 9476,
            "contract": "contracts/core/UniswapV2LikePriceProvider.sol:UniswapV2LikePriceProvider",
            "label": "price0Average",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(uq112x112)5096_storage"
          },
          {
            "astId": 9479,
            "contract": "contracts/core/UniswapV2LikePriceProvider.sol:UniswapV2LikePriceProvider",
            "label": "price1Average",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(uq112x112)5096_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(uq112x112)5096_storage": {
        "encoding": "inplace",
        "label": "struct FixedPoint.uq112x112",
        "members": [
          {
            "astId": 5095,
            "contract": "contracts/core/UniswapV2LikePriceProvider.sol:UniswapV2LikePriceProvider",
            "label": "_x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
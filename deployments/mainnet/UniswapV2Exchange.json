{
  "address": "0x236829F4878D5143D2Fe206E864012b3997BBa5E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "router_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wethLike_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldWethLike",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newWethLike",
          "type": "address"
        }
      ],
      "name": "WethLikeTokenUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        }
      ],
      "name": "getBestAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "getBestAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "outReceiver_",
          "type": "address"
        }
      ],
      "name": "swapExactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "inSender_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outRecipient_",
          "type": "address"
        }
      ],
      "name": "swapExactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposedGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wethLike_",
          "type": "address"
        }
      ],
      "name": "updateWethLikeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethLike",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x03759d0b3082d2b3d8a14310f431c82e032519b0a1ac279ed2bc3d49be21fca4",
  "receipt": {
    "to": null,
    "from": "0xcc4ba6Ef2aC12FA5932ef584ebc4a762FE970919",
    "contractAddress": "0x236829F4878D5143D2Fe206E864012b3997BBa5E",
    "transactionIndex": 123,
    "gasUsed": "1540609",
    "logsBloom": "0x
    "blockHash": "0xc164c42e8a958c44ce35e93eb26f66d4373d9fb184fef4133cf8b28102f06815",
    "transactionHash": "0x03759d0b3082d2b3d8a14310f431c82e032519b0a1ac279ed2bc3d49be21fca4",
    "logs": [
      {
        "transactionIndex": 123,
        "blockNumber": 15003746,
        "transactionHash": "0x03759d0b3082d2b3d8a14310f431c82e032519b0a1ac279ed2bc3d49be21fca4",
        "address": "0x236829F4878D5143D2Fe206E864012b3997BBa5E",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc4ba6ef2ac12fa5932ef584ebc4a762fe970919"
        ],
        "data": "0x",
        "logIndex": 135,
        "blockHash": "0xc164c42e8a958c44ce35e93eb26f66d4373d9fb184fef4133cf8b28102f06815"
      }
    ],
    "blockNumber": 15003746,
    "cumulativeGasUsed": "9446207",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
  ],
  "numDeployments": 1,
  "solcInputHash": "e41066c15c2a88ae557b6f0d3059c5d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethLike_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldWethLike\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWethLike\",\"type\":\"address\"}],\"name\":\"WethLikeTokenUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"}],\"name\":\"getBestAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"getBestAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outReceiver_\",\"type\":\"address\"}],\"name\":\"swapExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inSender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outRecipient_\",\"type\":\"address\"}],\"name\":\"swapExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wethLike_\",\"type\":\"address\"}],\"name\":\"updateWethLikeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethLike\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptGovernorship()\":{\"details\":\"Allows new governor to accept governorship of the contract.\"},\"constructor\":{\"details\":\"Doesn't consider router.WETH() as `wethLike` because isn't guaranteed that it's the most liquid token.\"},\"getBestAmountIn(address,address,uint256)\":{\"details\":\"It shouldn't be used as oracle!!!\"},\"getBestAmountOut(address,address,uint256)\":{\"details\":\"It shouldn't be used as oracle!!!\"},\"swapExactInput(bytes,uint256,uint256,address)\":{\"details\":\"Should transfer `amountIn_` before performing swap\"},\"swapExactOutput(bytes,uint256,uint256,address,address)\":{\"details\":\"Should transfer `amountInMax_` before performing swapSends swap remains - if any - to the `inSender_`\"},\"transferGovernorship(address)\":{\"details\":\"Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner.\"}},\"stateVariables\":{\"wethLike\":{\"details\":\"I.e. should be the most liquid token that offer best routers among trade pairsIt's usually the wrapper token of the chain's native coin but it isn't always true For instance: On Polygon, the `WETH` is more liquid than `WMATIC` on UniV3 protocol.\"}},\"version\":1},\"userdoc\":{\"events\":{\"WethLikeTokenUpdated(address,address)\":{\"notice\":\"Emitted when wethLike token is updated\"}},\"kind\":\"user\",\"methods\":{\"getBestAmountIn(address,address,uint256)\":{\"notice\":\"Get *spot* quote It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)\"},\"getBestAmountOut(address,address,uint256)\":{\"notice\":\"Get *spot* quote It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)\"},\"router()\":{\"notice\":\"The UniswapV2-Like router contract\"},\"swapExactInput(bytes,uint256,uint256,address)\":{\"notice\":\"Perform an exact input swap\"},\"swapExactOutput(bytes,uint256,uint256,address,address)\":{\"notice\":\"Perform an exact output swap\"},\"updateWethLikeToken(address)\":{\"notice\":\"Update WETH-Like token\"},\"wethLike()\":{\"notice\":\"The WETH-Like token (a.k.a. Native Token)\"}},\"notice\":\"UniswapV2 Like Exchange\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swapper/UniswapV2LikeExchange.sol\":\"UniswapV2LikeExchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, Context, Initializable {\\n    address public governor;\\n    address private proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Governable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal initializer {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == _msgSender(), \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(proposedGovernor == _msgSender(), \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x57b52a711313030d4d996899be3c248fbfd4ee72b5578d4b427dddb500d668ab\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/swapper/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity <=0.8.9;\\n\\n/**\\n * @notice Exchange interface\\n */\\ninterface IExchange {\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getBestAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external returns (uint256 _amountIn, bytes memory _path);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getBestAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, bytes memory _path);\\n\\n    /**\\n     * @notice Perform an exact input swap\\n     * @dev Should transfer `amountIn_` before performing swap\\n     */\\n    function swapExactInput(\\n        bytes calldata path_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address outReceiver_\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap\\n     * @dev Should transfer `amountInMax_` before performing swap\\n     * @dev Sends swap remains - if any - to the `inSender_`\\n     */\\n    function swapExactOutput(\\n        bytes calldata path_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address inSender_,\\n        address outRecipient_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x47dad3eaeb559854b717ee883152b7ea6810bc34f660063bdaaabd172617eb17\",\"license\":\"MIT\"},\"contracts/swapper/UniswapV2LikeExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\nimport \\\"../interfaces/swapper/IExchange.sol\\\";\\n\\n/**\\n * @notice UniswapV2 Like Exchange\\n */\\ncontract UniswapV2LikeExchange is IExchange, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice The WETH-Like token (a.k.a. Native Token)\\n     * @dev I.e. should be the most liquid token that offer best routers among trade pairs\\n     * @dev It's usually the wrapper token of the chain's native coin but it isn't always true\\n     * For instance: On Polygon, the `WETH` is more liquid than `WMATIC` on UniV3 protocol.\\n     */\\n    address public wethLike;\\n\\n    /**\\n     * @notice The UniswapV2-Like router contract\\n     */\\n    IUniswapV2Router02 public immutable router;\\n\\n    /// @notice Emitted when wethLike token is updated\\n    event WethLikeTokenUpdated(address oldWethLike, address newWethLike);\\n\\n    /**\\n     * @dev Doesn't consider router.WETH() as `wethLike` because isn't guaranteed that it's the most liquid token.\\n     */\\n    constructor(IUniswapV2Router02 router_, address wethLike_) {\\n        router = router_;\\n        wethLike = wethLike_;\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function getBestAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external returns (uint256 _amountIn, bytes memory _path) {\\n        // 1. Check IN-OUT pair\\n        address[] memory _pathA = new address[](2);\\n        _pathA[0] = tokenIn_;\\n        _pathA[1] = tokenOut_;\\n        uint256 _amountInA = _getAmountsIn(amountOut_, _pathA);\\n\\n        if (tokenIn_ == wethLike || tokenOut_ == wethLike) {\\n            // Returns if one of the token is WETH-Like\\n            require(_amountInA > 0, \\\"no-path-found\\\");\\n            return (_amountInA, _encodePath(_pathA));\\n        }\\n\\n        // 2. Check IN-WETH-OUT path\\n        address[] memory _pathB = new address[](3);\\n        _pathB[0] = tokenIn_;\\n        _pathB[1] = wethLike;\\n        _pathB[2] = tokenOut_;\\n        uint256 _amountInB = _getAmountsIn(amountOut_, _pathB);\\n\\n        // 3. Get best route between paths A and B\\n        require(_amountInA > 0 || _amountInB > 0, \\\"no-path-found\\\");\\n\\n        // Returns A if it's valid and better than B or if B isn't valid\\n        if ((_amountInA > 0 && _amountInA < _amountInB) || _amountInB == 0) {\\n            return (_amountInA, _encodePath(_pathA));\\n        }\\n        return (_amountInB, _encodePath(_pathB));\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function getBestAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, bytes memory _path) {\\n        // 1. Check IN-OUT pair\\n        address[] memory _pathA = new address[](2);\\n        _pathA[0] = tokenIn_;\\n        _pathA[1] = tokenOut_;\\n        uint256 _amountOutA = _getAmountsOut(amountIn_, _pathA);\\n\\n        if (tokenIn_ == wethLike || tokenOut_ == wethLike) {\\n            // Returns if one of the token is WETH-Like\\n            require(_amountOutA > 0, \\\"no-path-found\\\");\\n            return (_amountOutA, _encodePath(_pathA));\\n        }\\n\\n        // 2. Check IN-WETH-OUT path\\n        address[] memory _pathB = new address[](3);\\n        _pathB[0] = tokenIn_;\\n        _pathB[1] = wethLike;\\n        _pathB[2] = tokenOut_;\\n        uint256 _amountOutB = _getAmountsOut(amountIn_, _pathB);\\n\\n        // 3. Get best route between paths A and B\\n        require(_amountOutA > 0 || _amountOutB > 0, \\\"no-path-found\\\");\\n        if (_amountOutA > _amountOutB) return (_amountOutA, _encodePath(_pathA));\\n        return (_amountOutB, _encodePath(_pathB));\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function swapExactInput(\\n        bytes calldata path_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address outReceiver_\\n    ) external returns (uint256 _amountOut) {\\n        address[] memory _path = _decodePath(path_);\\n        IERC20 _tokenIn = IERC20(_path[0]);\\n        if (_tokenIn.allowance(address(this), address(router)) < amountIn_) {\\n            _tokenIn.approve(address(router), type(uint256).max);\\n        }\\n\\n        _amountOut = router.swapExactTokensForTokens(amountIn_, amountOutMin_, _path, outReceiver_, block.timestamp)[\\n            _path.length - 1\\n        ];\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function swapExactOutput(\\n        bytes calldata path_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address inSender_,\\n        address outRecipient_\\n    ) external returns (uint256 _amountIn) {\\n        address[] memory _path = _decodePath(path_);\\n        IERC20 _tokenIn = IERC20(_path[0]);\\n        if (_tokenIn.allowance(address(this), address(router)) < amountInMax_) {\\n            _tokenIn.approve(address(router), type(uint256).max);\\n        }\\n\\n        _amountIn = router.swapTokensForExactTokens(amountOut_, amountInMax_, _path, outRecipient_, block.timestamp)[0];\\n        // If swap end up costly less than _amountInMax then return remaining\\n        uint256 _remainingAmountIn = amountInMax_ - _amountIn;\\n        if (_remainingAmountIn > 0) {\\n            _tokenIn.safeTransfer(inSender_, _remainingAmountIn);\\n        }\\n    }\\n\\n    /**\\n     * @notice Wraps `router.getAmountsOut()` function\\n     * @dev Returns `0` if reverts\\n     */\\n    function _getAmountsOut(uint256 amountIn_, address[] memory path_) internal view returns (uint256 _amountOut) {\\n        try router.getAmountsOut(amountIn_, path_) returns (uint256[] memory amounts) {\\n            _amountOut = amounts[path_.length - 1];\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Wraps `router.getAmountsIn()` function\\n     * @dev Returns `0` if reverts\\n     */\\n    function _getAmountsIn(uint256 _amountOut, address[] memory _path) internal view returns (uint256 _amountIn) {\\n        try router.getAmountsIn(_amountOut, _path) returns (uint256[] memory amounts) {\\n            _amountIn = amounts[0];\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Encode path from `address[]` to `bytes`\\n     */\\n    function _encodePath(address[] memory path_) private pure returns (bytes memory _path) {\\n        return abi.encode(path_);\\n    }\\n\\n    /**\\n     * @notice Encode path from `bytes` to `address[]`\\n     */\\n    function _decodePath(bytes memory path_) private pure returns (address[] memory _path) {\\n        return abi.decode(path_, (address[]));\\n    }\\n\\n    /**\\n     * @notice Update WETH-Like token\\n     */\\n    function updateWethLikeToken(address wethLike_) external onlyGovernor {\\n        emit WethLikeTokenUpdated(wethLike, wethLike_);\\n        wethLike = wethLike_;\\n    }\\n}\\n\",\"keccak256\":\"0x19cf8a042ba46d4c9200ccc4ba33727b66e171324b01b63ea0cac88b20af141b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001b7d38038062001b7d8339810160408190526200003491620000c0565b6000805462010000600160b01b03191633620100008102919091178255604051909182917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a3506001600160a01b03918216608052600280546001600160a01b03191691909216179055620000ff565b6001600160a01b0381168114620000bd57600080fd5b50565b60008060408385031215620000d457600080fd5b8251620000e181620000a7565b6020840151909250620000f481620000a7565b809150509250929050565b608051611a2a62000153600039600081816101a9015281816104fc015281816105b90152818161069501528181610b4101528181610bfe01528181610cda01528181610fe401526111140152611a2a6000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80637fbb36e711610076578063b6aa515b1161005b578063b6aa515b14610189578063f3b27bc31461019c578063f887ea40146101a457600080fd5b80637fbb36e7146101615780639d9f384d1461017657600080fd5b806329dbd944116100a757806329dbd9441461011a5780634909c29a1461012d57806370b247421461014e57600080fd5b80630c340a24146100c357806319145798146100f9575b600080fd5b6000546100dc906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61010c6101073660046114d0565b6101cb565b6040516100f092919061156d565b6002546100dc906001600160a01b031681565b61014061013b3660046115cf565b610462565b6040519081526020016100f0565b61010c61015c3660046114d0565b61075b565b61017461016f36600461163a565b6109c5565b005b610140610184366004611657565b610aa7565b61017461019736600461163a565b610dc0565b610174610eb1565b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6040805160028082526060828101909352600092918391816020016020820280368337019050509050858160008151811061020857610208611702565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061023c5761023c611702565b60200260200101906001600160a01b031690816001600160a01b03168152505060006102688583610fb1565b6002549091506001600160a01b038881169116148061029457506002546001600160a01b038781169116145b1561030357600081116102ee5760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e640000000000000000000000000000000000000060448201526064015b60405180910390fd5b806102f8836110a2565b93509350505061045a565b6040805160038082526080820190925260009160208201606080368337019050509050878160008151811061033a5761033a611702565b6001600160a01b03928316602091820292909201015260025482519116908290600190811061036b5761036b611702565b60200260200101906001600160a01b031690816001600160a01b031681525050868160028151811061039f5761039f611702565b60200260200101906001600160a01b031690816001600160a01b03168152505060006103cb8783610fb1565b905060008311806103dc5750600081115b6104285760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e640000000000000000000000000000000000000060448201526064016102e5565b80831115610447578261043a856110a2565b955095505050505061045a565b80610451836110a2565b95509550505050505b935093915050565b6000806104a487878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110cb92505050565b90506000816000815181106104bb576104bb611702565b60209081029190910101516040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152919250879183169063dd62ed3e9060440160206040518083038186803b15801561054b57600080fd5b505afa15801561055f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105839190611731565b1015610665576040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602483015282169063095ea7b390604401602060405180830381600087803b15801561062b57600080fd5b505af115801561063f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610663919061174a565b505b6040517f38ed17390000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906338ed1739906106d2908990899087908a9042906004016117b0565b600060405180830381600087803b1580156106ec57600080fd5b505af1158015610700573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107289190810190611841565b6001835161073691906118cc565b8151811061074657610746611702565b60200260200101519250505095945050505050565b6040805160028082526060828101909352600092918391816020016020820280368337019050509050858160008151811061079857610798611702565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106107cc576107cc611702565b60200260200101906001600160a01b031690816001600160a01b03168152505060006107f885836110e1565b6002549091506001600160a01b038881169116148061082457506002546001600160a01b038781169116145b1561087957600081116102ee5760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e640000000000000000000000000000000000000060448201526064016102e5565b604080516003808252608082019092526000916020820160608036833701905050905087816000815181106108b0576108b0611702565b6001600160a01b0392831660209182029290920101526002548251911690829060019081106108e1576108e1611702565b60200260200101906001600160a01b031690816001600160a01b031681525050868160028151811061091557610915611702565b60200260200101906001600160a01b031690816001600160a01b031681525050600061094187836110e1565b905060008311806109525750600081115b61099e5760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e640000000000000000000000000000000000000060448201526064016102e5565b6000831180156109ad57508083105b806109b6575080155b15610447578261043a856110a2565b6000546001600160a01b0362010000909104163314610a265760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102e5565b600254604080516001600160a01b03928316815291831660208301527fa660aa88bd78e0552d7e2b6cb01df732642a0ff595c9c7b2ae67fb9e3db01f55910160405180910390a1600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080610ae988888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110cb92505050565b9050600081600081518110610b0057610b00611702565b60209081029190910101516040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152919250879183169063dd62ed3e9060440160206040518083038186803b158015610b9057600080fd5b505afa158015610ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc89190611731565b1015610caa576040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602483015282169063095ea7b390604401602060405180830381600087803b158015610c7057600080fd5b505af1158015610c84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca8919061174a565b505b6040517f8803dbee0000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638803dbee90610d17908a908a9087908a9042906004016117b0565b600060405180830381600087803b158015610d3157600080fd5b505af1158015610d45573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d6d9190810190611841565b600081518110610d7f57610d7f611702565b6020026020010151925060008387610d9791906118cc565b90508015610db357610db36001600160a01b03831687836111b4565b5050509695505050505050565b6000546001600160a01b0362010000909104163314610e215760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102e5565b6001600160a01b038116610e775760405162461bcd60e51b815260206004820152601960248201527f70726f706f7365642d676f7665726e6f722d69732d7a65726f0000000000000060448201526064016102e5565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610f0b5760405162461bcd60e51b815260206004820152601960248201527f6e6f742d7468652d70726f706f7365642d676f7665726e6f720000000000000060448201526064016102e5565b600154600080546040516001600160a01b039384169362010000909204909116917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d091a360018054600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166001600160a01b03831662010000021790557fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6040517fd06ca61f0000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d06ca61f9061101b908690869060040161190a565b60006040518083038186803b15801561103357600080fd5b505afa92505050801561106857506040513d6000823e601f3d908101601f191682016040526110659190810190611841565b60015b6110715761109c565b806001845161108091906118cc565b8151811061109057611090611702565b60200260200101519150505b92915050565b6060816040516020016110b59190611923565b6040516020818303038152906040529050919050565b60608180602001905181019061109c9190611936565b6040517f1f00ca740000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631f00ca749061114b908690869060040161190a565b60006040518083038186803b15801561116357600080fd5b505afa92505050801561119857506040513d6000823e601f3d908101601f191682016040526111959190810190611841565b60015b6111a15761109c565b8060008151811061109057611090611702565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611234908490611239565b505050565b600061128e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661131e9092919063ffffffff16565b80519091501561123457808060200190518101906112ac919061174a565b6112345760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102e5565b606061132d8484600085611337565b90505b9392505050565b6060824710156113af5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102e5565b6001600160a01b0385163b6114065760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102e5565b600080866001600160a01b0316858760405161142291906119c5565b60006040518083038185875af1925050503d806000811461145f576040519150601f19603f3d011682016040523d82523d6000602084013e611464565b606091505b509150915061147482828661147f565b979650505050505050565b6060831561148e575081611330565b82511561149e5782518084602001fd5b8160405162461bcd60e51b81526004016102e591906119e1565b6001600160a01b03811681146114cd57600080fd5b50565b6000806000606084860312156114e557600080fd5b83356114f0816114b8565b92506020840135611500816114b8565b929592945050506040919091013590565b60005b8381101561152c578181015183820152602001611514565b8381111561153b576000848401525b50505050565b60008151808452611559816020860160208601611511565b601f01601f19169290920160200192915050565b82815260406020820152600061132d6040830184611541565b60008083601f84011261159857600080fd5b50813567ffffffffffffffff8111156115b057600080fd5b6020830191508360208285010111156115c857600080fd5b9250929050565b6000806000806000608086880312156115e757600080fd5b853567ffffffffffffffff8111156115fe57600080fd5b61160a88828901611586565b9096509450506020860135925060408601359150606086013561162c816114b8565b809150509295509295909350565b60006020828403121561164c57600080fd5b8135611330816114b8565b60008060008060008060a0878903121561167057600080fd5b863567ffffffffffffffff81111561168757600080fd5b61169389828a01611586565b909750955050602087013593506040870135925060608701356116b5816114b8565b915060808701356116c5816114b8565b809150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561174357600080fd5b5051919050565b60006020828403121561175c57600080fd5b8151801515811461133057600080fd5b600081518084526020808501945080840160005b838110156117a55781516001600160a01b031687529582019590820190600101611780565b509495945050505050565b85815284602082015260a0604082015260006117cf60a083018661176c565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611815576118156116d3565b604052919050565b600067ffffffffffffffff821115611837576118376116d3565b5060051b60200190565b6000602080838503121561185457600080fd5b825167ffffffffffffffff81111561186b57600080fd5b8301601f8101851361187c57600080fd5b805161188f61188a8261181d565b6117ec565b81815260059190911b820183019083810190878311156118ae57600080fd5b928401925b82841015611474578351825292840192908401906118b3565b600082821015611905577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b82815260406020820152600061132d604083018461176c565b602081526000611330602083018461176c565b6000602080838503121561194957600080fd5b825167ffffffffffffffff81111561196057600080fd5b8301601f8101851361197157600080fd5b805161197f61188a8261181d565b81815260059190911b8201830190838101908783111561199e57600080fd5b928401925b828410156114745783516119b6816114b8565b825292840192908401906119a3565b600082516119d7818460208701611511565b9190910192915050565b602081526000611330602083018461154156fea264697066735822122071388ae13d980b28a1485fbe970f0217658496a79105d740b28e6712466c1ae064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80637fbb36e711610076578063b6aa515b1161005b578063b6aa515b14610189578063f3b27bc31461019c578063f887ea40146101a457600080fd5b80637fbb36e7146101615780639d9f384d1461017657600080fd5b806329dbd944116100a757806329dbd9441461011a5780634909c29a1461012d57806370b247421461014e57600080fd5b80630c340a24146100c357806319145798146100f9575b600080fd5b6000546100dc906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61010c6101073660046114d0565b6101cb565b6040516100f092919061156d565b6002546100dc906001600160a01b031681565b61014061013b3660046115cf565b610462565b6040519081526020016100f0565b61010c61015c3660046114d0565b61075b565b61017461016f36600461163a565b6109c5565b005b610140610184366004611657565b610aa7565b61017461019736600461163a565b610dc0565b610174610eb1565b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6040805160028082526060828101909352600092918391816020016020820280368337019050509050858160008151811061020857610208611702565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061023c5761023c611702565b60200260200101906001600160a01b031690816001600160a01b03168152505060006102688583610fb1565b6002549091506001600160a01b038881169116148061029457506002546001600160a01b038781169116145b1561030357600081116102ee5760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e640000000000000000000000000000000000000060448201526064015b60405180910390fd5b806102f8836110a2565b93509350505061045a565b6040805160038082526080820190925260009160208201606080368337019050509050878160008151811061033a5761033a611702565b6001600160a01b03928316602091820292909201015260025482519116908290600190811061036b5761036b611702565b60200260200101906001600160a01b031690816001600160a01b031681525050868160028151811061039f5761039f611702565b60200260200101906001600160a01b031690816001600160a01b03168152505060006103cb8783610fb1565b905060008311806103dc5750600081115b6104285760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e640000000000000000000000000000000000000060448201526064016102e5565b80831115610447578261043a856110a2565b955095505050505061045a565b80610451836110a2565b95509550505050505b935093915050565b6000806104a487878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110cb92505050565b90506000816000815181106104bb576104bb611702565b60209081029190910101516040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152919250879183169063dd62ed3e9060440160206040518083038186803b15801561054b57600080fd5b505afa15801561055f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105839190611731565b1015610665576040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602483015282169063095ea7b390604401602060405180830381600087803b15801561062b57600080fd5b505af115801561063f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610663919061174a565b505b6040517f38ed17390000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906338ed1739906106d2908990899087908a9042906004016117b0565b600060405180830381600087803b1580156106ec57600080fd5b505af1158015610700573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107289190810190611841565b6001835161073691906118cc565b8151811061074657610746611702565b60200260200101519250505095945050505050565b6040805160028082526060828101909352600092918391816020016020820280368337019050509050858160008151811061079857610798611702565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106107cc576107cc611702565b60200260200101906001600160a01b031690816001600160a01b03168152505060006107f885836110e1565b6002549091506001600160a01b038881169116148061082457506002546001600160a01b038781169116145b1561087957600081116102ee5760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e640000000000000000000000000000000000000060448201526064016102e5565b604080516003808252608082019092526000916020820160608036833701905050905087816000815181106108b0576108b0611702565b6001600160a01b0392831660209182029290920101526002548251911690829060019081106108e1576108e1611702565b60200260200101906001600160a01b031690816001600160a01b031681525050868160028151811061091557610915611702565b60200260200101906001600160a01b031690816001600160a01b031681525050600061094187836110e1565b905060008311806109525750600081115b61099e5760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e640000000000000000000000000000000000000060448201526064016102e5565b6000831180156109ad57508083105b806109b6575080155b15610447578261043a856110a2565b6000546001600160a01b0362010000909104163314610a265760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102e5565b600254604080516001600160a01b03928316815291831660208301527fa660aa88bd78e0552d7e2b6cb01df732642a0ff595c9c7b2ae67fb9e3db01f55910160405180910390a1600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080610ae988888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110cb92505050565b9050600081600081518110610b0057610b00611702565b60209081029190910101516040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152919250879183169063dd62ed3e9060440160206040518083038186803b158015610b9057600080fd5b505afa158015610ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc89190611731565b1015610caa576040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602483015282169063095ea7b390604401602060405180830381600087803b158015610c7057600080fd5b505af1158015610c84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca8919061174a565b505b6040517f8803dbee0000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638803dbee90610d17908a908a9087908a9042906004016117b0565b600060405180830381600087803b158015610d3157600080fd5b505af1158015610d45573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d6d9190810190611841565b600081518110610d7f57610d7f611702565b6020026020010151925060008387610d9791906118cc565b90508015610db357610db36001600160a01b03831687836111b4565b5050509695505050505050565b6000546001600160a01b0362010000909104163314610e215760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102e5565b6001600160a01b038116610e775760405162461bcd60e51b815260206004820152601960248201527f70726f706f7365642d676f7665726e6f722d69732d7a65726f0000000000000060448201526064016102e5565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610f0b5760405162461bcd60e51b815260206004820152601960248201527f6e6f742d7468652d70726f706f7365642d676f7665726e6f720000000000000060448201526064016102e5565b600154600080546040516001600160a01b039384169362010000909204909116917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d091a360018054600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166001600160a01b03831662010000021790557fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6040517fd06ca61f0000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d06ca61f9061101b908690869060040161190a565b60006040518083038186803b15801561103357600080fd5b505afa92505050801561106857506040513d6000823e601f3d908101601f191682016040526110659190810190611841565b60015b6110715761109c565b806001845161108091906118cc565b8151811061109057611090611702565b60200260200101519150505b92915050565b6060816040516020016110b59190611923565b6040516020818303038152906040529050919050565b60608180602001905181019061109c9190611936565b6040517f1f00ca740000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631f00ca749061114b908690869060040161190a565b60006040518083038186803b15801561116357600080fd5b505afa92505050801561119857506040513d6000823e601f3d908101601f191682016040526111959190810190611841565b60015b6111a15761109c565b8060008151811061109057611090611702565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611234908490611239565b505050565b600061128e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661131e9092919063ffffffff16565b80519091501561123457808060200190518101906112ac919061174a565b6112345760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102e5565b606061132d8484600085611337565b90505b9392505050565b6060824710156113af5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102e5565b6001600160a01b0385163b6114065760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102e5565b600080866001600160a01b0316858760405161142291906119c5565b60006040518083038185875af1925050503d806000811461145f576040519150601f19603f3d011682016040523d82523d6000602084013e611464565b606091505b509150915061147482828661147f565b979650505050505050565b6060831561148e575081611330565b82511561149e5782518084602001fd5b8160405162461bcd60e51b81526004016102e591906119e1565b6001600160a01b03811681146114cd57600080fd5b50565b6000806000606084860312156114e557600080fd5b83356114f0816114b8565b92506020840135611500816114b8565b929592945050506040919091013590565b60005b8381101561152c578181015183820152602001611514565b8381111561153b576000848401525b50505050565b60008151808452611559816020860160208601611511565b601f01601f19169290920160200192915050565b82815260406020820152600061132d6040830184611541565b60008083601f84011261159857600080fd5b50813567ffffffffffffffff8111156115b057600080fd5b6020830191508360208285010111156115c857600080fd5b9250929050565b6000806000806000608086880312156115e757600080fd5b853567ffffffffffffffff8111156115fe57600080fd5b61160a88828901611586565b9096509450506020860135925060408601359150606086013561162c816114b8565b809150509295509295909350565b60006020828403121561164c57600080fd5b8135611330816114b8565b60008060008060008060a0878903121561167057600080fd5b863567ffffffffffffffff81111561168757600080fd5b61169389828a01611586565b909750955050602087013593506040870135925060608701356116b5816114b8565b915060808701356116c5816114b8565b809150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561174357600080fd5b5051919050565b60006020828403121561175c57600080fd5b8151801515811461133057600080fd5b600081518084526020808501945080840160005b838110156117a55781516001600160a01b031687529582019590820190600101611780565b509495945050505050565b85815284602082015260a0604082015260006117cf60a083018661176c565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611815576118156116d3565b604052919050565b600067ffffffffffffffff821115611837576118376116d3565b5060051b60200190565b6000602080838503121561185457600080fd5b825167ffffffffffffffff81111561186b57600080fd5b8301601f8101851361187c57600080fd5b805161188f61188a8261181d565b6117ec565b81815260059190911b820183019083810190878311156118ae57600080fd5b928401925b82841015611474578351825292840192908401906118b3565b600082821015611905577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b82815260406020820152600061132d604083018461176c565b602081526000611330602083018461176c565b6000602080838503121561194957600080fd5b825167ffffffffffffffff81111561196057600080fd5b8301601f8101851361197157600080fd5b805161197f61188a8261181d565b81815260059190911b8201830190838101908783111561199e57600080fd5b928401925b828410156114745783516119b6816114b8565b825292840192908401906119a3565b600082516119d7818460208701611511565b9190910192915050565b602081526000611330602083018461154156fea264697066735822122071388ae13d980b28a1485fbe970f0217658496a79105d740b28e6712466c1ae064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptGovernorship()": {
        "details": "Allows new governor to accept governorship of the contract."
      },
      "constructor": {
        "details": "Doesn't consider router.WETH() as `wethLike` because isn't guaranteed that it's the most liquid token."
      },
      "getBestAmountIn(address,address,uint256)": {
        "details": "It shouldn't be used as oracle!!!"
      },
      "getBestAmountOut(address,address,uint256)": {
        "details": "It shouldn't be used as oracle!!!"
      },
      "swapExactInput(bytes,uint256,uint256,address)": {
        "details": "Should transfer `amountIn_` before performing swap"
      },
      "swapExactOutput(bytes,uint256,uint256,address,address)": {
        "details": "Should transfer `amountInMax_` before performing swapSends swap remains - if any - to the `inSender_`"
      },
      "transferGovernorship(address)": {
        "details": "Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "wethLike": {
        "details": "I.e. should be the most liquid token that offer best routers among trade pairsIt's usually the wrapper token of the chain's native coin but it isn't always true For instance: On Polygon, the `WETH` is more liquid than `WMATIC` on UniV3 protocol."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "WethLikeTokenUpdated(address,address)": {
        "notice": "Emitted when wethLike token is updated"
      }
    },
    "kind": "user",
    "methods": {
      "getBestAmountIn(address,address,uint256)": {
        "notice": "Get *spot* quote It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)"
      },
      "getBestAmountOut(address,address,uint256)": {
        "notice": "Get *spot* quote It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)"
      },
      "router()": {
        "notice": "The UniswapV2-Like router contract"
      },
      "swapExactInput(bytes,uint256,uint256,address)": {
        "notice": "Perform an exact input swap"
      },
      "swapExactOutput(bytes,uint256,uint256,address,address)": {
        "notice": "Perform an exact output swap"
      },
      "updateWethLikeToken(address)": {
        "notice": "Update WETH-Like token"
      },
      "wethLike()": {
        "notice": "The WETH-Like token (a.k.a. Native Token)"
      }
    },
    "notice": "UniswapV2 Like Exchange",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 420,
        "contract": "contracts/swapper/UniswapV2LikeExchange.sol:UniswapV2LikeExchange",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 423,
        "contract": "contracts/swapper/UniswapV2LikeExchange.sol:UniswapV2LikeExchange",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6779,
        "contract": "contracts/swapper/UniswapV2LikeExchange.sol:UniswapV2LikeExchange",
        "label": "governor",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6781,
        "contract": "contracts/swapper/UniswapV2LikeExchange.sol:UniswapV2LikeExchange",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15425,
        "contract": "contracts/swapper/UniswapV2LikeExchange.sol:UniswapV2LikeExchange",
        "label": "wethLike",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
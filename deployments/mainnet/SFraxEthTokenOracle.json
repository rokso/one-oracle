{
  "address": "0x9cfdADaEfCA0052A04AF5695E40829A62f4B0559",
  "abi": [
    {
      "inputs": [],
      "name": "ETH_FRXETH_CURVE_POOL",
      "outputs": [
        {
          "internalType": "contract IFrxEthStableSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FRXETH_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FRXETH_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SFRXETH",
      "outputs": [
        {
          "internalType": "contract ISFrxEth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x712b28edc2a96cc977012bb9738b006c43106cdcebdec946dd15700253bb770b",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x9cfdADaEfCA0052A04AF5695E40829A62f4B0559",
    "transactionIndex": 47,
    "gasUsed": "306027",
    "logsBloom": "0x
    "blockHash": "0x04ea6742530d0e086136e041f7a0172ebaa95e1f65a716829f78fca47d5d9636",
    "transactionHash": "0x712b28edc2a96cc977012bb9738b006c43106cdcebdec946dd15700253bb770b",
    "logs": [],
    "blockNumber": 16683998,
    "cumulativeGasUsed": "3753797",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6560b70d562cf6c2a7aadabeef5e4dc6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ETH_FRXETH_CURVE_POOL\",\"outputs\":[{\"internalType\":\"contract IFrxEthStableSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FRXETH_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FRXETH_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SFRXETH\",\"outputs\":[{\"internalType\":\"contract ISFrxEth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Based on https://etherscan.deth.net/address/0x27942aFe4EcB7F9945168094e0749CAC749aC97B#code\",\"kind\":\"dev\",\"methods\":{\"getPriceInUsd(address)\":{\"params\":{\"token_\":\"The address of asset\"},\"returns\":{\"_priceInUsd\":\"The USD price\"}}},\"title\":\"Oracle for `sFraxEthToken`\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPriceInUsd(address)\":{\"notice\":\"Get USD (or equivalent) price of an asset\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/tokens/SFraxEthTokenOracle.sol\":\"SFraxEthTokenOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx,\\n        uint256 _min_dy\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x030f3b115d45dfb8cb7c00e42b803f862093d93093dc23f6b479c0e89caac459\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/IFrxEthStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./ICurvePool.sol\\\";\\n\\ninterface IFrxEthStableSwap is ICurvePool {\\n    function price_oracle() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x616bba8fa6b14ca64ede894c5c961f792148463dbfe8efa16925ec66511580c1\",\"license\":\"MIT\"},\"contracts/interfaces/external/frax/ISFrxEth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Note: This file generated from sfrxEth contract at https://etherscan.io/address/0xac3e018457b222d93114458476f3e3416abbe38f#code\\ninterface ISFrxEth is IERC20 {\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function asset() external view returns (address);\\n\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    function depositWithSignature(\\n        uint256 assets,\\n        address receiver,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 shares);\\n\\n    function lastRewardAmount() external view returns (uint192);\\n\\n    function lastSync() external view returns (uint32);\\n\\n    function maxDeposit(address) external view returns (uint256);\\n\\n    function maxMint(address) external view returns (uint256);\\n\\n    function maxRedeem(address owner) external view returns (uint256);\\n\\n    function maxWithdraw(address owner) external view returns (uint256);\\n\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    function nonces(address) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function previewDeposit(uint256 assets) external view returns (uint256);\\n\\n    function previewMint(uint256 shares) external view returns (uint256);\\n\\n    function previewRedeem(uint256 shares) external view returns (uint256);\\n\\n    function previewWithdraw(uint256 assets) external view returns (uint256);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n\\n    function rewardsCycleEnd() external view returns (uint32);\\n\\n    function rewardsCycleLength() external view returns (uint32);\\n\\n    function syncRewards() external;\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n}\\n\",\"keccak256\":\"0x3ea77b917b13cc2c1f08ffe8bb79314b6eb873ec8314e6082558b18e0989269f\",\"license\":\"MIT\"},\"contracts/interfaces/periphery/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0xb48d57d83e75abecacbd065d3df55ee50eef4998fad94560cb1dbb0644049caa\",\"license\":\"MIT\"},\"contracts/interfaces/periphery/ITokenOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITokenOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n}\\n\",\"keccak256\":\"0x0a458745d97e56d125d348a597133af8572f34a7830c17d91b82cf8229c1492f\",\"license\":\"MIT\"},\"contracts/periphery/tokens/SFraxEthTokenOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/external/frax/ISFrxEth.sol\\\";\\nimport \\\"../../interfaces/external/curve/IFrxEthStableSwap.sol\\\";\\nimport \\\"../../interfaces/periphery/IOracle.sol\\\";\\nimport \\\"../../interfaces/periphery/ITokenOracle.sol\\\";\\n\\n/**\\n * @title Oracle for `sFraxEthToken`\\n * @dev Based on https://etherscan.deth.net/address/0x27942aFe4EcB7F9945168094e0749CAC749aC97B#code\\n */\\ncontract SFraxEthTokenOracle is ITokenOracle {\\n    uint256 public constant MAX_FRXETH_PRICE = 1e18;\\n    uint256 public constant MIN_FRXETH_PRICE = 0.9e18;\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    IFrxEthStableSwap public constant ETH_FRXETH_CURVE_POOL =\\n        IFrxEthStableSwap(0xa1F8A6807c402E4A15ef4EBa36528A3FED24E577);\\n    ISFrxEth public constant SFRXETH = ISFrxEth(0xac3E018457B222d93114458476f3E3416Abbe38F);\\n\\n    /// @inheritdoc ITokenOracle\\n    function getPriceInUsd(address) external view override returns (uint256 _priceInUsd) {\\n        // ETH/USD price from Chainlink\\n        uint256 _ethPriceInUsd = IOracle(msg.sender).getPriceInUsd(WETH);\\n\\n        // FrxETH/ETH price\\n        uint256 _frxEthPriceInEth = ETH_FRXETH_CURVE_POOL.price_oracle();\\n\\n        if (_frxEthPriceInEth > MAX_FRXETH_PRICE) {\\n            _frxEthPriceInEth = MAX_FRXETH_PRICE;\\n        } else if (_frxEthPriceInEth < MIN_FRXETH_PRICE) {\\n            _frxEthPriceInEth = MIN_FRXETH_PRICE;\\n        }\\n\\n        // sFrxETH/FrxETH price from `pricePerShare`\\n        return ((SFRXETH.pricePerShare() * _frxEthPriceInEth * _ethPriceInUsd) / (1e36));\\n    }\\n}\\n\",\"keccak256\":\"0xfb40def306d8ff5ed4b30845b1895da921643b85cea2009dffdcfcb090d25842\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610498806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80636547fcde116100505780636547fcde146100f8578063ad5c464814610107578063d730e3d11461012257600080fd5b806307ee40bf1461007757806335da603d1461009d5780633c4f3f06146100dd575b600080fd5b61008a61008536600461036d565b610131565b6040519081526020015b60405180910390f35b6100b873ac3e018457b222d93114458476f3e3416abbe38f81565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610094565b6100b873a1f8a6807c402e4a15ef4eba36528a3fed24e57781565b61008a670c7d713b49da000081565b6100b873c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b61008a670de0b6b3a764000081565b6040517f07ee40bf00000000000000000000000000000000000000000000000000000000815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26004820152600090819033906307ee40bf9060240160206040518083038186803b15801561019957600080fd5b505afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d191906103aa565b9050600073a1f8a6807c402e4a15ef4eba36528a3fed24e57773ffffffffffffffffffffffffffffffffffffffff166386fc88d36040518163ffffffff1660e01b815260040160206040518083038186803b15801561022f57600080fd5b505afa158015610243573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026791906103aa565b9050670de0b6b3a76400008111156102885750670de0b6b3a76400006102a3565b670c7d713b49da00008110156102a35750670c7d713b49da00005b6ec097ce7bc90715b34b9f1000000000828273ac3e018457b222d93114458476f3e3416abbe38f73ffffffffffffffffffffffffffffffffffffffff166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561030f57600080fd5b505afa158015610323573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034791906103aa565b61035191906103c3565b61035b91906103c3565b6103659190610427565b949350505050565b60006020828403121561037f57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146103a357600080fd5b9392505050565b6000602082840312156103bc57600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610422577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500290565b60008261045d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea264697066735822122030b1cc0c73bbfba75bf2f1c336ab5d24ac030b91d7b9878ee8f15b635a611ef764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80636547fcde116100505780636547fcde146100f8578063ad5c464814610107578063d730e3d11461012257600080fd5b806307ee40bf1461007757806335da603d1461009d5780633c4f3f06146100dd575b600080fd5b61008a61008536600461036d565b610131565b6040519081526020015b60405180910390f35b6100b873ac3e018457b222d93114458476f3e3416abbe38f81565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610094565b6100b873a1f8a6807c402e4a15ef4eba36528a3fed24e57781565b61008a670c7d713b49da000081565b6100b873c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b61008a670de0b6b3a764000081565b6040517f07ee40bf00000000000000000000000000000000000000000000000000000000815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26004820152600090819033906307ee40bf9060240160206040518083038186803b15801561019957600080fd5b505afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d191906103aa565b9050600073a1f8a6807c402e4a15ef4eba36528a3fed24e57773ffffffffffffffffffffffffffffffffffffffff166386fc88d36040518163ffffffff1660e01b815260040160206040518083038186803b15801561022f57600080fd5b505afa158015610243573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026791906103aa565b9050670de0b6b3a76400008111156102885750670de0b6b3a76400006102a3565b670c7d713b49da00008110156102a35750670c7d713b49da00005b6ec097ce7bc90715b34b9f1000000000828273ac3e018457b222d93114458476f3e3416abbe38f73ffffffffffffffffffffffffffffffffffffffff166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561030f57600080fd5b505afa158015610323573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034791906103aa565b61035191906103c3565b61035b91906103c3565b6103659190610427565b949350505050565b60006020828403121561037f57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146103a357600080fd5b9392505050565b6000602082840312156103bc57600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610422577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500290565b60008261045d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea264697066735822122030b1cc0c73bbfba75bf2f1c336ab5d24ac030b91d7b9878ee8f15b635a611ef764736f6c63430008090033",
  "devdoc": {
    "details": "Based on https://etherscan.deth.net/address/0x27942aFe4EcB7F9945168094e0749CAC749aC97B#code",
    "kind": "dev",
    "methods": {
      "getPriceInUsd(address)": {
        "params": {
          "token_": "The address of asset"
        },
        "returns": {
          "_priceInUsd": "The USD price"
        }
      }
    },
    "title": "Oracle for `sFraxEthToken`",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPriceInUsd(address)": {
        "notice": "Get USD (or equivalent) price of an asset"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0x8e4F0E00904D03b2FA805c2B07C436E7A76110Bf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPriceProvidersAggregator",
          "name": "providersAggregator_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxDeviation_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stalePeriod_",
          "type": "uint256"
        },
        {
          "internalType": "enum DataTypes.Provider",
          "name": "fallbackProviderA_",
          "type": "uint8"
        },
        {
          "internalType": "enum DataTypes.Provider",
          "name": "fallbackProviderB_",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum DataTypes.Provider",
          "name": "oldFallbackProviderA",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum DataTypes.Provider",
          "name": "newFallbackProviderA",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum DataTypes.Provider",
          "name": "oldFallbackProviderB",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum DataTypes.Provider",
          "name": "newFallbackProviderB",
          "type": "uint8"
        }
      ],
      "name": "FallbackProvidersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxDeviation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxDeviation",
          "type": "uint256"
        }
      ],
      "name": "MaxDeviationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IPriceProvidersAggregator",
          "name": "oldProvidersAggregator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPriceProvidersAggregator",
          "name": "newProvidersAggregator",
          "type": "address"
        }
      ],
      "name": "ProvidersAggregatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldStalePeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStalePeriod",
          "type": "uint256"
        }
      ],
      "name": "StalePeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackProviderA",
      "outputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackProviderB",
      "outputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDeviation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "providersAggregator",
      "outputs": [
        {
          "internalType": "contract IPriceProvidersAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteTokenToUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteUsdToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stalePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposedGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "fallbackProviderA_",
          "type": "uint8"
        },
        {
          "internalType": "enum DataTypes.Provider",
          "name": "fallbackProviderB_",
          "type": "uint8"
        }
      ],
      "name": "updateFallbackProviders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxDeviation_",
          "type": "uint256"
        }
      ],
      "name": "updateMaxDeviation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceProvidersAggregator",
          "name": "providersAggregator_",
          "type": "address"
        }
      ],
      "name": "updateProvidersAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stalePeriod_",
          "type": "uint256"
        }
      ],
      "name": "updateStalePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x90e3a68de59fe250c2ad66dc82f48e1957c2e0a2feb5e2658df55f7db56fda60",
  "receipt": {
    "to": null,
    "from": "0xF5F5195cF6998c57C651f9f0bBFA7cFC72a6FaC1",
    "contractAddress": "0x8e4F0E00904D03b2FA805c2B07C436E7A76110Bf",
    "transactionIndex": 182,
    "gasUsed": "1375846",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000400000000000000000000000040000000000000000000000000000000020000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000008000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000004000000",
    "blockHash": "0xa7336b5bb7b0c7b8a78ff1fd9e35921c7fc6cfc9ccecba653a1e5053667cc9ee",
    "transactionHash": "0x90e3a68de59fe250c2ad66dc82f48e1957c2e0a2feb5e2658df55f7db56fda60",
    "logs": [
      {
        "transactionIndex": 182,
        "blockNumber": 15230609,
        "transactionHash": "0x90e3a68de59fe250c2ad66dc82f48e1957c2e0a2feb5e2658df55f7db56fda60",
        "address": "0x8e4F0E00904D03b2FA805c2B07C436E7A76110Bf",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5f5195cf6998c57c651f9f0bbfa7cfc72a6fac1"
        ],
        "data": "0x",
        "logIndex": 321,
        "blockHash": "0xa7336b5bb7b0c7b8a78ff1fd9e35921c7fc6cfc9ccecba653a1e5053667cc9ee"
      }
    ],
    "blockNumber": 15230609,
    "cumulativeGasUsed": "15719650",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x32a21eC8ee93971D4b4093C0895FD841c7169a23",
    "50000000000000000",
    14400,
    3,
    4
  ],
  "numDeployments": 1,
  "solcInputHash": "60a21801151c3a578e76024254551efc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPriceProvidersAggregator\",\"name\":\"providersAggregator_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxDeviation_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stalePeriod_\",\"type\":\"uint256\"},{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"fallbackProviderA_\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"fallbackProviderB_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum DataTypes.Provider\",\"name\":\"oldFallbackProviderA\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.Provider\",\"name\":\"newFallbackProviderA\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.Provider\",\"name\":\"oldFallbackProviderB\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.Provider\",\"name\":\"newFallbackProviderB\",\"type\":\"uint8\"}],\"name\":\"FallbackProvidersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxDeviation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDeviation\",\"type\":\"uint256\"}],\"name\":\"MaxDeviationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPriceProvidersAggregator\",\"name\":\"oldProvidersAggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPriceProvidersAggregator\",\"name\":\"newProvidersAggregator\",\"type\":\"address\"}],\"name\":\"ProvidersAggregatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStalePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStalePeriod\",\"type\":\"uint256\"}],\"name\":\"StalePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackProviderA\",\"outputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackProviderB\",\"outputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providersAggregator\",\"outputs\":[{\"internalType\":\"contract IPriceProvidersAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteTokenToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteUsdToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stalePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"fallbackProviderA_\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"fallbackProviderB_\",\"type\":\"uint8\"}],\"name\":\"updateFallbackProviders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDeviation_\",\"type\":\"uint256\"}],\"name\":\"updateMaxDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceProvidersAggregator\",\"name\":\"providersAggregator_\",\"type\":\"address\"}],\"name\":\"updateProvidersAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stalePeriod_\",\"type\":\"uint256\"}],\"name\":\"updateStalePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Uses chainlink as primary oracle, if it doesn't support the asset(s), get price from fallback providers\",\"kind\":\"dev\",\"methods\":{\"acceptGovernorship()\":{\"details\":\"Allows new governor to accept governorship of the contract.\"},\"getPriceInUsd(address)\":{\"params\":{\"token_\":\"The address of asset\"},\"returns\":{\"_priceInUsd\":\"The USD price\"}},\"quote(address,address,uint256)\":{\"params\":{\"amountIn_\":\"Amount of input token\",\"tokenIn_\":\"The address of assetIn\",\"tokenOut_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Amount out\"}},\"quoteTokenToUsd(address,uint256)\":{\"params\":{\"amountIn_\":\"Amount of input token.\",\"token_\":\"The address of assetIn\"},\"returns\":{\"_amountOut\":\"Amount in USD\"}},\"quoteUsdToToken(address,uint256)\":{\"params\":{\"amountIn_\":\"Input amount in USD\",\"token_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Output amount of token\"}},\"transferGovernorship(address)\":{\"details\":\"Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner.\"},\"updateFallbackProviders(uint8,uint8)\":{\"details\":\"The fallback provider B is optional\"}},\"stateVariables\":{\"fallbackProviderB\":{\"details\":\"This is optional\"}},\"title\":\"Chainlink and Fallbacks oracle\",\"version\":1},\"userdoc\":{\"events\":{\"FallbackProvidersUpdated(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when fallback providers are updated\"},\"MaxDeviationUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max deviation is updated\"},\"ProvidersAggregatorUpdated(address,address)\":{\"notice\":\"Emitted when providers aggregator is updated\"},\"StalePeriodUpdated(uint256,uint256)\":{\"notice\":\"Emitted when stale period is updated\"}},\"kind\":\"user\",\"methods\":{\"fallbackProviderA()\":{\"notice\":\"The fallback provider A. It's used when Chainlink isn't available\"},\"fallbackProviderB()\":{\"notice\":\"The fallback provider B. It's used when Chainlink isn't available\"},\"getPriceInUsd(address)\":{\"notice\":\"Get USD (or equivalent) price of an asset\"},\"maxDeviation()\":{\"notice\":\"The max acceptable deviation\"},\"providersAggregator()\":{\"notice\":\"The PriceProvidersAggregator contract\"},\"quote(address,address,uint256)\":{\"notice\":\"Get quote\"},\"quoteTokenToUsd(address,uint256)\":{\"notice\":\"Get quote in USD (or equivalent) amount\"},\"quoteUsdToToken(address,uint256)\":{\"notice\":\"Get quote from USD (or equivalent) amount to amount of token\"},\"stalePeriod()\":{\"notice\":\"The stale period. It's used to determine if a price is invalid (i.e. outdated)\"},\"updateFallbackProviders(uint8,uint8)\":{\"notice\":\"Update fallback providers\"},\"updateMaxDeviation(uint256)\":{\"notice\":\"Update max deviation\"},\"updateProvidersAggregator(address)\":{\"notice\":\"Update PriceProvidersAggregator contract\"},\"updateStalePeriod(uint256)\":{\"notice\":\"Update stale period\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/ChainlinkAndFallbacksOracle.sol\":\"ChainlinkAndFallbacksOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, Context, Initializable {\\n    address public governor;\\n    address private proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Governable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal initializer {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == _msgSender(), \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(proposedGovernor == _msgSender(), \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x57b52a711313030d4d996899be3c248fbfd4ee72b5578d4b427dddb500d668ab\",\"license\":\"MIT\"},\"contracts/features/UsingMaxDeviation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../access/Governable.sol\\\";\\n\\n/**\\n * @title Deviation check feature, useful when checking prices from different providers for the same asset\\n */\\nabstract contract UsingMaxDeviation is Governable {\\n    /**\\n     * @notice The max acceptable deviation\\n     * @dev 18-decimals scale (e.g 1e17 = 10%)\\n     */\\n    uint256 public maxDeviation;\\n\\n    /// @notice Emitted when max deviation is updated\\n    event MaxDeviationUpdated(uint256 oldMaxDeviation, uint256 newMaxDeviation);\\n\\n    constructor(uint256 maxDeviation_) {\\n        maxDeviation = maxDeviation_;\\n    }\\n\\n    /**\\n     * @notice Update max deviation\\n     */\\n    function updateMaxDeviation(uint256 maxDeviation_) external onlyGovernor {\\n        emit MaxDeviationUpdated(maxDeviation, maxDeviation_);\\n        maxDeviation = maxDeviation_;\\n    }\\n\\n    /**\\n     * @notice Check if two numbers deviation is acceptable\\n     */\\n    function _isDeviationOK(uint256 a_, uint256 b_) internal view returns (bool) {\\n        uint256 _deviation = a_ > b_ ? ((a_ - b_) * 1e18) / a_ : ((b_ - a_) * 1e18) / b_;\\n        return _deviation <= maxDeviation;\\n    }\\n}\\n\",\"keccak256\":\"0x8d257840427502e71be4ea430e1ce2eacf22c04469e8f5987d8d652ee27ddf64\",\"license\":\"MIT\"},\"contracts/features/UsingProvidersAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../access/Governable.sol\\\";\\nimport \\\"../interfaces/core/IPriceProvidersAggregator.sol\\\";\\n\\n/**\\n * @title Providers Aggregators usage feature, useful for periphery oracles that need get prices from many providers\\n */\\nabstract contract UsingProvidersAggregator is Governable {\\n    /// @notice The PriceProvidersAggregator contract\\n    IPriceProvidersAggregator public providersAggregator;\\n\\n    /// @notice Emitted when providers aggregator is updated\\n    event ProvidersAggregatorUpdated(\\n        IPriceProvidersAggregator oldProvidersAggregator,\\n        IPriceProvidersAggregator newProvidersAggregator\\n    );\\n\\n    constructor(IPriceProvidersAggregator providersAggregator_) {\\n        require(address(providersAggregator_) != address(0), \\\"aggregator-is-null\\\");\\n        providersAggregator = providersAggregator_;\\n    }\\n\\n    /**\\n     * @notice Update PriceProvidersAggregator contract\\n     */\\n    function updateProvidersAggregator(IPriceProvidersAggregator providersAggregator_) external onlyGovernor {\\n        require(address(providersAggregator_) != address(0), \\\"address-is-null\\\");\\n        emit ProvidersAggregatorUpdated(providersAggregator, providersAggregator_);\\n        providersAggregator = providersAggregator_;\\n    }\\n}\\n\",\"keccak256\":\"0xc7f39a71a4714ab5433fa0fa43e12f722dc77593a7f21f8c8804d538e002bd8a\",\"license\":\"MIT\"},\"contracts/features/UsingStalePeriod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../access/Governable.sol\\\";\\n\\n/**\\n * @title Stale price check feature, useful when checking if prices are fresh enough\\n */\\nabstract contract UsingStalePeriod is Governable {\\n    /// @notice The stale period. It's used to determine if a price is invalid (i.e. outdated)\\n    uint256 public stalePeriod;\\n\\n    /// @notice Emitted when stale period is updated\\n    event StalePeriodUpdated(uint256 oldStalePeriod, uint256 newStalePeriod);\\n\\n    constructor(uint256 stalePeriod_) {\\n        stalePeriod = stalePeriod_;\\n    }\\n\\n    /**\\n     * @notice Update stale period\\n     */\\n    function updateStalePeriod(uint256 stalePeriod_) external onlyGovernor {\\n        emit StalePeriodUpdated(stalePeriod, stalePeriod_);\\n        stalePeriod = stalePeriod_;\\n    }\\n\\n    /**\\n     * @notice Check if a price timestamp is outdated\\n     * @dev Uses default stale period\\n     * @param timeOfLastUpdate_ The price timestamp\\n     * @return true if price is stale (outdated)\\n     */\\n    function _priceIsStale(uint256 timeOfLastUpdate_) internal view returns (bool) {\\n        return _priceIsStale(timeOfLastUpdate_, stalePeriod);\\n    }\\n\\n    /**\\n     * @notice Check if a price timestamp is outdated\\n     * @param timeOfLastUpdate_ The price timestamp\\n     * @param stalePeriod_ The maximum acceptable outdated period\\n     * @return true if price is stale (outdated)\\n     */\\n    function _priceIsStale(uint256 timeOfLastUpdate_, uint256 stalePeriod_) internal view returns (bool) {\\n        return block.timestamp - timeOfLastUpdate_ > stalePeriod_;\\n    }\\n}\\n\",\"keccak256\":\"0xa2aebc0e9bd0a27d1b3a5dc0a932f6b114f2f22e98f6de7ffb8aaba09dd69f0d\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n}\\n\",\"keccak256\":\"0x05e6cf557c19e2f9e439b483ed67e85713c0045dced6133f530003382e9b72d1\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvidersAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"./IPriceProvider.sol\\\";\\n\\n/**\\n * @notice PriceProvidersAggregator interface\\n * @dev Worth noting that the `_lastUpdatedAt` logic depends on the underlying price provider. In summary:\\n * ChainLink: returns the last updated date from the aggregator\\n * UniswapV2: returns the date of the latest pair oracle update\\n * UniswapV3: assumes that the price is always updated (returns block.timestamp)\\n * Flux: returns the last updated date from the aggregator\\n * Umbrella (FCD): returns the last updated date returned from their oracle contract\\n * Umbrella (Passport): returns the date of the latest pallet submission\\n * Anytime that a quote performs more than one query, it uses the oldest date as the `_lastUpdatedAt`.\\n * See more: https://github.com/bloqpriv/one-oracle/issues/64\\n */\\ninterface IPriceProvidersAggregator {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        external\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Provider Providers' mapping\\n     */\\n    function priceProviders(DataTypes.Provider provider_) external view returns (IPriceProvider _priceProvider);\\n\\n    /**\\n     * @notice Get quote\\n     * @param provider_ The price provider to get quote from\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @dev If providers aren't the same, uses native token as \\\"bridge\\\"\\n     * @param providerIn_ The price provider to get quote for the tokenIn\\n     * @param tokenIn_ The address of assetIn\\n     * @param providerOut_ The price provider to get quote for the tokenOut\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        DataTypes.Provider providerIn_,\\n        address tokenIn_,\\n        DataTypes.Provider providerOut_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Set a price provider\\n     * @dev Administrative function\\n     * @param provider_ The provider (from enum)\\n     * @param priceProvider_ The price provider contract\\n     */\\n    function setPriceProvider(DataTypes.Provider provider_, IPriceProvider priceProvider_) external;\\n}\\n\",\"keccak256\":\"0xf1708572db9b1b429856b6f5fc22e5c9a6e98047559f1d29ba854621bf155dc9\",\"license\":\"MIT\"},\"contracts/interfaces/periphery/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0xb48d57d83e75abecacbd065d3df55ee50eef4998fad94560cb1dbb0644049caa\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary DataTypes {\\n    /**\\n     * @notice Price providers enumeration\\n     */\\n    enum Provider {\\n        NONE,\\n        CHAINLINK,\\n        UNISWAP_V3,\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UMBRELLA_FIRST_CLASS,\\n        UMBRELLA_PASSPORT,\\n        FLUX\\n    }\\n\\n    enum ExchangeType {\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UNISWAP_V3\\n    }\\n\\n    enum SwapType {\\n        EXACT_INPUT,\\n        EXACT_OUTPUT\\n    }\\n}\\n\",\"keccak256\":\"0xfafdbf0aa3657f082acf0fba2742fddd38552382646a14193a78782f731dc393\",\"license\":\"MIT\"},\"contracts/periphery/ChainlinkAndFallbacksOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/core/IPriceProvidersAggregator.sol\\\";\\nimport \\\"../interfaces/periphery/IOracle.sol\\\";\\nimport \\\"../features/UsingProvidersAggregator.sol\\\";\\nimport \\\"../features/UsingMaxDeviation.sol\\\";\\nimport \\\"../features/UsingStalePeriod.sol\\\";\\n\\n/**\\n * @title Chainlink and Fallbacks oracle\\n * @dev Uses chainlink as primary oracle, if it doesn't support the asset(s), get price from fallback providers\\n */\\ncontract ChainlinkAndFallbacksOracle is IOracle, UsingProvidersAggregator, UsingMaxDeviation, UsingStalePeriod {\\n    /// @notice The fallback provider A. It's used when Chainlink isn't available\\n    DataTypes.Provider public fallbackProviderA;\\n\\n    /// @notice The fallback provider B. It's used when Chainlink isn't available\\n    /// @dev This is optional\\n    DataTypes.Provider public fallbackProviderB;\\n\\n    /// @notice Emitted when fallback providers are updated\\n    event FallbackProvidersUpdated(\\n        DataTypes.Provider oldFallbackProviderA,\\n        DataTypes.Provider newFallbackProviderA,\\n        DataTypes.Provider oldFallbackProviderB,\\n        DataTypes.Provider newFallbackProviderB\\n    );\\n\\n    constructor(\\n        IPriceProvidersAggregator providersAggregator_,\\n        uint256 maxDeviation_,\\n        uint256 stalePeriod_,\\n        DataTypes.Provider fallbackProviderA_,\\n        DataTypes.Provider fallbackProviderB_\\n    ) UsingProvidersAggregator(providersAggregator_) UsingMaxDeviation(maxDeviation_) UsingStalePeriod(stalePeriod_) {\\n        require(fallbackProviderA_ != DataTypes.Provider.NONE, \\\"fallback-provider-not-set\\\");\\n        fallbackProviderA = fallbackProviderA_;\\n        fallbackProviderB = fallbackProviderB_;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function getPriceInUsd(address _asset) public view virtual returns (uint256 _priceInUsd) {\\n        // 1. Get price from chainlink\\n        uint256 _lastUpdatedAt;\\n        (_priceInUsd, _lastUpdatedAt) = _getPriceInUsd(DataTypes.Provider.CHAINLINK, _asset);\\n\\n        // 2. If price from chainlink is OK return it\\n        if (_priceInUsd > 0 && !_priceIsStale(_lastUpdatedAt)) {\\n            return _priceInUsd;\\n        }\\n\\n        // 3. Get price from fallback A\\n        (uint256 _amountOutA, uint256 _lastUpdatedAtA) = _getPriceInUsd(fallbackProviderA, _asset);\\n\\n        // 4. If price from fallback A is OK and there isn't a fallback B, return price from fallback A\\n        bool _aPriceOK = _amountOutA > 0 && !_priceIsStale(_lastUpdatedAtA);\\n        if (fallbackProviderB == DataTypes.Provider.NONE) {\\n            require(_aPriceOK, \\\"fallback-a-failed\\\");\\n            return _amountOutA;\\n        }\\n\\n        // 5. Get price from fallback B\\n        (uint256 _amountOutB, uint256 _lastUpdatedAtB) = _getPriceInUsd(fallbackProviderB, _asset);\\n\\n        // 6. If only one price from fallbacks is valid, return it\\n        bool _bPriceOK = _amountOutB > 0 && !_priceIsStale(_lastUpdatedAtB);\\n        if (!_bPriceOK && _aPriceOK) {\\n            return _amountOutA;\\n        } else if (_bPriceOK && !_aPriceOK) {\\n            return _amountOutB;\\n        }\\n\\n        // 7. Check fallback prices deviation\\n        require(_aPriceOK && _bPriceOK, \\\"fallbacks-failed\\\");\\n        require(_isDeviationOK(_amountOutA, _amountOutB), \\\"prices-deviation-too-high\\\");\\n\\n        // 8. If deviation is OK, return price from fallback A\\n        return _amountOutA;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) public view virtual returns (uint256 _amountOut) {\\n        // 1. Get price from chainlink\\n        uint256 _lastUpdatedAt;\\n        (_amountOut, _lastUpdatedAt) = _quote(DataTypes.Provider.CHAINLINK, tokenIn_, tokenOut_, amountIn_);\\n\\n        // 2. If price from chainlink is OK return it\\n        if (_amountOut > 0 && !_priceIsStale(_lastUpdatedAt)) {\\n            return _amountOut;\\n        }\\n\\n        // 3. Get price from fallback A\\n        (uint256 _amountOutA, uint256 _lastUpdatedAtA) = _quote(fallbackProviderA, tokenIn_, tokenOut_, amountIn_);\\n\\n        // 4. If price from fallback A is OK and there isn't a fallback B, return price from fallback A\\n        bool _aPriceOK = _amountOutA > 0 && !_priceIsStale(_lastUpdatedAtA);\\n        if (fallbackProviderB == DataTypes.Provider.NONE) {\\n            require(_aPriceOK, \\\"fallback-a-failed\\\");\\n            return _amountOutA;\\n        }\\n\\n        // 5. Get price from fallback B\\n        (uint256 _amountOutB, uint256 _lastUpdatedAtB) = _quote(fallbackProviderB, tokenIn_, tokenOut_, amountIn_);\\n\\n        // 6. If only one price from fallbacks is valid, return it\\n        bool _bPriceOK = _amountOutB > 0 && !_priceIsStale(_lastUpdatedAtB);\\n        if (!_bPriceOK && _aPriceOK) {\\n            return _amountOutA;\\n        } else if (_bPriceOK && !_aPriceOK) {\\n            return _amountOutB;\\n        }\\n\\n        // 7. Check fallback prices deviation\\n        require(_aPriceOK && _bPriceOK, \\\"fallbacks-failed\\\");\\n        require(_isDeviationOK(_amountOutA, _amountOutB), \\\"prices-deviation-too-high\\\");\\n\\n        // 8. If deviation is OK, return price from fallback A\\n        return _amountOutA;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) public view virtual returns (uint256 _amountOut) {\\n        // 1. Get price from chainlink\\n        uint256 _lastUpdatedAt;\\n        (_amountOut, _lastUpdatedAt) = _quoteTokenToUsd(DataTypes.Provider.CHAINLINK, token_, amountIn_);\\n\\n        // 2. If price from chainlink is OK return it\\n        if (_amountOut > 0 && !_priceIsStale(_lastUpdatedAt)) {\\n            return _amountOut;\\n        }\\n\\n        // 3. Get price from fallback A\\n        (uint256 _amountOutA, uint256 _lastUpdatedAtA) = _quoteTokenToUsd(fallbackProviderA, token_, amountIn_);\\n\\n        // 4. If price from fallback A is OK and there isn't a fallback B, return price from fallback A\\n        bool _aPriceOK = _amountOutA > 0 && !_priceIsStale(_lastUpdatedAtA);\\n        if (fallbackProviderB == DataTypes.Provider.NONE) {\\n            require(_aPriceOK, \\\"fallback-a-failed\\\");\\n            return _amountOutA;\\n        }\\n\\n        // 5. Get price from fallback B\\n        (uint256 _amountOutB, uint256 _lastUpdatedAtB) = _quoteTokenToUsd(fallbackProviderB, token_, amountIn_);\\n\\n        // 6. If only one price from fallbacks is valid, return it\\n        bool _bPriceOK = _amountOutB > 0 && !_priceIsStale(_lastUpdatedAtB);\\n        if (!_bPriceOK && _aPriceOK) {\\n            return _amountOutA;\\n        } else if (_bPriceOK && !_aPriceOK) {\\n            return _amountOutB;\\n        }\\n\\n        // 7. Check fallback prices deviation\\n        require(_aPriceOK && _bPriceOK, \\\"fallbacks-failed\\\");\\n        require(_isDeviationOK(_amountOutA, _amountOutB), \\\"prices-deviation-too-high\\\");\\n\\n        // 8. If deviation is OK, return price from fallback A\\n        return _amountOutA;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function quoteUsdToToken(address token_, uint256 amountIn_) public view virtual returns (uint256 _amountOut) {\\n        // 1. Get price from chainlink\\n        uint256 _lastUpdatedAt;\\n        (_amountOut, _lastUpdatedAt) = _quoteUsdToToken(DataTypes.Provider.CHAINLINK, token_, amountIn_);\\n\\n        // 2. If price from chainlink is OK return it\\n        if (_amountOut > 0 && !_priceIsStale(_lastUpdatedAt)) {\\n            return _amountOut;\\n        }\\n\\n        // 3. Get price from fallback A\\n        (uint256 _amountOutA, uint256 _lastUpdatedAtA) = _quoteUsdToToken(fallbackProviderA, token_, amountIn_);\\n\\n        // 4. If price from fallback A is OK and there isn't a fallback B, return price from fallback A\\n        bool _aPriceOK = _amountOutA > 0 && !_priceIsStale(_lastUpdatedAtA);\\n        if (fallbackProviderB == DataTypes.Provider.NONE) {\\n            require(_aPriceOK, \\\"fallback-a-failed\\\");\\n            return _amountOutA;\\n        }\\n\\n        // 5. Get price from fallback B\\n        (uint256 _amountOutB, uint256 _lastUpdatedAtB) = _quoteUsdToToken(fallbackProviderB, token_, amountIn_);\\n\\n        // 6. If only one price from fallbacks is valid, return it\\n        bool _bPriceOK = _amountOutB > 0 && !_priceIsStale(_lastUpdatedAtB);\\n        if (!_bPriceOK && _aPriceOK) {\\n            return _amountOutA;\\n        } else if (_bPriceOK && !_aPriceOK) {\\n            return _amountOutB;\\n        }\\n\\n        // 7. Check fallback prices deviation\\n        require(_aPriceOK && _bPriceOK, \\\"fallbacks-failed\\\");\\n        require(_isDeviationOK(_amountOutA, _amountOutB), \\\"prices-deviation-too-high\\\");\\n\\n        // 8. If deviation is OK, return price from fallback A\\n        return _amountOutA;\\n    }\\n\\n    /**\\n     * @notice Wrapped `getPriceInUsd` function\\n     * @dev Return [0,0] (i.e. invalid quote) if the call reverts\\n     */\\n    function _getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        private\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt)\\n    {\\n        try providersAggregator.getPriceInUsd(provider_, token_) returns (\\n            uint256 __priceInUsd,\\n            uint256 __lastUpdatedAt\\n        ) {\\n            _priceInUsd = __priceInUsd;\\n            _lastUpdatedAt = __lastUpdatedAt;\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Wrapped providers aggregator's `quote` function\\n     * @dev Return [0,0] (i.e. invalid quote) if the call reverts\\n     */\\n    function _quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) private view returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        try providersAggregator.quote(provider_, tokenIn_, tokenOut_, amountIn_) returns (\\n            uint256 __amountOut,\\n            uint256 __lastUpdatedAt\\n        ) {\\n            _amountOut = __amountOut;\\n            _lastUpdatedAt = __lastUpdatedAt;\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Wrapped providers aggregator's `quoteTokenToUsd` function\\n     * @dev Return [0,0] (i.e. invalid quote) if the call reverts\\n     */\\n    function _quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) private view returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        try providersAggregator.quoteTokenToUsd(provider_, token_, amountIn_) returns (\\n            uint256 __amountOut,\\n            uint256 __lastUpdatedAt\\n        ) {\\n            _amountOut = __amountOut;\\n            _lastUpdatedAt = __lastUpdatedAt;\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Wrapped providers aggregator's `quoteUsdToToken` function\\n     * @dev Return [0,0] (i.e. invalid quote) if the call reverts\\n     */\\n    function _quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) private view returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        try providersAggregator.quoteUsdToToken(provider_, token_, amountIn_) returns (\\n            uint256 __amountOut,\\n            uint256 __lastUpdatedAt\\n        ) {\\n            _amountOut = __amountOut;\\n            _lastUpdatedAt = __lastUpdatedAt;\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Update fallback providers\\n     * @dev The fallback provider B is optional\\n     */\\n    function updateFallbackProviders(DataTypes.Provider fallbackProviderA_, DataTypes.Provider fallbackProviderB_)\\n        external\\n        onlyGovernor\\n    {\\n        require(fallbackProviderA_ != DataTypes.Provider.NONE, \\\"fallback-a-is-null\\\");\\n        emit FallbackProvidersUpdated(fallbackProviderA, fallbackProviderA_, fallbackProviderB, fallbackProviderB_);\\n        fallbackProviderA = fallbackProviderA_;\\n        fallbackProviderB = fallbackProviderB_;\\n    }\\n}\\n\",\"keccak256\":\"0x19a737bcb6d0b3b9865f12d399fa46f8b94b04586293c03699ed7fdef7b6dd3e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001841380380620018418339810160408190526200003491620001dc565b8284866000336000805462010000600160b01b031916620100006001600160a01b038416908102919091178255604051929350917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a3506001600160a01b038116620000df5760405162461bcd60e51b81526020600482015260126024820152711859d9dc9959d85d1bdc8b5a5ccb5b9d5b1b60721b60448201526064015b60405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055600355600455600082600a8111156200011c576200011c62000248565b14156200016c5760405162461bcd60e51b815260206004820152601960248201527f66616c6c6261636b2d70726f76696465722d6e6f742d736574000000000000006044820152606401620000d6565b6005805483919060ff1916600183600a8111156200018e576200018e62000248565b02179055506005805482919061ff00191661010083600a811115620001b757620001b762000248565b021790555050505050506200025e565b8051600b8110620001d757600080fd5b919050565b600080600080600060a08688031215620001f557600080fd5b85516001600160a01b03811681146200020d57600080fd5b60208701516040880151919650945092506200022c60608701620001c7565b91506200023c60808701620001c7565b90509295509295909350565b634e487b7160e01b600052602160045260246000fd5b6115d3806200026e6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638d0dba0011610097578063b646638411610066578063b646638414610212578063b6aa515b14610225578063c1a2e32b14610238578063f3b27bc31461024b57600080fd5b80638d0dba00146101d05780638f8e162c146101e3578063a5b36a36146101f6578063b5e9bef5146101ff57600080fd5b80630c340a24116100d35780630c340a24146101765780632a1bab73146101a75780637a679230146101b0578063868de82f146101bd57600080fd5b806302651a2914610105578063028533dd1461011a57806307ee40bf146101425780630bb0b89d14610163575b600080fd5b610118610113366004611282565b610253565b005b60055461012c90610100900460ff1681565b6040516101399190611305565b60405180910390f35b61015561015036600461132b565b6102fa565b604051908152602001610139565b61011861017136600461132b565b610506565b60005461018f906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610139565b61015560035481565b60055461012c9060ff1681565b6101186101cb36600461135c565b61063e565b6101556101de36600461138f565b6107d7565b60025461018f906001600160a01b031681565b61015560045481565b61015561020d36600461138f565b6109ef565b6101556102203660046113bb565b610ae4565b61011861023336600461132b565b610d00565b610118610246366004611282565b610df1565b610118610e93565b6000546001600160a01b03620100009091041633146102b95760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60035460408051918252602082018390527fea7b0359048504e79474eaaa05294b49265fc4e7b0a0c3737aaa22412e90f16e910160405180910390a1600355565b600080610308600184610f93565b90925090508115801590610322575061032081611040565b155b1561032d5750919050565b60055460009081906103429060ff1686610f93565b915091506000808311801561035d575061035b82611040565b155b90506000600554610100900460ff16600a81111561037d5761037d61129b565b14156103da57806103d05760405162461bcd60e51b815260206004820152601160248201527f66616c6c6261636b2d612d6661696c656400000000000000000000000000000060448201526064016102b0565b5090949350505050565b6000806103f6600560019054906101000a900460ff1689610f93565b9150915060008083118015610411575061040f82611040565b155b90508015801561041e5750835b15610430575093979650505050505050565b80801561043b575083155b1561044d575090979650505050505050565b8380156104575750805b6104a35760405162461bcd60e51b815260206004820152601060248201527f66616c6c6261636b732d6661696c65640000000000000000000000000000000060448201526064016102b0565b6104ad868461104e565b6104f95760405162461bcd60e51b815260206004820152601960248201527f7072696365732d646576696174696f6e2d746f6f2d686967680000000000000060448201526064016102b0565b5093979650505050505050565b6000546001600160a01b03620100009091041633146105675760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102b0565b6001600160a01b0381166105bd5760405162461bcd60e51b815260206004820152600f60248201527f616464726573732d69732d6e756c6c000000000000000000000000000000000060448201526064016102b0565b600254604080516001600160a01b03928316815291831660208301527fbcc4066cae087918db8d7695e80f5dc69eb597f904c8d513f27f2d04eed8f7ca910160405180910390a1600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000546001600160a01b036201000090910416331461069f5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102b0565b600082600a8111156106b3576106b361129b565b14156107015760405162461bcd60e51b815260206004820152601260248201527f66616c6c6261636b2d612d69732d6e756c6c000000000000000000000000000060448201526064016102b0565b6005546040517f4eab60c8c5ba1a19c902f9ddbd28319fca0c179916440ef40ba8f2e483d12ef2916107469160ff8083169287926101009091049091169086906113fc565b60405180910390a1600580548391907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183600a81111561078b5761078b61129b565b0217905550600580548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010083600a8111156107ce576107ce61129b565b02179055505050565b6000806107e6600185856110b8565b9092509050811580159061080057506107fe81611040565b155b1561080b57506109e9565b60055460009081906108219060ff1687876110b8565b915091506000808311801561083c575061083a82611040565b155b90506000600554610100900460ff16600a81111561085c5761085c61129b565b14156108bb57806108af5760405162461bcd60e51b815260206004820152601160248201527f66616c6c6261636b2d612d6661696c656400000000000000000000000000000060448201526064016102b0565b829450505050506109e9565b6000806108d8600560019054906101000a900460ff168a8a6110b8565b91509150600080831180156108f357506108f182611040565b155b9050801580156109005750835b1561091457859750505050505050506109e9565b80801561091f575083155b1561093357829750505050505050506109e9565b83801561093d5750805b6109895760405162461bcd60e51b815260206004820152601060248201527f66616c6c6261636b732d6661696c65640000000000000000000000000000000060448201526064016102b0565b610993868461104e565b6109df5760405162461bcd60e51b815260206004820152601960248201527f7072696365732d646576696174696f6e2d746f6f2d686967680000000000000060448201526064016102b0565b5093955050505050505b92915050565b6000806109fe60018585611168565b90925090508115801590610a185750610a1681611040565b155b15610a2357506109e9565b6005546000908190610a399060ff168787611168565b9150915060008083118015610a545750610a5282611040565b155b90506000600554610100900460ff16600a811115610a7457610a7461129b565b1415610ac757806108af5760405162461bcd60e51b815260206004820152601160248201527f66616c6c6261636b2d612d6661696c656400000000000000000000000000000060448201526064016102b0565b6000806108d8600560019054906101000a900460ff168a8a611168565b600080610af460018686866111ba565b90925090508115801590610b0e5750610b0c81611040565b155b15610b195750610cf9565b6005546000908190610b309060ff168888886111ba565b9150915060008083118015610b4b5750610b4982611040565b155b90506000600554610100900460ff16600a811115610b6b57610b6b61129b565b1415610bca5780610bbe5760405162461bcd60e51b815260206004820152601160248201527f66616c6c6261636b2d612d6661696c656400000000000000000000000000000060448201526064016102b0565b82945050505050610cf9565b600080610be8600560019054906101000a900460ff168b8b8b6111ba565b9150915060008083118015610c035750610c0182611040565b155b905080158015610c105750835b15610c245785975050505050505050610cf9565b808015610c2f575083155b15610c435782975050505050505050610cf9565b838015610c4d5750805b610c995760405162461bcd60e51b815260206004820152601060248201527f66616c6c6261636b732d6661696c65640000000000000000000000000000000060448201526064016102b0565b610ca3868461104e565b610cef5760405162461bcd60e51b815260206004820152601960248201527f7072696365732d646576696174696f6e2d746f6f2d686967680000000000000060448201526064016102b0565b5093955050505050505b9392505050565b6000546001600160a01b0362010000909104163314610d615760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102b0565b6001600160a01b038116610db75760405162461bcd60e51b815260206004820152601960248201527f70726f706f7365642d676f7665726e6f722d69732d7a65726f0000000000000060448201526064016102b0565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000546001600160a01b0362010000909104163314610e525760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102b0565b60045460408051918252602082018390527f1dcb97516840282e793e073fe5a34e75c575d63193a3cbed8fa1930b27df4720910160405180910390a1600455565b6001546001600160a01b03163314610eed5760405162461bcd60e51b815260206004820152601960248201527f6e6f742d7468652d70726f706f7365642d676f7665726e6f720000000000000060448201526064016102b0565b600154600080546040516001600160a01b039384169362010000909204909116917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d091a360018054600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166001600160a01b03831662010000021790557fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6002546040517f8285094800000000000000000000000000000000000000000000000000000000815260009182916001600160a01b0390911690638285094890610fe3908790879060040161143a565b604080518083038186803b158015610ffa57600080fd5b505afa92505050801561102a575060408051601f3d908101601f191682019092526110279181019061145e565b60015b61103357611039565b90925090505b9250929050565b60006109e98260045461126d565b600080828411611084578261106385826114b1565b61107590670de0b6b3a76400006114c8565b61107f9190611505565b6110ab565b8361108f84826114b1565b6110a190670de0b6b3a76400006114c8565b6110ab9190611505565b6003541015949350505050565b6002546040517f2b041e3a00000000000000000000000000000000000000000000000000000000815260009182916001600160a01b0390911690632b041e3a9061110a90889088908890600401611540565b604080518083038186803b15801561112157600080fd5b505afa925050508015611151575060408051601f3d908101601f1916820190925261114e9181019061145e565b60015b61115a57611160565b90925090505b935093915050565b6002546040517f777f1be900000000000000000000000000000000000000000000000000000000815260009182916001600160a01b039091169063777f1be99061110a90889088908890600401611540565b6002546040517f037c696a00000000000000000000000000000000000000000000000000000000815260009182916001600160a01b039091169063037c696a9061120e908990899089908990600401611568565b604080518083038186803b15801561122557600080fd5b505afa925050508015611255575060408051601f3d908101601f191682019092526112529181019061145e565b60015b61125e57611264565b90925090505b94509492505050565b60008161127a84426114b1565b119392505050565b60006020828403121561129457600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b8110611301577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b602081016109e982846112ca565b6001600160a01b038116811461132857600080fd5b50565b60006020828403121561133d57600080fd5b8135610cf981611313565b8035600b811061135757600080fd5b919050565b6000806040838503121561136f57600080fd5b61137883611348565b915061138660208401611348565b90509250929050565b600080604083850312156113a257600080fd5b82356113ad81611313565b946020939093013593505050565b6000806000606084860312156113d057600080fd5b83356113db81611313565b925060208401356113eb81611313565b929592945050506040919091013590565b6080810161140a82876112ca565b61141760208301866112ca565b61142460408301856112ca565b61143160608301846112ca565b95945050505050565b6040810161144882856112ca565b6001600160a01b03831660208301529392505050565b6000806040838503121561147157600080fd5b505080516020909101519092909150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156114c3576114c3611482565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561150057611500611482565b500290565b60008261153b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6060810161154e82866112ca565b6001600160a01b0393909316602082015260400152919050565b6080810161157682876112ca565b6001600160a01b03948516602083015292909316604084015260609092019190915291905056fea2646970667358221220d378bb52a1ae46aa83cae8295b9e13f3140403e7cea79272e1c6d20b7a070df864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638d0dba0011610097578063b646638411610066578063b646638414610212578063b6aa515b14610225578063c1a2e32b14610238578063f3b27bc31461024b57600080fd5b80638d0dba00146101d05780638f8e162c146101e3578063a5b36a36146101f6578063b5e9bef5146101ff57600080fd5b80630c340a24116100d35780630c340a24146101765780632a1bab73146101a75780637a679230146101b0578063868de82f146101bd57600080fd5b806302651a2914610105578063028533dd1461011a57806307ee40bf146101425780630bb0b89d14610163575b600080fd5b610118610113366004611282565b610253565b005b60055461012c90610100900460ff1681565b6040516101399190611305565b60405180910390f35b61015561015036600461132b565b6102fa565b604051908152602001610139565b61011861017136600461132b565b610506565b60005461018f906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610139565b61015560035481565b60055461012c9060ff1681565b6101186101cb36600461135c565b61063e565b6101556101de36600461138f565b6107d7565b60025461018f906001600160a01b031681565b61015560045481565b61015561020d36600461138f565b6109ef565b6101556102203660046113bb565b610ae4565b61011861023336600461132b565b610d00565b610118610246366004611282565b610df1565b610118610e93565b6000546001600160a01b03620100009091041633146102b95760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60035460408051918252602082018390527fea7b0359048504e79474eaaa05294b49265fc4e7b0a0c3737aaa22412e90f16e910160405180910390a1600355565b600080610308600184610f93565b90925090508115801590610322575061032081611040565b155b1561032d5750919050565b60055460009081906103429060ff1686610f93565b915091506000808311801561035d575061035b82611040565b155b90506000600554610100900460ff16600a81111561037d5761037d61129b565b14156103da57806103d05760405162461bcd60e51b815260206004820152601160248201527f66616c6c6261636b2d612d6661696c656400000000000000000000000000000060448201526064016102b0565b5090949350505050565b6000806103f6600560019054906101000a900460ff1689610f93565b9150915060008083118015610411575061040f82611040565b155b90508015801561041e5750835b15610430575093979650505050505050565b80801561043b575083155b1561044d575090979650505050505050565b8380156104575750805b6104a35760405162461bcd60e51b815260206004820152601060248201527f66616c6c6261636b732d6661696c65640000000000000000000000000000000060448201526064016102b0565b6104ad868461104e565b6104f95760405162461bcd60e51b815260206004820152601960248201527f7072696365732d646576696174696f6e2d746f6f2d686967680000000000000060448201526064016102b0565b5093979650505050505050565b6000546001600160a01b03620100009091041633146105675760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102b0565b6001600160a01b0381166105bd5760405162461bcd60e51b815260206004820152600f60248201527f616464726573732d69732d6e756c6c000000000000000000000000000000000060448201526064016102b0565b600254604080516001600160a01b03928316815291831660208301527fbcc4066cae087918db8d7695e80f5dc69eb597f904c8d513f27f2d04eed8f7ca910160405180910390a1600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000546001600160a01b036201000090910416331461069f5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102b0565b600082600a8111156106b3576106b361129b565b14156107015760405162461bcd60e51b815260206004820152601260248201527f66616c6c6261636b2d612d69732d6e756c6c000000000000000000000000000060448201526064016102b0565b6005546040517f4eab60c8c5ba1a19c902f9ddbd28319fca0c179916440ef40ba8f2e483d12ef2916107469160ff8083169287926101009091049091169086906113fc565b60405180910390a1600580548391907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183600a81111561078b5761078b61129b565b0217905550600580548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010083600a8111156107ce576107ce61129b565b02179055505050565b6000806107e6600185856110b8565b9092509050811580159061080057506107fe81611040565b155b1561080b57506109e9565b60055460009081906108219060ff1687876110b8565b915091506000808311801561083c575061083a82611040565b155b90506000600554610100900460ff16600a81111561085c5761085c61129b565b14156108bb57806108af5760405162461bcd60e51b815260206004820152601160248201527f66616c6c6261636b2d612d6661696c656400000000000000000000000000000060448201526064016102b0565b829450505050506109e9565b6000806108d8600560019054906101000a900460ff168a8a6110b8565b91509150600080831180156108f357506108f182611040565b155b9050801580156109005750835b1561091457859750505050505050506109e9565b80801561091f575083155b1561093357829750505050505050506109e9565b83801561093d5750805b6109895760405162461bcd60e51b815260206004820152601060248201527f66616c6c6261636b732d6661696c65640000000000000000000000000000000060448201526064016102b0565b610993868461104e565b6109df5760405162461bcd60e51b815260206004820152601960248201527f7072696365732d646576696174696f6e2d746f6f2d686967680000000000000060448201526064016102b0565b5093955050505050505b92915050565b6000806109fe60018585611168565b90925090508115801590610a185750610a1681611040565b155b15610a2357506109e9565b6005546000908190610a399060ff168787611168565b9150915060008083118015610a545750610a5282611040565b155b90506000600554610100900460ff16600a811115610a7457610a7461129b565b1415610ac757806108af5760405162461bcd60e51b815260206004820152601160248201527f66616c6c6261636b2d612d6661696c656400000000000000000000000000000060448201526064016102b0565b6000806108d8600560019054906101000a900460ff168a8a611168565b600080610af460018686866111ba565b90925090508115801590610b0e5750610b0c81611040565b155b15610b195750610cf9565b6005546000908190610b309060ff168888886111ba565b9150915060008083118015610b4b5750610b4982611040565b155b90506000600554610100900460ff16600a811115610b6b57610b6b61129b565b1415610bca5780610bbe5760405162461bcd60e51b815260206004820152601160248201527f66616c6c6261636b2d612d6661696c656400000000000000000000000000000060448201526064016102b0565b82945050505050610cf9565b600080610be8600560019054906101000a900460ff168b8b8b6111ba565b9150915060008083118015610c035750610c0182611040565b155b905080158015610c105750835b15610c245785975050505050505050610cf9565b808015610c2f575083155b15610c435782975050505050505050610cf9565b838015610c4d5750805b610c995760405162461bcd60e51b815260206004820152601060248201527f66616c6c6261636b732d6661696c65640000000000000000000000000000000060448201526064016102b0565b610ca3868461104e565b610cef5760405162461bcd60e51b815260206004820152601960248201527f7072696365732d646576696174696f6e2d746f6f2d686967680000000000000060448201526064016102b0565b5093955050505050505b9392505050565b6000546001600160a01b0362010000909104163314610d615760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102b0565b6001600160a01b038116610db75760405162461bcd60e51b815260206004820152601960248201527f70726f706f7365642d676f7665726e6f722d69732d7a65726f0000000000000060448201526064016102b0565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000546001600160a01b0362010000909104163314610e525760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102b0565b60045460408051918252602082018390527f1dcb97516840282e793e073fe5a34e75c575d63193a3cbed8fa1930b27df4720910160405180910390a1600455565b6001546001600160a01b03163314610eed5760405162461bcd60e51b815260206004820152601960248201527f6e6f742d7468652d70726f706f7365642d676f7665726e6f720000000000000060448201526064016102b0565b600154600080546040516001600160a01b039384169362010000909204909116917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d091a360018054600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166001600160a01b03831662010000021790557fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6002546040517f8285094800000000000000000000000000000000000000000000000000000000815260009182916001600160a01b0390911690638285094890610fe3908790879060040161143a565b604080518083038186803b158015610ffa57600080fd5b505afa92505050801561102a575060408051601f3d908101601f191682019092526110279181019061145e565b60015b61103357611039565b90925090505b9250929050565b60006109e98260045461126d565b600080828411611084578261106385826114b1565b61107590670de0b6b3a76400006114c8565b61107f9190611505565b6110ab565b8361108f84826114b1565b6110a190670de0b6b3a76400006114c8565b6110ab9190611505565b6003541015949350505050565b6002546040517f2b041e3a00000000000000000000000000000000000000000000000000000000815260009182916001600160a01b0390911690632b041e3a9061110a90889088908890600401611540565b604080518083038186803b15801561112157600080fd5b505afa925050508015611151575060408051601f3d908101601f1916820190925261114e9181019061145e565b60015b61115a57611160565b90925090505b935093915050565b6002546040517f777f1be900000000000000000000000000000000000000000000000000000000815260009182916001600160a01b039091169063777f1be99061110a90889088908890600401611540565b6002546040517f037c696a00000000000000000000000000000000000000000000000000000000815260009182916001600160a01b039091169063037c696a9061120e908990899089908990600401611568565b604080518083038186803b15801561122557600080fd5b505afa925050508015611255575060408051601f3d908101601f191682019092526112529181019061145e565b60015b61125e57611264565b90925090505b94509492505050565b60008161127a84426114b1565b119392505050565b60006020828403121561129457600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b8110611301577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b602081016109e982846112ca565b6001600160a01b038116811461132857600080fd5b50565b60006020828403121561133d57600080fd5b8135610cf981611313565b8035600b811061135757600080fd5b919050565b6000806040838503121561136f57600080fd5b61137883611348565b915061138660208401611348565b90509250929050565b600080604083850312156113a257600080fd5b82356113ad81611313565b946020939093013593505050565b6000806000606084860312156113d057600080fd5b83356113db81611313565b925060208401356113eb81611313565b929592945050506040919091013590565b6080810161140a82876112ca565b61141760208301866112ca565b61142460408301856112ca565b61143160608301846112ca565b95945050505050565b6040810161144882856112ca565b6001600160a01b03831660208301529392505050565b6000806040838503121561147157600080fd5b505080516020909101519092909150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156114c3576114c3611482565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561150057611500611482565b500290565b60008261153b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6060810161154e82866112ca565b6001600160a01b0393909316602082015260400152919050565b6080810161157682876112ca565b6001600160a01b03948516602083015292909316604084015260609092019190915291905056fea2646970667358221220d378bb52a1ae46aa83cae8295b9e13f3140403e7cea79272e1c6d20b7a070df864736f6c63430008090033",
  "devdoc": {
    "details": "Uses chainlink as primary oracle, if it doesn't support the asset(s), get price from fallback providers",
    "kind": "dev",
    "methods": {
      "acceptGovernorship()": {
        "details": "Allows new governor to accept governorship of the contract."
      },
      "getPriceInUsd(address)": {
        "params": {
          "token_": "The address of asset"
        },
        "returns": {
          "_priceInUsd": "The USD price"
        }
      },
      "quote(address,address,uint256)": {
        "params": {
          "amountIn_": "Amount of input token",
          "tokenIn_": "The address of assetIn",
          "tokenOut_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Amount out"
        }
      },
      "quoteTokenToUsd(address,uint256)": {
        "params": {
          "amountIn_": "Amount of input token.",
          "token_": "The address of assetIn"
        },
        "returns": {
          "_amountOut": "Amount in USD"
        }
      },
      "quoteUsdToToken(address,uint256)": {
        "params": {
          "amountIn_": "Input amount in USD",
          "token_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Output amount of token"
        }
      },
      "transferGovernorship(address)": {
        "details": "Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner."
      },
      "updateFallbackProviders(uint8,uint8)": {
        "details": "The fallback provider B is optional"
      }
    },
    "stateVariables": {
      "fallbackProviderB": {
        "details": "This is optional"
      }
    },
    "title": "Chainlink and Fallbacks oracle",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FallbackProvidersUpdated(uint8,uint8,uint8,uint8)": {
        "notice": "Emitted when fallback providers are updated"
      },
      "MaxDeviationUpdated(uint256,uint256)": {
        "notice": "Emitted when max deviation is updated"
      },
      "ProvidersAggregatorUpdated(address,address)": {
        "notice": "Emitted when providers aggregator is updated"
      },
      "StalePeriodUpdated(uint256,uint256)": {
        "notice": "Emitted when stale period is updated"
      }
    },
    "kind": "user",
    "methods": {
      "fallbackProviderA()": {
        "notice": "The fallback provider A. It's used when Chainlink isn't available"
      },
      "fallbackProviderB()": {
        "notice": "The fallback provider B. It's used when Chainlink isn't available"
      },
      "getPriceInUsd(address)": {
        "notice": "Get USD (or equivalent) price of an asset"
      },
      "maxDeviation()": {
        "notice": "The max acceptable deviation"
      },
      "providersAggregator()": {
        "notice": "The PriceProvidersAggregator contract"
      },
      "quote(address,address,uint256)": {
        "notice": "Get quote"
      },
      "quoteTokenToUsd(address,uint256)": {
        "notice": "Get quote in USD (or equivalent) amount"
      },
      "quoteUsdToToken(address,uint256)": {
        "notice": "Get quote from USD (or equivalent) amount to amount of token"
      },
      "stalePeriod()": {
        "notice": "The stale period. It's used to determine if a price is invalid (i.e. outdated)"
      },
      "updateFallbackProviders(uint8,uint8)": {
        "notice": "Update fallback providers"
      },
      "updateMaxDeviation(uint256)": {
        "notice": "Update max deviation"
      },
      "updateProvidersAggregator(address)": {
        "notice": "Update PriceProvidersAggregator contract"
      },
      "updateStalePeriod(uint256)": {
        "notice": "Update stale period"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 420,
        "contract": "contracts/periphery/ChainlinkAndFallbacksOracle.sol:ChainlinkAndFallbacksOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 423,
        "contract": "contracts/periphery/ChainlinkAndFallbacksOracle.sol:ChainlinkAndFallbacksOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6513,
        "contract": "contracts/periphery/ChainlinkAndFallbacksOracle.sol:ChainlinkAndFallbacksOracle",
        "label": "governor",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6515,
        "contract": "contracts/periphery/ChainlinkAndFallbacksOracle.sol:ChainlinkAndFallbacksOracle",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11406,
        "contract": "contracts/periphery/ChainlinkAndFallbacksOracle.sol:ChainlinkAndFallbacksOracle",
        "label": "providersAggregator",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceProvidersAggregator)11809"
      },
      {
        "astId": 11319,
        "contract": "contracts/periphery/ChainlinkAndFallbacksOracle.sol:ChainlinkAndFallbacksOracle",
        "label": "maxDeviation",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 11532,
        "contract": "contracts/periphery/ChainlinkAndFallbacksOracle.sol:ChainlinkAndFallbacksOracle",
        "label": "stalePeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 13388,
        "contract": "contracts/periphery/ChainlinkAndFallbacksOracle.sol:ChainlinkAndFallbacksOracle",
        "label": "fallbackProviderA",
        "offset": 0,
        "slot": "5",
        "type": "t_enum(Provider)13013"
      },
      {
        "astId": 13392,
        "contract": "contracts/periphery/ChainlinkAndFallbacksOracle.sol:ChainlinkAndFallbacksOracle",
        "label": "fallbackProviderB",
        "offset": 1,
        "slot": "5",
        "type": "t_enum(Provider)13013"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPriceProvidersAggregator)11809": {
        "encoding": "inplace",
        "label": "contract IPriceProvidersAggregator",
        "numberOfBytes": "20"
      },
      "t_enum(Provider)13013": {
        "encoding": "inplace",
        "label": "enum DataTypes.Provider",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
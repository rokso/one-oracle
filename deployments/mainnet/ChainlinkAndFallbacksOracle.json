{
  "address": "0x60f440B2013Aa8d5CbD389F48E30eA942231449b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxDeviation_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stalePeriod_",
          "type": "uint256"
        },
        {
          "internalType": "enum DataTypes.Provider",
          "name": "fallbackProviderA_",
          "type": "uint8"
        },
        {
          "internalType": "enum DataTypes.Provider",
          "name": "fallbackProviderB_",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum DataTypes.Provider",
          "name": "oldFallbackProviderA",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum DataTypes.Provider",
          "name": "newFallbackProviderA",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum DataTypes.Provider",
          "name": "oldFallbackProviderB",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum DataTypes.Provider",
          "name": "newFallbackProviderB",
          "type": "uint8"
        }
      ],
      "name": "FallbackProvidersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxDeviation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxDeviation",
          "type": "uint256"
        }
      ],
      "name": "MaxDeviationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldStalePeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStalePeriod",
          "type": "uint256"
        }
      ],
      "name": "StalePeriodUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackProviderA",
      "outputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackProviderB",
      "outputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDeviation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteTokenToUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteUsdToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stalePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "fallbackProviderA_",
          "type": "uint8"
        },
        {
          "internalType": "enum DataTypes.Provider",
          "name": "fallbackProviderB_",
          "type": "uint8"
        }
      ],
      "name": "updateFallbackProviders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxDeviation_",
          "type": "uint256"
        }
      ],
      "name": "updateMaxDeviation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stalePeriod_",
          "type": "uint256"
        }
      ],
      "name": "updateStalePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x658244c5cb38bcaf3e2f1dbf71b7a7af7df5958c5d5abc48715a80f5ed7b891f",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x60f440B2013Aa8d5CbD389F48E30eA942231449b",
    "transactionIndex": 5,
    "gasUsed": "1371945",
    "logsBloom": "0x
    "blockHash": "0x555131ff7e0a249909d0f0474995347db298b4df61144f2a2ff414be759cda15",
    "transactionHash": "0x658244c5cb38bcaf3e2f1dbf71b7a7af7df5958c5d5abc48715a80f5ed7b891f",
    "logs": [],
    "blockNumber": 15546239,
    "cumulativeGasUsed": "1616145",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "50000000000000000",
    14400,
    3,
    4
  ],
  "numDeployments": 2,
  "solcInputHash": "8b654c506c10a4071125075f82070c93",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDeviation_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stalePeriod_\",\"type\":\"uint256\"},{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"fallbackProviderA_\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"fallbackProviderB_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum DataTypes.Provider\",\"name\":\"oldFallbackProviderA\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.Provider\",\"name\":\"newFallbackProviderA\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.Provider\",\"name\":\"oldFallbackProviderB\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.Provider\",\"name\":\"newFallbackProviderB\",\"type\":\"uint8\"}],\"name\":\"FallbackProvidersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxDeviation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDeviation\",\"type\":\"uint256\"}],\"name\":\"MaxDeviationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStalePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStalePeriod\",\"type\":\"uint256\"}],\"name\":\"StalePeriodUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackProviderA\",\"outputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackProviderB\",\"outputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteTokenToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteUsdToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stalePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"fallbackProviderA_\",\"type\":\"uint8\"},{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"fallbackProviderB_\",\"type\":\"uint8\"}],\"name\":\"updateFallbackProviders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDeviation_\",\"type\":\"uint256\"}],\"name\":\"updateMaxDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stalePeriod_\",\"type\":\"uint256\"}],\"name\":\"updateStalePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Uses chainlink as primary oracle, if it doesn't support the asset(s), get price from fallback providers\",\"kind\":\"dev\",\"methods\":{\"getPriceInUsd(address)\":{\"params\":{\"token_\":\"The address of asset\"},\"returns\":{\"_priceInUsd\":\"The USD price\"}},\"quote(address,address,uint256)\":{\"params\":{\"amountIn_\":\"Amount of input token\",\"tokenIn_\":\"The address of assetIn\",\"tokenOut_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Amount out\"}},\"quoteTokenToUsd(address,uint256)\":{\"params\":{\"amountIn_\":\"Amount of input token.\",\"token_\":\"The address of assetIn\"},\"returns\":{\"_amountOut\":\"Amount in USD\"}},\"quoteUsdToToken(address,uint256)\":{\"params\":{\"amountIn_\":\"Input amount in USD\",\"token_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Output amount of token\"}},\"updateFallbackProviders(uint8,uint8)\":{\"details\":\"The fallback provider B is optional\"}},\"stateVariables\":{\"fallbackProviderB\":{\"details\":\"This is optional\"}},\"title\":\"Chainlink and Fallbacks oracle\",\"version\":1},\"userdoc\":{\"events\":{\"FallbackProvidersUpdated(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when fallback providers are updated\"},\"MaxDeviationUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max deviation is updated\"},\"StalePeriodUpdated(uint256,uint256)\":{\"notice\":\"Emitted when stale period is updated\"}},\"kind\":\"user\",\"methods\":{\"fallbackProviderA()\":{\"notice\":\"The fallback provider A. It's used when Chainlink isn't available\"},\"fallbackProviderB()\":{\"notice\":\"The fallback provider B. It's used when Chainlink isn't available\"},\"getPriceInUsd(address)\":{\"notice\":\"Get USD (or equivalent) price of an asset\"},\"maxDeviation()\":{\"notice\":\"The max acceptable deviation\"},\"quote(address,address,uint256)\":{\"notice\":\"Get quote\"},\"quoteTokenToUsd(address,uint256)\":{\"notice\":\"Get quote in USD (or equivalent) amount\"},\"quoteUsdToToken(address,uint256)\":{\"notice\":\"Get quote from USD (or equivalent) amount to amount of token\"},\"stalePeriod()\":{\"notice\":\"The stale period. It's used to determine if a price is invalid (i.e. outdated)\"},\"updateFallbackProviders(uint8,uint8)\":{\"notice\":\"Update fallback providers\"},\"updateMaxDeviation(uint256)\":{\"notice\":\"Update max deviation\"},\"updateStalePeriod(uint256)\":{\"notice\":\"Update stale period\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/ChainlinkAndFallbacksOracle.sol\":\"ChainlinkAndFallbacksOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../core/AddressProvider.sol\\\";\\n\\n/**\\n * @notice Contract module which provides access control mechanism, where\\n * the governor account is granted with exclusive access to specific functions.\\n * @dev Uses the AddressProvider to get the governor\\n */\\nabstract contract Governable {\\n    IAddressProvider public constant addressProvider = IAddressProvider(0xfbA0816A81bcAbBf3829bED28618177a2bf0e82A);\\n\\n    /// @dev Throws if called by any account other than the governor.\\n    modifier onlyGovernor() {\\n        require(msg.sender == addressProvider.governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0aeb534826bb8e2428dd859d5cf5eb82664c4de97106a783d8fb92a2a7661e38\",\"license\":\"MIT\"},\"contracts/core/AddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/core/IAddressProvider.sol\\\";\\n\\ncontract AddressProvider is IAddressProvider, Initializable {\\n    /// @notice The governor account\\n    address public governor;\\n\\n    /// @notice The proposed governor account. Becomes the new governor after acceptance\\n    address public proposedGovernor;\\n\\n    /// @notice The PriceProvidersAggregator contract\\n    IPriceProvidersAggregator public override providersAggregator;\\n\\n    /// @notice The StableCoinProvider contract\\n    IStableCoinProvider public override stableCoinProvider;\\n\\n    /// @notice Emitted when providers aggregator is updated\\n    event ProvidersAggregatorUpdated(\\n        IPriceProvidersAggregator oldProvidersAggregator,\\n        IPriceProvidersAggregator newProvidersAggregator\\n    );\\n\\n    /// @notice Emitted when stable coin provider is updated\\n    event StableCoinProviderUpdated(\\n        IStableCoinProvider oldStableCoinProvider,\\n        IStableCoinProvider newStableCoinProvider\\n    );\\n\\n    /// @notice Emitted when governor is updated\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == msg.sender, \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    function initialize(address governor_) external initializer {\\n        governor = governor_;\\n        emit UpdatedGovernor(address(0), governor_);\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(msg.sender == proposedGovernor, \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @notice Update PriceProvidersAggregator contract\\n     */\\n    function updateProvidersAggregator(IPriceProvidersAggregator providersAggregator_) external onlyGovernor {\\n        require(address(providersAggregator_) != address(0), \\\"address-is-null\\\");\\n        emit ProvidersAggregatorUpdated(providersAggregator, providersAggregator_);\\n        providersAggregator = providersAggregator_;\\n    }\\n\\n    /**\\n     * @notice Update StableCoinProvider contract\\n     */\\n    function updateStableCoinProvider(IStableCoinProvider stableCoinProvider_) external onlyGovernor {\\n        emit StableCoinProviderUpdated(stableCoinProvider, stableCoinProvider_);\\n        stableCoinProvider = stableCoinProvider_;\\n    }\\n}\\n\",\"keccak256\":\"0x145bfcd3b2e957400f54636b517e54599fd918fd9e6e368a85e4362677e96ffa\",\"license\":\"MIT\"},\"contracts/features/UsingMaxDeviation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../access/Governable.sol\\\";\\n\\n/**\\n * @title Deviation check feature, useful when checking prices from different providers for the same asset\\n */\\nabstract contract UsingMaxDeviation is Governable {\\n    /**\\n     * @notice The max acceptable deviation\\n     * @dev 18-decimals scale (e.g 1e17 = 10%)\\n     */\\n    uint256 public maxDeviation;\\n\\n    /// @notice Emitted when max deviation is updated\\n    event MaxDeviationUpdated(uint256 oldMaxDeviation, uint256 newMaxDeviation);\\n\\n    constructor(uint256 maxDeviation_) {\\n        maxDeviation = maxDeviation_;\\n    }\\n\\n    /**\\n     * @notice Update max deviation\\n     */\\n    function updateMaxDeviation(uint256 maxDeviation_) external onlyGovernor {\\n        emit MaxDeviationUpdated(maxDeviation, maxDeviation_);\\n        maxDeviation = maxDeviation_;\\n    }\\n\\n    /**\\n     * @notice Check if two numbers deviation is acceptable\\n     */\\n    function _isDeviationOK(uint256 a_, uint256 b_) internal view returns (bool) {\\n        uint256 _deviation = a_ > b_ ? ((a_ - b_) * 1e18) / a_ : ((b_ - a_) * 1e18) / b_;\\n        return _deviation <= maxDeviation;\\n    }\\n}\\n\",\"keccak256\":\"0x8d257840427502e71be4ea430e1ce2eacf22c04469e8f5987d8d652ee27ddf64\",\"license\":\"MIT\"},\"contracts/features/UsingStalePeriod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../access/Governable.sol\\\";\\n\\n/**\\n * @title Stale price check feature, useful when checking if prices are fresh enough\\n */\\nabstract contract UsingStalePeriod is Governable {\\n    /// @notice The stale period. It's used to determine if a price is invalid (i.e. outdated)\\n    uint256 public stalePeriod;\\n\\n    /// @notice Emitted when stale period is updated\\n    event StalePeriodUpdated(uint256 oldStalePeriod, uint256 newStalePeriod);\\n\\n    constructor(uint256 stalePeriod_) {\\n        stalePeriod = stalePeriod_;\\n    }\\n\\n    /**\\n     * @notice Update stale period\\n     */\\n    function updateStalePeriod(uint256 stalePeriod_) external onlyGovernor {\\n        emit StalePeriodUpdated(stalePeriod, stalePeriod_);\\n        stalePeriod = stalePeriod_;\\n    }\\n\\n    /**\\n     * @notice Check if a price timestamp is outdated\\n     * @dev Uses default stale period\\n     * @param timeOfLastUpdate_ The price timestamp\\n     * @return true if price is stale (outdated)\\n     */\\n    function _priceIsStale(uint256 timeOfLastUpdate_) internal view returns (bool) {\\n        return _priceIsStale(timeOfLastUpdate_, stalePeriod);\\n    }\\n\\n    /**\\n     * @notice Check if a price timestamp is outdated\\n     * @param timeOfLastUpdate_ The price timestamp\\n     * @param stalePeriod_ The maximum acceptable outdated period\\n     * @return true if price is stale (outdated)\\n     */\\n    function _priceIsStale(uint256 timeOfLastUpdate_, uint256 stalePeriod_) internal view returns (bool) {\\n        return block.timestamp - timeOfLastUpdate_ > stalePeriod_;\\n    }\\n}\\n\",\"keccak256\":\"0xa2aebc0e9bd0a27d1b3a5dc0a932f6b114f2f22e98f6de7ffb8aaba09dd69f0d\",\"license\":\"MIT\"},\"contracts/interfaces/core/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStableCoinProvider.sol\\\";\\nimport \\\"./IPriceProvidersAggregator.sol\\\";\\n\\ninterface IAddressProvider {\\n    function governor() external view returns (address);\\n\\n    function providersAggregator() external view returns (IPriceProvidersAggregator);\\n\\n    function stableCoinProvider() external view returns (IStableCoinProvider);\\n}\\n\",\"keccak256\":\"0xa17f9e29e3de520c35faa21ddeb139fe73b3663c1ebf83f17b2c0aa00c297cf8\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n}\\n\",\"keccak256\":\"0x05e6cf557c19e2f9e439b483ed67e85713c0045dced6133f530003382e9b72d1\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvidersAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"./IPriceProvider.sol\\\";\\n\\n/**\\n * @notice PriceProvidersAggregator interface\\n * @dev Worth noting that the `_lastUpdatedAt` logic depends on the underlying price provider. In summary:\\n * ChainLink: returns the last updated date from the aggregator\\n * UniswapV2: returns the date of the latest pair oracle update\\n * UniswapV3: assumes that the price is always updated (returns block.timestamp)\\n * Flux: returns the last updated date from the aggregator\\n * Umbrella (FCD): returns the last updated date returned from their oracle contract\\n * Umbrella (Passport): returns the date of the latest pallet submission\\n * Anytime that a quote performs more than one query, it uses the oldest date as the `_lastUpdatedAt`.\\n * See more: https://github.com/bloqpriv/one-oracle/issues/64\\n */\\ninterface IPriceProvidersAggregator {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        external\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Provider Providers' mapping\\n     */\\n    function priceProviders(DataTypes.Provider provider_) external view returns (IPriceProvider _priceProvider);\\n\\n    /**\\n     * @notice Get quote\\n     * @param provider_ The price provider to get quote from\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @dev If providers aren't the same, uses native token as \\\"bridge\\\"\\n     * @param providerIn_ The price provider to get quote for the tokenIn\\n     * @param tokenIn_ The address of assetIn\\n     * @param providerOut_ The price provider to get quote for the tokenOut\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        DataTypes.Provider providerIn_,\\n        address tokenIn_,\\n        DataTypes.Provider providerOut_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Set a price provider\\n     * @dev Administrative function\\n     * @param provider_ The provider (from enum)\\n     * @param priceProvider_ The price provider contract\\n     */\\n    function setPriceProvider(DataTypes.Provider provider_, IPriceProvider priceProvider_) external;\\n}\\n\",\"keccak256\":\"0xf1708572db9b1b429856b6f5fc22e5c9a6e98047559f1d29ba854621bf155dc9\",\"license\":\"MIT\"},\"contracts/interfaces/core/IStableCoinProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStableCoinProvider {\\n    /**\\n     * @notice Return the stable coin if pegged\\n     * @dev Check price relation between both stable coins and revert if peg is too loose\\n     * @return _stableCoin The primary stable coin if pass all checks\\n     */\\n    function getStableCoinIfPegged() external view returns (address _stableCoin);\\n\\n    /**\\n     * @notice Convert given amount of stable coin to USD representation (18 decimals)\\n     */\\n    function toUsdRepresentation(uint256 stableCoinAmount_) external view returns (uint256 _usdAmount);\\n}\\n\",\"keccak256\":\"0x57121c0faef63ea2d06b05048054ffa78d4d3c5734c2dabc1aaa4c5032e194c5\",\"license\":\"MIT\"},\"contracts/interfaces/periphery/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0xb48d57d83e75abecacbd065d3df55ee50eef4998fad94560cb1dbb0644049caa\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary DataTypes {\\n    /**\\n     * @notice Price providers enumeration\\n     */\\n    enum Provider {\\n        NONE,\\n        CHAINLINK,\\n        UNISWAP_V3,\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UMBRELLA_FIRST_CLASS,\\n        UMBRELLA_PASSPORT,\\n        FLUX\\n    }\\n\\n    enum ExchangeType {\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UNISWAP_V3\\n    }\\n\\n    enum SwapType {\\n        EXACT_INPUT,\\n        EXACT_OUTPUT\\n    }\\n}\\n\",\"keccak256\":\"0xfafdbf0aa3657f082acf0fba2742fddd38552382646a14193a78782f731dc393\",\"license\":\"MIT\"},\"contracts/periphery/ChainlinkAndFallbacksOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/core/IPriceProvidersAggregator.sol\\\";\\nimport \\\"../interfaces/periphery/IOracle.sol\\\";\\nimport \\\"../features/UsingMaxDeviation.sol\\\";\\nimport \\\"../features/UsingStalePeriod.sol\\\";\\n\\n/**\\n * @title Chainlink and Fallbacks oracle\\n * @dev Uses chainlink as primary oracle, if it doesn't support the asset(s), get price from fallback providers\\n */\\ncontract ChainlinkAndFallbacksOracle is IOracle, UsingMaxDeviation, UsingStalePeriod {\\n    /// @notice The fallback provider A. It's used when Chainlink isn't available\\n    DataTypes.Provider public fallbackProviderA;\\n\\n    /// @notice The fallback provider B. It's used when Chainlink isn't available\\n    /// @dev This is optional\\n    DataTypes.Provider public fallbackProviderB;\\n\\n    /// @notice Emitted when fallback providers are updated\\n    event FallbackProvidersUpdated(\\n        DataTypes.Provider oldFallbackProviderA,\\n        DataTypes.Provider newFallbackProviderA,\\n        DataTypes.Provider oldFallbackProviderB,\\n        DataTypes.Provider newFallbackProviderB\\n    );\\n\\n    constructor(\\n        uint256 maxDeviation_,\\n        uint256 stalePeriod_,\\n        DataTypes.Provider fallbackProviderA_,\\n        DataTypes.Provider fallbackProviderB_\\n    ) UsingMaxDeviation(maxDeviation_) UsingStalePeriod(stalePeriod_) {\\n        require(fallbackProviderA_ != DataTypes.Provider.NONE, \\\"fallback-provider-not-set\\\");\\n        fallbackProviderA = fallbackProviderA_;\\n        fallbackProviderB = fallbackProviderB_;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function getPriceInUsd(address _asset) public view virtual returns (uint256 _priceInUsd) {\\n        // 1. Get price from chainlink\\n        uint256 _lastUpdatedAt;\\n        (_priceInUsd, _lastUpdatedAt) = _getPriceInUsd(DataTypes.Provider.CHAINLINK, _asset);\\n\\n        // 2. If price from chainlink is OK return it\\n        if (_priceInUsd > 0 && !_priceIsStale(_lastUpdatedAt)) {\\n            return _priceInUsd;\\n        }\\n\\n        // 3. Get price from fallback A\\n        (uint256 _amountOutA, uint256 _lastUpdatedAtA) = _getPriceInUsd(fallbackProviderA, _asset);\\n\\n        // 4. If price from fallback A is OK and there isn't a fallback B, return price from fallback A\\n        bool _aPriceOK = _amountOutA > 0 && !_priceIsStale(_lastUpdatedAtA);\\n        if (fallbackProviderB == DataTypes.Provider.NONE) {\\n            require(_aPriceOK, \\\"fallback-a-failed\\\");\\n            return _amountOutA;\\n        }\\n\\n        // 5. Get price from fallback B\\n        (uint256 _amountOutB, uint256 _lastUpdatedAtB) = _getPriceInUsd(fallbackProviderB, _asset);\\n\\n        // 6. If only one price from fallbacks is valid, return it\\n        bool _bPriceOK = _amountOutB > 0 && !_priceIsStale(_lastUpdatedAtB);\\n        if (!_bPriceOK && _aPriceOK) {\\n            return _amountOutA;\\n        } else if (_bPriceOK && !_aPriceOK) {\\n            return _amountOutB;\\n        }\\n\\n        // 7. Check fallback prices deviation\\n        require(_aPriceOK && _bPriceOK, \\\"fallbacks-failed\\\");\\n        require(_isDeviationOK(_amountOutA, _amountOutB), \\\"prices-deviation-too-high\\\");\\n\\n        // 8. If deviation is OK, return price from fallback A\\n        return _amountOutA;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) public view virtual returns (uint256 _amountOut) {\\n        // 1. Get price from chainlink\\n        uint256 _lastUpdatedAt;\\n        (_amountOut, _lastUpdatedAt) = _quote(DataTypes.Provider.CHAINLINK, tokenIn_, tokenOut_, amountIn_);\\n\\n        // 2. If price from chainlink is OK return it\\n        if (_amountOut > 0 && !_priceIsStale(_lastUpdatedAt)) {\\n            return _amountOut;\\n        }\\n\\n        // 3. Get price from fallback A\\n        (uint256 _amountOutA, uint256 _lastUpdatedAtA) = _quote(fallbackProviderA, tokenIn_, tokenOut_, amountIn_);\\n\\n        // 4. If price from fallback A is OK and there isn't a fallback B, return price from fallback A\\n        bool _aPriceOK = _amountOutA > 0 && !_priceIsStale(_lastUpdatedAtA);\\n        if (fallbackProviderB == DataTypes.Provider.NONE) {\\n            require(_aPriceOK, \\\"fallback-a-failed\\\");\\n            return _amountOutA;\\n        }\\n\\n        // 5. Get price from fallback B\\n        (uint256 _amountOutB, uint256 _lastUpdatedAtB) = _quote(fallbackProviderB, tokenIn_, tokenOut_, amountIn_);\\n\\n        // 6. If only one price from fallbacks is valid, return it\\n        bool _bPriceOK = _amountOutB > 0 && !_priceIsStale(_lastUpdatedAtB);\\n        if (!_bPriceOK && _aPriceOK) {\\n            return _amountOutA;\\n        } else if (_bPriceOK && !_aPriceOK) {\\n            return _amountOutB;\\n        }\\n\\n        // 7. Check fallback prices deviation\\n        require(_aPriceOK && _bPriceOK, \\\"fallbacks-failed\\\");\\n        require(_isDeviationOK(_amountOutA, _amountOutB), \\\"prices-deviation-too-high\\\");\\n\\n        // 8. If deviation is OK, return price from fallback A\\n        return _amountOutA;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) public view virtual returns (uint256 _amountOut) {\\n        // 1. Get price from chainlink\\n        uint256 _lastUpdatedAt;\\n        (_amountOut, _lastUpdatedAt) = _quoteTokenToUsd(DataTypes.Provider.CHAINLINK, token_, amountIn_);\\n\\n        // 2. If price from chainlink is OK return it\\n        if (_amountOut > 0 && !_priceIsStale(_lastUpdatedAt)) {\\n            return _amountOut;\\n        }\\n\\n        // 3. Get price from fallback A\\n        (uint256 _amountOutA, uint256 _lastUpdatedAtA) = _quoteTokenToUsd(fallbackProviderA, token_, amountIn_);\\n\\n        // 4. If price from fallback A is OK and there isn't a fallback B, return price from fallback A\\n        bool _aPriceOK = _amountOutA > 0 && !_priceIsStale(_lastUpdatedAtA);\\n        if (fallbackProviderB == DataTypes.Provider.NONE) {\\n            require(_aPriceOK, \\\"fallback-a-failed\\\");\\n            return _amountOutA;\\n        }\\n\\n        // 5. Get price from fallback B\\n        (uint256 _amountOutB, uint256 _lastUpdatedAtB) = _quoteTokenToUsd(fallbackProviderB, token_, amountIn_);\\n\\n        // 6. If only one price from fallbacks is valid, return it\\n        bool _bPriceOK = _amountOutB > 0 && !_priceIsStale(_lastUpdatedAtB);\\n        if (!_bPriceOK && _aPriceOK) {\\n            return _amountOutA;\\n        } else if (_bPriceOK && !_aPriceOK) {\\n            return _amountOutB;\\n        }\\n\\n        // 7. Check fallback prices deviation\\n        require(_aPriceOK && _bPriceOK, \\\"fallbacks-failed\\\");\\n        require(_isDeviationOK(_amountOutA, _amountOutB), \\\"prices-deviation-too-high\\\");\\n\\n        // 8. If deviation is OK, return price from fallback A\\n        return _amountOutA;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function quoteUsdToToken(address token_, uint256 amountIn_) public view virtual returns (uint256 _amountOut) {\\n        // 1. Get price from chainlink\\n        uint256 _lastUpdatedAt;\\n        (_amountOut, _lastUpdatedAt) = _quoteUsdToToken(DataTypes.Provider.CHAINLINK, token_, amountIn_);\\n\\n        // 2. If price from chainlink is OK return it\\n        if (_amountOut > 0 && !_priceIsStale(_lastUpdatedAt)) {\\n            return _amountOut;\\n        }\\n\\n        // 3. Get price from fallback A\\n        (uint256 _amountOutA, uint256 _lastUpdatedAtA) = _quoteUsdToToken(fallbackProviderA, token_, amountIn_);\\n\\n        // 4. If price from fallback A is OK and there isn't a fallback B, return price from fallback A\\n        bool _aPriceOK = _amountOutA > 0 && !_priceIsStale(_lastUpdatedAtA);\\n        if (fallbackProviderB == DataTypes.Provider.NONE) {\\n            require(_aPriceOK, \\\"fallback-a-failed\\\");\\n            return _amountOutA;\\n        }\\n\\n        // 5. Get price from fallback B\\n        (uint256 _amountOutB, uint256 _lastUpdatedAtB) = _quoteUsdToToken(fallbackProviderB, token_, amountIn_);\\n\\n        // 6. If only one price from fallbacks is valid, return it\\n        bool _bPriceOK = _amountOutB > 0 && !_priceIsStale(_lastUpdatedAtB);\\n        if (!_bPriceOK && _aPriceOK) {\\n            return _amountOutA;\\n        } else if (_bPriceOK && !_aPriceOK) {\\n            return _amountOutB;\\n        }\\n\\n        // 7. Check fallback prices deviation\\n        require(_aPriceOK && _bPriceOK, \\\"fallbacks-failed\\\");\\n        require(_isDeviationOK(_amountOutA, _amountOutB), \\\"prices-deviation-too-high\\\");\\n\\n        // 8. If deviation is OK, return price from fallback A\\n        return _amountOutA;\\n    }\\n\\n    /**\\n     * @notice Wrapped `getPriceInUsd` function\\n     * @dev Return [0,0] (i.e. invalid quote) if the call reverts\\n     */\\n    function _getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        private\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt)\\n    {\\n        try addressProvider.providersAggregator().getPriceInUsd(provider_, token_) returns (\\n            uint256 __priceInUsd,\\n            uint256 __lastUpdatedAt\\n        ) {\\n            _priceInUsd = __priceInUsd;\\n            _lastUpdatedAt = __lastUpdatedAt;\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Wrapped providers aggregator's `quote` function\\n     * @dev Return [0,0] (i.e. invalid quote) if the call reverts\\n     */\\n    function _quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) private view returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        try addressProvider.providersAggregator().quote(provider_, tokenIn_, tokenOut_, amountIn_) returns (\\n            uint256 __amountOut,\\n            uint256 __lastUpdatedAt\\n        ) {\\n            _amountOut = __amountOut;\\n            _lastUpdatedAt = __lastUpdatedAt;\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Wrapped providers aggregator's `quoteTokenToUsd` function\\n     * @dev Return [0,0] (i.e. invalid quote) if the call reverts\\n     */\\n    function _quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) private view returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        try addressProvider.providersAggregator().quoteTokenToUsd(provider_, token_, amountIn_) returns (\\n            uint256 __amountOut,\\n            uint256 __lastUpdatedAt\\n        ) {\\n            _amountOut = __amountOut;\\n            _lastUpdatedAt = __lastUpdatedAt;\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Wrapped providers aggregator's `quoteUsdToToken` function\\n     * @dev Return [0,0] (i.e. invalid quote) if the call reverts\\n     */\\n    function _quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) private view returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        try addressProvider.providersAggregator().quoteUsdToToken(provider_, token_, amountIn_) returns (\\n            uint256 __amountOut,\\n            uint256 __lastUpdatedAt\\n        ) {\\n            _amountOut = __amountOut;\\n            _lastUpdatedAt = __lastUpdatedAt;\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Update fallback providers\\n     * @dev The fallback provider B is optional\\n     */\\n    function updateFallbackProviders(DataTypes.Provider fallbackProviderA_, DataTypes.Provider fallbackProviderB_)\\n        external\\n        onlyGovernor\\n    {\\n        require(fallbackProviderA_ != DataTypes.Provider.NONE, \\\"fallback-a-is-null\\\");\\n        emit FallbackProvidersUpdated(fallbackProviderA, fallbackProviderA_, fallbackProviderB, fallbackProviderB_);\\n        fallbackProviderA = fallbackProviderA_;\\n        fallbackProviderB = fallbackProviderB_;\\n    }\\n}\\n\",\"keccak256\":\"0xf779e80d732e9f94529cb3a6a241d4c3b8b47e7c88ee3f61f44209f18567269b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c8063868de82f11610081578063b5e9bef51161005b578063b5e9bef5146101bc578063b6466384146101cf578063c1a2e32b146101e257600080fd5b8063868de82f1461018d5780638d0dba00146101a0578063a5b36a36146101b357600080fd5b80632954018c116100b25780632954018c146101375780632a1bab73146101775780637a6792301461018057600080fd5b806302651a29146100d9578063028533dd146100ee57806307ee40bf14610116575b600080fd5b6100ec6100e73660046112f8565b6101f5565b005b60025461010090610100900460ff1681565b60405161010d919061137b565b60405180910390f35b6101296101243660046113ae565b610347565b60405190815260200161010d565b61015273fba0816a81bcabbf3829bed28618177a2bf0e82a81565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010d565b61012960005481565b6002546101009060ff1681565b6100ec61019b3660046113df565b610553565b6101296101ae366004611412565b610797565b61012960015481565b6101296101ca366004611412565b6109af565b6101296101dd36600461143e565b610aa4565b6100ec6101f03660046112f8565b610cc0565b73fba0816a81bcabbf3829bed28618177a2bf0e82a73ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561024f57600080fd5b505afa158015610263573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610287919061147f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103065760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60005460408051918252602082018390527fea7b0359048504e79474eaaa05294b49265fc4e7b0a0c3737aaa22412e90f16e910160405180910390a1600055565b600080610355600184610e0d565b9092509050811580159061036f575061036d81610f39565b155b1561037a5750919050565b600254600090819061038f9060ff1686610e0d565b91509150600080831180156103aa57506103a882610f39565b155b90506000600254610100900460ff16600a8111156103ca576103ca611311565b1415610427578061041d5760405162461bcd60e51b815260206004820152601160248201527f66616c6c6261636b2d612d6661696c656400000000000000000000000000000060448201526064016102fd565b5090949350505050565b600080610443600260019054906101000a900460ff1689610e0d565b915091506000808311801561045e575061045c82610f39565b155b90508015801561046b5750835b1561047d575093979650505050505050565b808015610488575083155b1561049a575090979650505050505050565b8380156104a45750805b6104f05760405162461bcd60e51b815260206004820152601060248201527f66616c6c6261636b732d6661696c65640000000000000000000000000000000060448201526064016102fd565b6104fa8684610f47565b6105465760405162461bcd60e51b815260206004820152601960248201527f7072696365732d646576696174696f6e2d746f6f2d686967680000000000000060448201526064016102fd565b5093979650505050505050565b73fba0816a81bcabbf3829bed28618177a2bf0e82a73ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ad57600080fd5b505afa1580156105c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e5919061147f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461065f5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102fd565b600082600a81111561067357610673611311565b14156106c15760405162461bcd60e51b815260206004820152601260248201527f66616c6c6261636b2d612d69732d6e756c6c000000000000000000000000000060448201526064016102fd565b6002546040517f4eab60c8c5ba1a19c902f9ddbd28319fca0c179916440ef40ba8f2e483d12ef2916107069160ff80831692879261010090910490911690869061149c565b60405180910390a1600280548391907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183600a81111561074b5761074b611311565b0217905550600280548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010083600a81111561078e5761078e611311565b02179055505050565b6000806107a660018585610fb1565b909250905081158015906107c057506107be81610f39565b155b156107cb57506109a9565b60025460009081906107e19060ff168787610fb1565b91509150600080831180156107fc57506107fa82610f39565b155b90506000600254610100900460ff16600a81111561081c5761081c611311565b141561087b578061086f5760405162461bcd60e51b815260206004820152601160248201527f66616c6c6261636b2d612d6661696c656400000000000000000000000000000060448201526064016102fd565b829450505050506109a9565b600080610898600260019054906101000a900460ff168a8a610fb1565b91509150600080831180156108b357506108b182610f39565b155b9050801580156108c05750835b156108d457859750505050505050506109a9565b8080156108df575083155b156108f357829750505050505050506109a9565b8380156108fd5750805b6109495760405162461bcd60e51b815260206004820152601060248201527f66616c6c6261636b732d6661696c65640000000000000000000000000000000060448201526064016102fd565b6109538684610f47565b61099f5760405162461bcd60e51b815260206004820152601960248201527f7072696365732d646576696174696f6e2d746f6f2d686967680000000000000060448201526064016102fd565b5093955050505050505b92915050565b6000806109be600185856110e0565b909250905081158015906109d857506109d681610f39565b155b156109e357506109a9565b60025460009081906109f99060ff1687876110e0565b9150915060008083118015610a145750610a1282610f39565b155b90506000600254610100900460ff16600a811115610a3457610a34611311565b1415610a87578061086f5760405162461bcd60e51b815260206004820152601160248201527f66616c6c6261636b2d612d6661696c656400000000000000000000000000000060448201526064016102fd565b600080610898600260019054906101000a900460ff168a8a6110e0565b600080610ab460018686866111b1565b90925090508115801590610ace5750610acc81610f39565b155b15610ad95750610cb9565b6002546000908190610af09060ff168888886111b1565b9150915060008083118015610b0b5750610b0982610f39565b155b90506000600254610100900460ff16600a811115610b2b57610b2b611311565b1415610b8a5780610b7e5760405162461bcd60e51b815260206004820152601160248201527f66616c6c6261636b2d612d6661696c656400000000000000000000000000000060448201526064016102fd565b82945050505050610cb9565b600080610ba8600260019054906101000a900460ff168b8b8b6111b1565b9150915060008083118015610bc35750610bc182610f39565b155b905080158015610bd05750835b15610be45785975050505050505050610cb9565b808015610bef575083155b15610c035782975050505050505050610cb9565b838015610c0d5750805b610c595760405162461bcd60e51b815260206004820152601060248201527f66616c6c6261636b732d6661696c65640000000000000000000000000000000060448201526064016102fd565b610c638684610f47565b610caf5760405162461bcd60e51b815260206004820152601960248201527f7072696365732d646576696174696f6e2d746f6f2d686967680000000000000060448201526064016102fd565b5093955050505050505b9392505050565b73fba0816a81bcabbf3829bed28618177a2bf0e82a73ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1a57600080fd5b505afa158015610d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d52919061147f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dcc5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102fd565b60015460408051918252602082018390527f1dcb97516840282e793e073fe5a34e75c575d63193a3cbed8fa1930b27df4720910160405180910390a1600155565b60008073fba0816a81bcabbf3829bed28618177a2bf0e82a73ffffffffffffffffffffffffffffffffffffffff16638f8e162c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6a57600080fd5b505afa158015610e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea2919061147f565b73ffffffffffffffffffffffffffffffffffffffff16638285094885856040518363ffffffff1660e01b8152600401610edc9291906114da565b604080518083038186803b158015610ef357600080fd5b505afa925050508015610f23575060408051601f3d908101601f19168201909252610f209181019061150b565b60015b610f2c57610f32565b90925090505b9250929050565b60006109a9826001546112e3565b600080828411610f7d5782610f5c858261155e565b610f6e90670de0b6b3a7640000611575565b610f7891906115b2565b610fa4565b83610f88848261155e565b610f9a90670de0b6b3a7640000611575565b610fa491906115b2565b6000541015949350505050565b60008073fba0816a81bcabbf3829bed28618177a2bf0e82a73ffffffffffffffffffffffffffffffffffffffff16638f8e162c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561100e57600080fd5b505afa158015611022573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611046919061147f565b73ffffffffffffffffffffffffffffffffffffffff16632b041e3a8686866040518463ffffffff1660e01b8152600401611082939291906115ed565b604080518083038186803b15801561109957600080fd5b505afa9250505080156110c9575060408051601f3d908101601f191682019092526110c69181019061150b565b60015b6110d2576110d8565b90925090505b935093915050565b60008073fba0816a81bcabbf3829bed28618177a2bf0e82a73ffffffffffffffffffffffffffffffffffffffff16638f8e162c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561113d57600080fd5b505afa158015611151573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611175919061147f565b73ffffffffffffffffffffffffffffffffffffffff1663777f1be98686866040518463ffffffff1660e01b8152600401611082939291906115ed565b60008073fba0816a81bcabbf3829bed28618177a2bf0e82a73ffffffffffffffffffffffffffffffffffffffff16638f8e162c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561120e57600080fd5b505afa158015611222573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611246919061147f565b73ffffffffffffffffffffffffffffffffffffffff1663037c696a878787876040518563ffffffff1660e01b81526004016112849493929190611622565b604080518083038186803b15801561129b57600080fd5b505afa9250505080156112cb575060408051601f3d908101601f191682019092526112c89181019061150b565b60015b6112d4576112da565b90925090505b94509492505050565b6000816112f0844261155e565b119392505050565b60006020828403121561130a57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b8110611377577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b602081016109a98284611340565b73ffffffffffffffffffffffffffffffffffffffff811681146113ab57600080fd5b50565b6000602082840312156113c057600080fd5b8135610cb981611389565b8035600b81106113da57600080fd5b919050565b600080604083850312156113f257600080fd5b6113fb836113cb565b9150611409602084016113cb565b90509250929050565b6000806040838503121561142557600080fd5b823561143081611389565b946020939093013593505050565b60008060006060848603121561145357600080fd5b833561145e81611389565b9250602084013561146e81611389565b929592945050506040919091013590565b60006020828403121561149157600080fd5b8151610cb981611389565b608081016114aa8287611340565b6114b76020830186611340565b6114c46040830185611340565b6114d16060830184611340565b95945050505050565b604081016114e88285611340565b73ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b6000806040838503121561151e57600080fd5b505080516020909101519092909150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156115705761157061152f565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115ad576115ad61152f565b500290565b6000826115e8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b606081016115fb8286611340565b73ffffffffffffffffffffffffffffffffffffffff93909316602082015260400152919050565b608081016116308287611340565b73ffffffffffffffffffffffffffffffffffffffff948516602083015292909316604084015260609092019190915291905056fea2646970667358221220dc6512365f83157570ff8e97ada29b2ebabd0e68f8d415fb0ac6ccfb63f5ad9564736f6c63430008090033",
  "devdoc": {
    "details": "Uses chainlink as primary oracle, if it doesn't support the asset(s), get price from fallback providers",
    "kind": "dev",
    "methods": {
      "getPriceInUsd(address)": {
        "params": {
          "token_": "The address of asset"
        },
        "returns": {
          "_priceInUsd": "The USD price"
        }
      },
      "quote(address,address,uint256)": {
        "params": {
          "amountIn_": "Amount of input token",
          "tokenIn_": "The address of assetIn",
          "tokenOut_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Amount out"
        }
      },
      "quoteTokenToUsd(address,uint256)": {
        "params": {
          "amountIn_": "Amount of input token.",
          "token_": "The address of assetIn"
        },
        "returns": {
          "_amountOut": "Amount in USD"
        }
      },
      "quoteUsdToToken(address,uint256)": {
        "params": {
          "amountIn_": "Input amount in USD",
          "token_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Output amount of token"
        }
      },
      "updateFallbackProviders(uint8,uint8)": {
        "details": "The fallback provider B is optional"
      }
    },
    "stateVariables": {
      "fallbackProviderB": {
        "details": "This is optional"
      }
    },
    "title": "Chainlink and Fallbacks oracle",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FallbackProvidersUpdated(uint8,uint8,uint8,uint8)": {
        "notice": "Emitted when fallback providers are updated"
      },
      "MaxDeviationUpdated(uint256,uint256)": {
        "notice": "Emitted when max deviation is updated"
      },
      "StalePeriodUpdated(uint256,uint256)": {
        "notice": "Emitted when stale period is updated"
      }
    },
    "kind": "user",
    "methods": {
      "fallbackProviderA()": {
        "notice": "The fallback provider A. It's used when Chainlink isn't available"
      },
      "fallbackProviderB()": {
        "notice": "The fallback provider B. It's used when Chainlink isn't available"
      },
      "getPriceInUsd(address)": {
        "notice": "Get USD (or equivalent) price of an asset"
      },
      "maxDeviation()": {
        "notice": "The max acceptable deviation"
      },
      "quote(address,address,uint256)": {
        "notice": "Get quote"
      },
      "quoteTokenToUsd(address,uint256)": {
        "notice": "Get quote in USD (or equivalent) amount"
      },
      "quoteUsdToToken(address,uint256)": {
        "notice": "Get quote from USD (or equivalent) amount to amount of token"
      },
      "stalePeriod()": {
        "notice": "The stale period. It's used to determine if a price is invalid (i.e. outdated)"
      },
      "updateFallbackProviders(uint8,uint8)": {
        "notice": "Update fallback providers"
      },
      "updateMaxDeviation(uint256)": {
        "notice": "Update max deviation"
      },
      "updateStalePeriod(uint256)": {
        "notice": "Update stale period"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11392,
        "contract": "contracts/periphery/ChainlinkAndFallbacksOracle.sol:ChainlinkAndFallbacksOracle",
        "label": "maxDeviation",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 11477,
        "contract": "contracts/periphery/ChainlinkAndFallbacksOracle.sol:ChainlinkAndFallbacksOracle",
        "label": "stalePeriod",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13335,
        "contract": "contracts/periphery/ChainlinkAndFallbacksOracle.sol:ChainlinkAndFallbacksOracle",
        "label": "fallbackProviderA",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(Provider)12995"
      },
      {
        "astId": 13339,
        "contract": "contracts/periphery/ChainlinkAndFallbacksOracle.sol:ChainlinkAndFallbacksOracle",
        "label": "fallbackProviderB",
        "offset": 1,
        "slot": "2",
        "type": "t_enum(Provider)12995"
      }
    ],
    "types": {
      "t_enum(Provider)12995": {
        "encoding": "inplace",
        "label": "enum DataTypes.Provider",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
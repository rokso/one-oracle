{
  "address": "0x21ce811b3EE51344BF9C2D3595dae56960F9b4A3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IExchangeRateRegistry",
          "name": "exchangeRateRegistry_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ONE_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRateRegistry",
      "outputs": [
        {
          "internalType": "contract IExchangeRateRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa82ab2eb53e1bad23e60186b56ebf87133dd360672a727dd0b5eee4dd9059cf6",
  "receipt": {
    "to": null,
    "from": "0xF5F5195cF6998c57C651f9f0bBFA7cFC72a6FaC1",
    "contractAddress": "0x21ce811b3EE51344BF9C2D3595dae56960F9b4A3",
    "transactionIndex": 75,
    "gasUsed": "524943",
    "logsBloom": "0x
    "blockHash": "0x19a91ecea41ad8bd70c5be05e625a2dcd202bef23141bbafa8c7d474f021bc45",
    "transactionHash": "0xa82ab2eb53e1bad23e60186b56ebf87133dd360672a727dd0b5eee4dd9059cf6",
    "logs": [],
    "blockNumber": 18777542,
    "cumulativeGasUsed": "7643039",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBbBe37FE58e9859b6943AC53bDf4d0827f7F0034"
  ],
  "numDeployments": 1,
  "solcInputHash": "e04a8a7ff0f0e4be0e617fa3b289ec90",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IExchangeRateRegistry\",\"name\":\"exchangeRateRegistry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ONE_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateRegistry\",\"outputs\":[{\"internalType\":\"contract IExchangeRateRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Oracle for TBY tokens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPriceInUsd(address)\":{\"notice\":\"Note: Until the maturity, we use the exchange rate to calculate TBY price When it enters the withdraw phase, exchange rate isn't accurate because: 1) Interest rate may vary and that could impact TBY price even after the maturity 2) After the maturity the actual TBY price is the redeemable USDC amount\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/tokens/TBYOracle.sol\":\"TBYOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/interfaces/external/bloom/IBloomPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IBloomPool is IERC20Metadata {\\n    enum State {\\n        Other,\\n        Commit,\\n        ReadyPreHoldSwap,\\n        PendingPreHoldSwap,\\n        Holding,\\n        ReadyPostHoldSwap,\\n        PendingPostHoldSwap,\\n        EmergencyExit,\\n        FinalWithdraw\\n    }\\n\\n    function POOL_PHASE_END() external view returns (uint256);\\n\\n    function state() external view returns (State);\\n\\n    function getDistributionInfo()\\n        external\\n        view\\n        returns (\\n            uint128 borrowerDistribution,\\n            uint128 totalBorrowerShares,\\n            uint128 lenderDistribution,\\n            uint128 totalLenderShares\\n        );\\n\\n    function UNDERLYING_TOKEN() external view returns (IERC20Metadata);\\n}\\n\",\"keccak256\":\"0xe5a19cad044d5d74f8e78900eba9e359c696c2ec725bb8a2cb649d22a1380b47\",\"license\":\"MIT\"},\"contracts/interfaces/external/bloom/IExchangeRateRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IExchangeRateRegistry {\\n    function getExchangeRate(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd4e6c2cec3f774c3a3fd6a8b5c628465b93f366962fbe65f0df60c7226e3ffd7\",\"license\":\"MIT\"},\"contracts/interfaces/periphery/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0xb48d57d83e75abecacbd065d3df55ee50eef4998fad94560cb1dbb0644049caa\",\"license\":\"MIT\"},\"contracts/interfaces/periphery/ITokenOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITokenOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n}\\n\",\"keccak256\":\"0x0a458745d97e56d125d348a597133af8572f34a7830c17d91b82cf8229c1492f\",\"license\":\"MIT\"},\"contracts/periphery/tokens/TBYOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/periphery/ITokenOracle.sol\\\";\\nimport \\\"../../interfaces/periphery/IOracle.sol\\\";\\nimport \\\"../../interfaces/external/bloom/IBloomPool.sol\\\";\\nimport \\\"../../interfaces/external/bloom/IExchangeRateRegistry.sol\\\";\\n\\n/**\\n * @title Oracle for TBY tokens\\n */\\ncontract TBYOracle is ITokenOracle {\\n    uint256 public constant ONE_USD = 1e18;\\n\\n    IExchangeRateRegistry public immutable exchangeRateRegistry;\\n\\n    constructor(IExchangeRateRegistry exchangeRateRegistry_) {\\n        exchangeRateRegistry = exchangeRateRegistry_;\\n    }\\n\\n    /**\\n     * Note: Until the maturity, we use the exchange rate to calculate TBY price\\n     * When it enters the withdraw phase, exchange rate isn't accurate because:\\n     * 1) Interest rate may vary and that could impact TBY price even after the maturity\\n     * 2) After the maturity the actual TBY price is the redeemable USDC amount\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256) {\\n        IBloomPool _tby = IBloomPool(token_);\\n        IERC20Metadata _underlying = _tby.UNDERLYING_TOKEN(); // i.e., USDC\\n        IOracle _masterOracle = IOracle(msg.sender);\\n        uint256 _underlyingPrice = _masterOracle.getPriceInUsd(address(_underlying));\\n\\n        if (_tby.state() == IBloomPool.State.FinalWithdraw) {\\n            (, , uint128 lenderDistribution, uint128 totalLenderShares) = _tby.getDistributionInfo();\\n            uint256 _oneShare = 10 ** _tby.decimals();\\n            uint256 _underlyingAmountPerShare = (_oneShare * lenderDistribution) / totalLenderShares;\\n            return (_underlyingPrice * _underlyingAmountPerShare) / _underlying.decimals();\\n        }\\n\\n        return (_underlyingPrice * exchangeRateRegistry.getExchangeRate(token_)) / ONE_USD;\\n    }\\n}\\n\",\"keccak256\":\"0xede77e3273559a8591487c3d95db18b194179464793e811371a6e785825c2552\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161091a38038061091a83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161088961009160003960008181607101526104d001526108896000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806307ee40bf1461004657806337203c671461006c57806367781c0e146100b8575b600080fd5b61005961005436600461058f565b6100c7565b6040519081526020015b60405180910390f35b6100937f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610063565b610059670de0b6b3a764000081565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff166329db1be66040518163ffffffff1660e01b815260040160206040518083038186803b15801561011557600080fd5b505afa158015610129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014d91906105b3565b6040517f07ee40bf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152909150339060009082906307ee40bf9060240160206040518083038186803b1580156101ba57600080fd5b505afa1580156101ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f291906105d0565b905060088473ffffffffffffffffffffffffffffffffffffffff1663c19d93fb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561023c57600080fd5b505afa158015610250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102749190610618565b6008811115610285576102856105e9565b1415610481576000808573ffffffffffffffffffffffffffffffffffffffff166307ea4c016040518163ffffffff1660e01b815260040160806040518083038186803b1580156102d457600080fd5b505afa1580156102e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030c919061065e565b93509350505060008673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561035a57600080fd5b505afa15801561036e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039291906106b2565b61039d90600a6107ea565b90506000826fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff16836103d291906107f9565b6103dc9190610818565b90508673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561042457600080fd5b505afa158015610438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045c91906106b2565b60ff1661046982876107f9565b6104739190610818565b9a9950505050505050505050565b6040517fefb7601d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152670de0b6b3a7640000917f00000000000000000000000000000000000000000000000000000000000000009091169063efb7601d9060240160206040518083038186803b15801561051457600080fd5b505afa158015610528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054c91906105d0565b61055690836107f9565b6105609190610818565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461058c57600080fd5b50565b6000602082840312156105a157600080fd5b81356105ac8161056a565b9392505050565b6000602082840312156105c557600080fd5b81516105ac8161056a565b6000602082840312156105e257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561062a57600080fd5b8151600981106105ac57600080fd5b80516fffffffffffffffffffffffffffffffff8116811461065957600080fd5b919050565b6000806000806080858703121561067457600080fd5b61067d85610639565b935061068b60208601610639565b925061069960408601610639565b91506106a760608601610639565b905092959194509250565b6000602082840312156106c457600080fd5b815160ff811681146105ac57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b8085111561073f578160001904821115610725576107256106d5565b8085161561073257918102915b93841c9390800290610709565b509250929050565b600082610756575060016107e4565b81610763575060006107e4565b816001811461077957600281146107835761079f565b60019150506107e4565b60ff841115610794576107946106d5565b50506001821b6107e4565b5060208310610133831016604e8410600b84101617156107c2575081810a6107e4565b6107cc8383610704565b80600019048211156107e0576107e06106d5565b0290505b92915050565b60006105ac60ff841683610747565b6000816000190483118215151615610813576108136106d5565b500290565b60008261084e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212200bd92deaf151a39ba86fe5ba8059d697b60cf322989289a8d26cfaf02c831c2064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806307ee40bf1461004657806337203c671461006c57806367781c0e146100b8575b600080fd5b61005961005436600461058f565b6100c7565b6040519081526020015b60405180910390f35b6100937f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610063565b610059670de0b6b3a764000081565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff166329db1be66040518163ffffffff1660e01b815260040160206040518083038186803b15801561011557600080fd5b505afa158015610129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014d91906105b3565b6040517f07ee40bf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152909150339060009082906307ee40bf9060240160206040518083038186803b1580156101ba57600080fd5b505afa1580156101ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f291906105d0565b905060088473ffffffffffffffffffffffffffffffffffffffff1663c19d93fb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561023c57600080fd5b505afa158015610250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102749190610618565b6008811115610285576102856105e9565b1415610481576000808573ffffffffffffffffffffffffffffffffffffffff166307ea4c016040518163ffffffff1660e01b815260040160806040518083038186803b1580156102d457600080fd5b505afa1580156102e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030c919061065e565b93509350505060008673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561035a57600080fd5b505afa15801561036e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039291906106b2565b61039d90600a6107ea565b90506000826fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff16836103d291906107f9565b6103dc9190610818565b90508673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561042457600080fd5b505afa158015610438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045c91906106b2565b60ff1661046982876107f9565b6104739190610818565b9a9950505050505050505050565b6040517fefb7601d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152670de0b6b3a7640000917f00000000000000000000000000000000000000000000000000000000000000009091169063efb7601d9060240160206040518083038186803b15801561051457600080fd5b505afa158015610528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054c91906105d0565b61055690836107f9565b6105609190610818565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461058c57600080fd5b50565b6000602082840312156105a157600080fd5b81356105ac8161056a565b9392505050565b6000602082840312156105c557600080fd5b81516105ac8161056a565b6000602082840312156105e257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561062a57600080fd5b8151600981106105ac57600080fd5b80516fffffffffffffffffffffffffffffffff8116811461065957600080fd5b919050565b6000806000806080858703121561067457600080fd5b61067d85610639565b935061068b60208601610639565b925061069960408601610639565b91506106a760608601610639565b905092959194509250565b6000602082840312156106c457600080fd5b815160ff811681146105ac57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b8085111561073f578160001904821115610725576107256106d5565b8085161561073257918102915b93841c9390800290610709565b509250929050565b600082610756575060016107e4565b81610763575060006107e4565b816001811461077957600281146107835761079f565b60019150506107e4565b60ff841115610794576107946106d5565b50506001821b6107e4565b5060208310610133831016604e8410600b84101617156107c2575081810a6107e4565b6107cc8383610704565b80600019048211156107e0576107e06106d5565b0290505b92915050565b60006105ac60ff841683610747565b6000816000190483118215151615610813576108136106d5565b500290565b60008261084e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212200bd92deaf151a39ba86fe5ba8059d697b60cf322989289a8d26cfaf02c831c2064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Oracle for TBY tokens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPriceInUsd(address)": {
        "notice": "Note: Until the maturity, we use the exchange rate to calculate TBY price When it enters the withdraw phase, exchange rate isn't accurate because: 1) Interest rate may vary and that could impact TBY price even after the maturity 2) After the maturity the actual TBY price is the redeemable USDC amount"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
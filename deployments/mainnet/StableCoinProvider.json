{
  "address": "0xfd5216426B516008137E9b7Ec33D2B0931690773",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "primaryStableCoin_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "secondaryStableCoin_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stalePeriod_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDeviation_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldStalePeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStalePeriod",
          "type": "uint256"
        }
      ],
      "name": "CustomStalePeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldStalePeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStalePeriod",
          "type": "uint256"
        }
      ],
      "name": "DefaultStalePeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxDeviation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxDeviation",
          "type": "uint256"
        }
      ],
      "name": "MaxDeviationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPrimaryStableCoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldSecondaryStableCoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPrimaryStableCoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newSecondaryStableCoin",
          "type": "address"
        }
      ],
      "name": "StableCoinsUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ONE_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USD_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultStalePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStableCoinIfPegged",
      "outputs": [
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDeviation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primaryStableCoin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondaryStableCoin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "stalePeriodOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_stalePeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stableCoinAmount_",
          "type": "uint256"
        }
      ],
      "name": "toUsdRepresentation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_usdAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stalePeriod_",
          "type": "uint256"
        }
      ],
      "name": "updateCustomStalePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stalePeriod_",
          "type": "uint256"
        }
      ],
      "name": "updateDefaultStalePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxDeviation_",
          "type": "uint256"
        }
      ],
      "name": "updateMaxDeviation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "primaryStableCoin_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "secondaryStableCoin_",
          "type": "address"
        }
      ],
      "name": "updateStableCoins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x508c6580d730ab202c57d81296f4a4f6e00f4d8d1ac849ca0e61be4169765d5f",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xfd5216426B516008137E9b7Ec33D2B0931690773",
    "transactionIndex": 3,
    "gasUsed": "1126201",
    "logsBloom": "0x
    "blockHash": "0x439302f5a67fbdad56f8bd24ba40d4dfe6a7aed609d7a5d2b8427c824c922d83",
    "transactionHash": "0x508c6580d730ab202c57d81296f4a4f6e00f4d8d1ac849ca0e61be4169765d5f",
    "logs": [],
    "blockNumber": 15881965,
    "cumulativeGasUsed": "1294206",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
    "0x6B175474E89094C44Da98b954EedeAC495271d0F",
    86400,
    "10000000000000000"
  ],
  "numDeployments": 3,
  "solcInputHash": "631221980a3697b51bca4256d1fd6608",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"primaryStableCoin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondaryStableCoin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stalePeriod_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDeviation_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStalePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStalePeriod\",\"type\":\"uint256\"}],\"name\":\"CustomStalePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStalePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStalePeriod\",\"type\":\"uint256\"}],\"name\":\"DefaultStalePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxDeviation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDeviation\",\"type\":\"uint256\"}],\"name\":\"MaxDeviationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPrimaryStableCoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSecondaryStableCoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPrimaryStableCoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSecondaryStableCoin\",\"type\":\"address\"}],\"name\":\"StableCoinsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USD_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultStalePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStableCoinIfPegged\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryStableCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryStableCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"stalePeriodOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stalePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stableCoinAmount_\",\"type\":\"uint256\"}],\"name\":\"toUsdRepresentation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stalePeriod_\",\"type\":\"uint256\"}],\"name\":\"updateCustomStalePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stalePeriod_\",\"type\":\"uint256\"}],\"name\":\"updateDefaultStalePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDeviation_\",\"type\":\"uint256\"}],\"name\":\"updateMaxDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"primaryStableCoin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondaryStableCoin_\",\"type\":\"address\"}],\"name\":\"updateStableCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract mitigates a de-peg scenario by checking price against two stable coins that should be around 1\",\"kind\":\"dev\",\"methods\":{\"getStableCoinIfPegged()\":{\"details\":\"Check price relation between both stable coins and revert if peg is too loose\",\"returns\":{\"_stableCoin\":\"The primary stable coin if pass all checks\"}},\"updateCustomStalePeriod(address,uint256)\":{\"details\":\"Use `0` as `stalePeriod_` to remove custom stale period\"},\"updateStableCoins(address,address)\":{\"details\":\"Used externally by the governor\"}},\"stateVariables\":{\"primaryStableCoin\":{\"details\":\"Should not be called directly from other contracts, must use `getStableCoinIfPegged`\"},\"secondaryStableCoin\":{\"details\":\"Should not be called directly from other contracts, must use `getStableCoinIfPegged`\"}},\"title\":\"Provide pegged stable coin, useful for getting USD prices reference from DEXes\",\"version\":1},\"userdoc\":{\"events\":{\"CustomStalePeriodUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when custom stale period is updated\"},\"DefaultStalePeriodUpdated(uint256,uint256)\":{\"notice\":\"Emitted when default stale period is updated\"},\"MaxDeviationUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max deviation is updated\"},\"StableCoinsUpdated(address,address,address,address)\":{\"notice\":\"Emitted when stable coin is updated\"}},\"kind\":\"user\",\"methods\":{\"defaultStalePeriod()\":{\"notice\":\"The default stale period. It's used to determine if a price is invalid (i.e. outdated)\"},\"getStableCoinIfPegged()\":{\"notice\":\"Return the stable coin if pegged\"},\"maxDeviation()\":{\"notice\":\"The max acceptable deviation\"},\"primaryStableCoin()\":{\"notice\":\"A stable coin to use as USD price reference\"},\"secondaryStableCoin()\":{\"notice\":\"A secondary stable coin used to check USD-peg against primary\"},\"stalePeriodOf(address)\":{\"notice\":\"Get stale period of a token\"},\"toUsdRepresentation(uint256)\":{\"notice\":\"Convert given amount of stable coin to USD representation (18 decimals)\"},\"updateCustomStalePeriod(address,uint256)\":{\"notice\":\"Update custom stale period\"},\"updateDefaultStalePeriod(uint256)\":{\"notice\":\"Update default stale period\"},\"updateMaxDeviation(uint256)\":{\"notice\":\"Update max deviation\"},\"updateStableCoins(address,address)\":{\"notice\":\"Update stable coin\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/StableCoinProvider.sol\":\"StableCoinProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../core/AddressProvider.sol\\\";\\n\\n/**\\n * @notice Contract module which provides access control mechanism, where\\n * the governor account is granted with exclusive access to specific functions.\\n * @dev Uses the AddressProvider to get the governor\\n */\\nabstract contract Governable {\\n    IAddressProvider public constant addressProvider = IAddressProvider(0xfbA0816A81bcAbBf3829bED28618177a2bf0e82A);\\n\\n    /// @dev Throws if called by any account other than the governor.\\n    modifier onlyGovernor() {\\n        require(msg.sender == addressProvider.governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0aeb534826bb8e2428dd859d5cf5eb82664c4de97106a783d8fb92a2a7661e38\",\"license\":\"MIT\"},\"contracts/core/AddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/core/IAddressProvider.sol\\\";\\n\\ncontract AddressProvider is IAddressProvider, Initializable {\\n    /// @notice The governor account\\n    address public governor;\\n\\n    /// @notice The proposed governor account. Becomes the new governor after acceptance\\n    address public proposedGovernor;\\n\\n    /// @notice The PriceProvidersAggregator contract\\n    IPriceProvidersAggregator public override providersAggregator;\\n\\n    /// @notice The StableCoinProvider contract\\n    IStableCoinProvider public override stableCoinProvider;\\n\\n    /// @notice Emitted when providers aggregator is updated\\n    event ProvidersAggregatorUpdated(\\n        IPriceProvidersAggregator oldProvidersAggregator,\\n        IPriceProvidersAggregator newProvidersAggregator\\n    );\\n\\n    /// @notice Emitted when stable coin provider is updated\\n    event StableCoinProviderUpdated(\\n        IStableCoinProvider oldStableCoinProvider,\\n        IStableCoinProvider newStableCoinProvider\\n    );\\n\\n    /// @notice Emitted when governor is updated\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == msg.sender, \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    function initialize(address governor_) external initializer {\\n        governor = governor_;\\n        emit UpdatedGovernor(address(0), governor_);\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(msg.sender == proposedGovernor, \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @notice Update PriceProvidersAggregator contract\\n     */\\n    function updateProvidersAggregator(IPriceProvidersAggregator providersAggregator_) external onlyGovernor {\\n        require(address(providersAggregator_) != address(0), \\\"address-is-null\\\");\\n        emit ProvidersAggregatorUpdated(providersAggregator, providersAggregator_);\\n        providersAggregator = providersAggregator_;\\n    }\\n\\n    /**\\n     * @notice Update StableCoinProvider contract\\n     */\\n    function updateStableCoinProvider(IStableCoinProvider stableCoinProvider_) external onlyGovernor {\\n        emit StableCoinProviderUpdated(stableCoinProvider, stableCoinProvider_);\\n        stableCoinProvider = stableCoinProvider_;\\n    }\\n}\\n\",\"keccak256\":\"0x145bfcd3b2e957400f54636b517e54599fd918fd9e6e368a85e4362677e96ffa\",\"license\":\"MIT\"},\"contracts/core/StableCoinProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../libraries/OracleHelpers.sol\\\";\\nimport \\\"../interfaces/core/IStableCoinProvider.sol\\\";\\nimport \\\"../features/UsingStalePeriod.sol\\\";\\nimport \\\"../features/UsingMaxDeviation.sol\\\";\\n\\n/**\\n * @title Provide pegged stable coin, useful for getting USD prices reference from DEXes\\n * @dev This contract mitigates a de-peg scenario by checking price against two stable coins that should be around 1\\n */\\ncontract StableCoinProvider is IStableCoinProvider, UsingStalePeriod, UsingMaxDeviation {\\n    using OracleHelpers for uint256;\\n\\n    uint256 public constant USD_DECIMALS = 18;\\n    uint256 public constant ONE_USD = 10**USD_DECIMALS;\\n\\n    /**\\n     * @notice A stable coin to use as USD price reference\\n     * @dev Should not be called directly from other contracts, must use `getStableCoinIfPegged`\\n     */\\n    address public primaryStableCoin;\\n    uint8 private __primaryStableCoinDecimals;\\n\\n    /**\\n     * @notice A secondary stable coin used to check USD-peg against primary\\n     * @dev Should not be called directly from other contracts, must use `getStableCoinIfPegged`\\n     */\\n    address public secondaryStableCoin;\\n    uint8 private __secondaryStableCoinDecimals;\\n\\n    /// @notice Emitted when stable coin is updated\\n    event StableCoinsUpdated(\\n        address oldPrimaryStableCoin,\\n        address oldSecondaryStableCoin,\\n        address newPrimaryStableCoin,\\n        address newSecondaryStableCoin\\n    );\\n\\n    constructor(\\n        address primaryStableCoin_,\\n        address secondaryStableCoin_,\\n        uint256 stalePeriod_,\\n        uint256 maxDeviation_\\n    ) UsingStalePeriod(stalePeriod_) UsingMaxDeviation(maxDeviation_) {\\n        _updateStableCoins(primaryStableCoin_, secondaryStableCoin_);\\n    }\\n\\n    /// @inheritdoc IStableCoinProvider\\n    function getStableCoinIfPegged() external view returns (address _stableCoin) {\\n        // Note: Chainlink supports DAI/USDC/USDT on all chains that we're using\\n        IPriceProvider _chainlink = addressProvider.providersAggregator().priceProviders(DataTypes.Provider.CHAINLINK);\\n\\n        (uint256 _priceInUsd, uint256 _lastUpdatedAt) = _chainlink.getPriceInUsd(primaryStableCoin);\\n\\n        if (!_priceIsStale(primaryStableCoin, _lastUpdatedAt) && _isDeviationOK(_priceInUsd, ONE_USD)) {\\n            return primaryStableCoin;\\n        }\\n\\n        (_priceInUsd, _lastUpdatedAt) = _chainlink.getPriceInUsd(secondaryStableCoin);\\n\\n        require(\\n            !_priceIsStale(secondaryStableCoin, _lastUpdatedAt) && _isDeviationOK(_priceInUsd, ONE_USD),\\n            \\\"stable-prices-invalid\\\"\\n        );\\n\\n        return secondaryStableCoin;\\n    }\\n\\n    /// @inheritdoc IStableCoinProvider\\n    function toUsdRepresentation(uint256 stableCoinAmount_) external view returns (uint256 _usdAmount) {\\n        uint256 _stableCoinDecimals = __primaryStableCoinDecimals;\\n        if (_stableCoinDecimals == USD_DECIMALS) {\\n            return stableCoinAmount_;\\n        }\\n        _usdAmount = stableCoinAmount_.scaleDecimal(_stableCoinDecimals, USD_DECIMALS);\\n    }\\n\\n    /**\\n     * @notice Update the stable coin keeping correct decimals value\\n     * @dev Must have both as set or null\\n     */\\n    function _updateStableCoins(address primaryStableCoin_, address secondaryStableCoin_) private {\\n        require(primaryStableCoin_ != address(0) && secondaryStableCoin_ != address(0), \\\"stable-coins-are-null\\\");\\n        require(primaryStableCoin_ != secondaryStableCoin_, \\\"stable-coins-are-the-same\\\");\\n\\n        // Update both\\n        primaryStableCoin = primaryStableCoin_;\\n        secondaryStableCoin = secondaryStableCoin_;\\n        __primaryStableCoinDecimals = IERC20Metadata(primaryStableCoin_).decimals();\\n        __secondaryStableCoinDecimals = IERC20Metadata(secondaryStableCoin_).decimals();\\n    }\\n\\n    /**\\n     * @notice Update stable coin\\n     * @dev Used externally by the governor\\n     */\\n    function updateStableCoins(address primaryStableCoin_, address secondaryStableCoin_) external onlyGovernor {\\n        emit StableCoinsUpdated(primaryStableCoin, secondaryStableCoin, primaryStableCoin_, secondaryStableCoin_);\\n        _updateStableCoins(primaryStableCoin_, secondaryStableCoin_);\\n    }\\n}\\n\",\"keccak256\":\"0xbab2d248bfc498fdc0015e44e3264669751ce767da595922f7ddbcad095a971e\",\"license\":\"MIT\"},\"contracts/features/UsingMaxDeviation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../access/Governable.sol\\\";\\n\\n/**\\n * @title Deviation check feature, useful when checking prices from different providers for the same asset\\n */\\nabstract contract UsingMaxDeviation is Governable {\\n    /**\\n     * @notice The max acceptable deviation\\n     * @dev 18-decimals scale (e.g 1e17 = 10%)\\n     */\\n    uint256 public maxDeviation;\\n\\n    /// @notice Emitted when max deviation is updated\\n    event MaxDeviationUpdated(uint256 oldMaxDeviation, uint256 newMaxDeviation);\\n\\n    constructor(uint256 maxDeviation_) {\\n        maxDeviation = maxDeviation_;\\n    }\\n\\n    /**\\n     * @notice Update max deviation\\n     */\\n    function updateMaxDeviation(uint256 maxDeviation_) external onlyGovernor {\\n        emit MaxDeviationUpdated(maxDeviation, maxDeviation_);\\n        maxDeviation = maxDeviation_;\\n    }\\n\\n    /**\\n     * @notice Check if two numbers deviation is acceptable\\n     */\\n    function _isDeviationOK(uint256 a_, uint256 b_) internal view returns (bool) {\\n        uint256 _deviation = a_ > b_ ? ((a_ - b_) * 1e18) / a_ : ((b_ - a_) * 1e18) / b_;\\n        return _deviation <= maxDeviation;\\n    }\\n}\\n\",\"keccak256\":\"0x8d257840427502e71be4ea430e1ce2eacf22c04469e8f5987d8d652ee27ddf64\",\"license\":\"MIT\"},\"contracts/features/UsingStalePeriod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../access/Governable.sol\\\";\\n\\n/**\\n * @title Stale price check feature, useful when checking if prices are fresh enough\\n */\\nabstract contract UsingStalePeriod is Governable {\\n    /// @notice The default stale period. It's used to determine if a price is invalid (i.e. outdated)\\n    uint256 public defaultStalePeriod;\\n\\n    /// @notice Custom stale period, used for token that has different stale window (e.g. some stable coins have 24h window)\\n    mapping(address => uint256) customStalePeriod;\\n\\n    /// @notice Emitted when custom stale period is updated\\n    event CustomStalePeriodUpdated(address token, uint256 oldStalePeriod, uint256 newStalePeriod);\\n\\n    /// @notice Emitted when default stale period is updated\\n    event DefaultStalePeriodUpdated(uint256 oldStalePeriod, uint256 newStalePeriod);\\n\\n    constructor(uint256 defaultStalePeriod_) {\\n        defaultStalePeriod = defaultStalePeriod_;\\n    }\\n\\n    /**\\n     * @notice Get stale period of a token\\n     */\\n    function stalePeriodOf(address token_) public view returns (uint256 _stalePeriod) {\\n        _stalePeriod = customStalePeriod[token_];\\n        if (_stalePeriod == 0) {\\n            _stalePeriod = defaultStalePeriod;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if a price timestamp is outdated\\n     * @dev Uses default stale period\\n     * @param timeOfLastUpdate_ The price timestamp\\n     * @return true if price is stale (outdated)\\n     */\\n    function _priceIsStale(address token_, uint256 timeOfLastUpdate_) internal view returns (bool) {\\n        return _priceIsStale(timeOfLastUpdate_, stalePeriodOf(token_));\\n    }\\n\\n    /**\\n     * @notice Check if a price timestamp is outdated\\n     * @param timeOfLastUpdate_ The price timestamp\\n     * @param stalePeriod_ The maximum acceptable outdated period\\n     * @return true if price is stale (outdated)\\n     */\\n    function _priceIsStale(uint256 timeOfLastUpdate_, uint256 stalePeriod_) internal view returns (bool) {\\n        return block.timestamp - timeOfLastUpdate_ > stalePeriod_;\\n    }\\n\\n    /**\\n     * @notice Update custom stale period\\n     * @dev Use `0` as `stalePeriod_` to remove custom stale period\\n     */\\n    function updateCustomStalePeriod(address token_, uint256 stalePeriod_) external onlyGovernor {\\n        require(token_ != address(0), \\\"token-is-null\\\");\\n        emit CustomStalePeriodUpdated(token_, customStalePeriod[token_], stalePeriod_);\\n        if (stalePeriod_ > 0) {\\n            customStalePeriod[token_] = stalePeriod_;\\n        } else {\\n            delete customStalePeriod[token_];\\n        }\\n    }\\n\\n    /**\\n     * @notice Update default stale period\\n     */\\n    function updateDefaultStalePeriod(uint256 stalePeriod_) external onlyGovernor {\\n        emit DefaultStalePeriodUpdated(defaultStalePeriod, stalePeriod_);\\n        defaultStalePeriod = stalePeriod_;\\n    }\\n}\\n\",\"keccak256\":\"0x85104e332bdd5b63110047bc5f448253d01e21fda12f4ec01f6823017a340f84\",\"license\":\"MIT\"},\"contracts/interfaces/core/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStableCoinProvider.sol\\\";\\nimport \\\"./IPriceProvidersAggregator.sol\\\";\\n\\ninterface IAddressProvider {\\n    function governor() external view returns (address);\\n\\n    function providersAggregator() external view returns (IPriceProvidersAggregator);\\n\\n    function stableCoinProvider() external view returns (IStableCoinProvider);\\n}\\n\",\"keccak256\":\"0xa17f9e29e3de520c35faa21ddeb139fe73b3663c1ebf83f17b2c0aa00c297cf8\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n}\\n\",\"keccak256\":\"0x188c27728bd50b187944ef217b58751efd7b8ec3f1ef0d923be82298b2b0af0e\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvidersAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"./IPriceProvider.sol\\\";\\n\\n/**\\n * @notice PriceProvidersAggregator interface\\n * @dev Worth noting that the `_lastUpdatedAt` logic depends on the underlying price provider. In summary:\\n * ChainLink: returns the last updated date from the aggregator\\n * UniswapV2: returns the date of the latest pair oracle update\\n * UniswapV3: assumes that the price is always updated (returns block.timestamp)\\n * Flux: returns the last updated date from the aggregator\\n * Umbrella (FCD): returns the last updated date returned from their oracle contract\\n * Umbrella (Passport): returns the date of the latest pallet submission\\n * Anytime that a quote performs more than one query, it uses the oldest date as the `_lastUpdatedAt`.\\n * See more: https://github.com/bloqpriv/one-oracle/issues/64\\n */\\ninterface IPriceProvidersAggregator {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        external\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Provider Providers' mapping\\n     */\\n    function priceProviders(DataTypes.Provider provider_) external view returns (IPriceProvider _priceProvider);\\n\\n    /**\\n     * @notice Get quote\\n     * @param provider_ The price provider to get quote from\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote\\n     * @dev If providers aren't the same, uses native token as \\\"bridge\\\"\\n     * @param providerIn_ The price provider to get quote for the tokenIn\\n     * @param tokenIn_ The address of assetIn\\n     * @param providerOut_ The price provider to get quote for the tokenOut\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _nativeTokenLastUpdatedAt Last updated timestamp of native token (i.e. WETH) used when providers aren't the same\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        DataTypes.Provider providerIn_,\\n        address tokenIn_,\\n        DataTypes.Provider providerOut_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _nativeTokenLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Set a price provider\\n     * @dev Administrative function\\n     * @param provider_ The provider (from enum)\\n     * @param priceProvider_ The price provider contract\\n     */\\n    function setPriceProvider(DataTypes.Provider provider_, IPriceProvider priceProvider_) external;\\n}\\n\",\"keccak256\":\"0xbd791bd564866a61c6aac64171095a9134dfe9c5173a0ddbe22312a9bdfc9c19\",\"license\":\"MIT\"},\"contracts/interfaces/core/IStableCoinProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStableCoinProvider {\\n    /**\\n     * @notice Return the stable coin if pegged\\n     * @dev Check price relation between both stable coins and revert if peg is too loose\\n     * @return _stableCoin The primary stable coin if pass all checks\\n     */\\n    function getStableCoinIfPegged() external view returns (address _stableCoin);\\n\\n    /**\\n     * @notice Convert given amount of stable coin to USD representation (18 decimals)\\n     */\\n    function toUsdRepresentation(uint256 stableCoinAmount_) external view returns (uint256 _usdAmount);\\n}\\n\",\"keccak256\":\"0x57121c0faef63ea2d06b05048054ffa78d4d3c5734c2dabc1aaa4c5032e194c5\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary DataTypes {\\n    /**\\n     * @notice Price providers enumeration\\n     */\\n    enum Provider {\\n        NONE,\\n        CHAINLINK,\\n        UNISWAP_V3,\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UMBRELLA_FIRST_CLASS,\\n        UMBRELLA_PASSPORT,\\n        FLUX\\n    }\\n\\n    enum ExchangeType {\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UNISWAP_V3,\\n        PANCAKE_SWAP\\n    }\\n\\n    enum SwapType {\\n        EXACT_INPUT,\\n        EXACT_OUTPUT\\n    }\\n}\\n\",\"keccak256\":\"0xd857b923a046012c8e7f105e2040c0d5598917a198932af1ad7683e64a7b15e4\",\"license\":\"MIT\"},\"contracts/libraries/OracleHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\nlibrary OracleHelpers {\\n    function scaleDecimal(\\n        uint256 amount,\\n        uint256 _fromDecimal,\\n        uint256 _toDecimal\\n    ) internal pure returns (uint256) {\\n        if (_fromDecimal > _toDecimal) {\\n            return amount / (10**(_fromDecimal - _toDecimal));\\n        } else if (_fromDecimal < _toDecimal) {\\n            return amount * (10**(_toDecimal - _fromDecimal));\\n        }\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x71369b3bc9c20980926adabd4a669f9156000486e660592cee89b22fb73f0f5c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200146e3803806200146e833981016040819052620000349162000292565b600082905560028190556200004a848462000054565b5050505062000306565b6001600160a01b038216158015906200007557506001600160a01b03811615155b620000c75760405162461bcd60e51b815260206004820152601560248201527f737461626c652d636f696e732d6172652d6e756c6c000000000000000000000060448201526064015b60405180910390fd5b806001600160a01b0316826001600160a01b031614156200012b5760405162461bcd60e51b815260206004820152601960248201527f737461626c652d636f696e732d6172652d7468652d73616d65000000000000006044820152606401620000be565b600380546001600160a01b038085166001600160a01b0319928316811790935560048054918516919092161781556040805163313ce56760e01b8152905163313ce56792828101926020929190829003018186803b1580156200018d57600080fd5b505afa158015620001a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c89190620002da565b600360146101000a81548160ff021916908360ff160217905550806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200021c57600080fd5b505afa15801562000231573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002579190620002da565b600460146101000a81548160ff021916908360ff1602179055505050565b80516001600160a01b03811681146200028d57600080fd5b919050565b60008060008060808587031215620002a957600080fd5b620002b48562000275565b9350620002c46020860162000275565b6040860151606090960151949790965092505050565b600060208284031215620002ed57600080fd5b815160ff81168114620002ff57600080fd5b9392505050565b61115880620003166000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637cf295a01161008c578063c1c2d92c11610066578063c1c2d92c146101b7578063cafe465f146101ca578063d101186f146101d3578063ec8969bf146101e657600080fd5b80637cf295a01461018957806384537f0e1461019c578063ba55f5c1146101a457600080fd5b80632f6ee695116100c85780632f6ee6951461015357806367781c0e1461015b5780636ad7e14b146101635780637587d2491461017657600080fd5b806302651a29146100ef5780632954018c146101045780632a1bab731461013c575b600080fd5b6101026100fd366004610e3a565b6101f9565b005b61011f73fba0816a81bcabbf3829bed28618177a2bf0e82a81565b6040516001600160a01b0390911681526020015b60405180910390f35b61014560025481565b604051908152602001610133565b610145601281565b610145610324565b610102610171366004610e3a565b610333565b60035461011f906001600160a01b031681565b610102610197366004610e6b565b610459565b61011f61062d565b6101456101b2366004610e3a565b610948565b60045461011f906001600160a01b031681565b61014560005481565b6101026101e1366004610e97565b61098c565b6101456101f4366004610ed0565b610ad6565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561024657600080fd5b505afa15801561025a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027e9190610eed565b6001600160a01b0316336001600160a01b0316146102e35760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60025460408051918252602082018390527fea7b0359048504e79474eaaa05294b49265fc4e7b0a0c3737aaa22412e90f16e910160405180910390a1600255565b6103306012600a61101d565b81565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561038057600080fd5b505afa158015610394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b89190610eed565b6001600160a01b0316336001600160a01b0316146104185760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102da565b60005460408051918252602082018390527f2298ab1c5c06d8c35fa98988c0f4a11eabd87ee1f630d5633b8eef025c4fba5c910160405180910390a1600055565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a657600080fd5b505afa1580156104ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104de9190610eed565b6001600160a01b0316336001600160a01b03161461053e5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102da565b6001600160a01b0382166105945760405162461bcd60e51b815260206004820152600d60248201527f746f6b656e2d69732d6e756c6c0000000000000000000000000000000000000060448201526064016102da565b6001600160a01b0382166000818152600160209081526040918290205482519384529083015281018290527ff8186f97b3fdb2550b9756b668187a5196e4e023b0090dcdf93bfbb2999fae549060600160405180910390a1801561060f576001600160a01b0391909116600090815260016020526040902055565b6001600160a01b0382166000908152600160205260408120555b5050565b60008073fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316638f8e162c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561067d57600080fd5b505afa158015610691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b59190610eed565b6001600160a01b031663c6222eba60016040518263ffffffff1660e01b81526004016106e19190611029565b60206040518083038186803b1580156106f957600080fd5b505afa15801561070d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107319190610eed565b6003546040517f07ee40bf0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015291925060009182918416906307ee40bf90602401604080518083038186803b15801561079557600080fd5b505afa1580156107a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cd919061106a565b60035491935091506107e8906001600160a01b031682610afe565b1580156108055750610805826108006012600a61101d565b610b1b565b1561081e5750506003546001600160a01b031692915050565b600480546040517f07ee40bf0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216928101929092528416906307ee40bf90602401604080518083038186803b15801561087d57600080fd5b505afa158015610891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b5919061106a565b60045491935091506108d0906001600160a01b031682610afe565b1580156108e857506108e8826108006012600a61101d565b6109345760405162461bcd60e51b815260206004820152601560248201527f737461626c652d7072696365732d696e76616c6964000000000000000000000060448201526064016102da565b50506004546001600160a01b031692915050565b60035460009074010000000000000000000000000000000000000000900460ff166012811415610979575090919050565b61098583826012610b85565b9392505050565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156109d957600080fd5b505afa1580156109ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a119190610eed565b6001600160a01b0316336001600160a01b031614610a715760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102da565b600354600454604080516001600160a01b03938416815291831660208301528483169082015290821660608201527f9185a6f8d50cdc8134346b06fb9eac02c0f5421c392c04ee54d363036db1add59060800160405180910390a16106298282610be4565b6001600160a01b03811660009081526001602052604090205480610af957506000545b919050565b6000610b1282610b0d85610ad6565b610e25565b90505b92915050565b600080828411610b515782610b30858261108e565b610b4290670de0b6b3a76400006110a5565b610b4c91906110c4565b610b78565b83610b5c848261108e565b610b6e90670de0b6b3a76400006110a5565b610b7891906110c4565b6002541015949350505050565b600081831115610bb557610b99828461108e565b610ba490600a61101d565b610bae90856110c4565b9050610985565b81831015610bdc57610bc7838361108e565b610bd290600a61101d565b610bae90856110a5565b509192915050565b6001600160a01b03821615801590610c0457506001600160a01b03811615155b610c505760405162461bcd60e51b815260206004820152601560248201527f737461626c652d636f696e732d6172652d6e756c6c000000000000000000000060448201526064016102da565b806001600160a01b0316826001600160a01b03161415610cb25760405162461bcd60e51b815260206004820152601960248201527f737461626c652d636f696e732d6172652d7468652d73616d650000000000000060448201526064016102da565b600380546001600160a01b038085167fffffffffffffffffffffffff000000000000000000000000000000000000000092831681179093556004805491851691909216178155604080517f313ce567000000000000000000000000000000000000000000000000000000008152905163313ce56792828101926020929190829003018186803b158015610d4457600080fd5b505afa158015610d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7c91906110ff565b600360146101000a81548160ff021916908360ff160217905550806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcf57600080fd5b505afa158015610de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0791906110ff565b600460146101000a81548160ff021916908360ff1602179055505050565b600081610e32844261108e565b119392505050565b600060208284031215610e4c57600080fd5b5035919050565b6001600160a01b0381168114610e6857600080fd5b50565b60008060408385031215610e7e57600080fd5b8235610e8981610e53565b946020939093013593505050565b60008060408385031215610eaa57600080fd5b8235610eb581610e53565b91506020830135610ec581610e53565b809150509250929050565b600060208284031215610ee257600080fd5b813561098581610e53565b600060208284031215610eff57600080fd5b815161098581610e53565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b80851115610f74578160001904821115610f5a57610f5a610f0a565b80851615610f6757918102915b93841c9390800290610f3e565b509250929050565b600082610f8b57506001610b15565b81610f9857506000610b15565b8160018114610fae5760028114610fb857610fd4565b6001915050610b15565b60ff841115610fc957610fc9610f0a565b50506001821b610b15565b5060208310610133831016604e8410600b8410161715610ff7575081810a610b15565b6110018383610f39565b806000190482111561101557611015610f0a565b029392505050565b6000610b128383610f7c565b60208101600b8310611064577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000806040838503121561107d57600080fd5b505080516020909101519092909150565b6000828210156110a0576110a0610f0a565b500390565b60008160001904831182151516156110bf576110bf610f0a565b500290565b6000826110fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561111157600080fd5b815160ff8116811461098557600080fdfea26469706673582212206b926927405a2539d16fe268ff4f2357bc73c2b84fd42878da635f079eeadb2d64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "This contract mitigates a de-peg scenario by checking price against two stable coins that should be around 1",
    "kind": "dev",
    "methods": {
      "getStableCoinIfPegged()": {
        "details": "Check price relation between both stable coins and revert if peg is too loose",
        "returns": {
          "_stableCoin": "The primary stable coin if pass all checks"
        }
      },
      "updateCustomStalePeriod(address,uint256)": {
        "details": "Use `0` as `stalePeriod_` to remove custom stale period"
      },
      "updateStableCoins(address,address)": {
        "details": "Used externally by the governor"
      }
    },
    "stateVariables": {
      "primaryStableCoin": {
        "details": "Should not be called directly from other contracts, must use `getStableCoinIfPegged`"
      },
      "secondaryStableCoin": {
        "details": "Should not be called directly from other contracts, must use `getStableCoinIfPegged`"
      }
    },
    "title": "Provide pegged stable coin, useful for getting USD prices reference from DEXes",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CustomStalePeriodUpdated(address,uint256,uint256)": {
        "notice": "Emitted when custom stale period is updated"
      },
      "DefaultStalePeriodUpdated(uint256,uint256)": {
        "notice": "Emitted when default stale period is updated"
      },
      "MaxDeviationUpdated(uint256,uint256)": {
        "notice": "Emitted when max deviation is updated"
      },
      "StableCoinsUpdated(address,address,address,address)": {
        "notice": "Emitted when stable coin is updated"
      }
    },
    "kind": "user",
    "methods": {
      "defaultStalePeriod()": {
        "notice": "The default stale period. It's used to determine if a price is invalid (i.e. outdated)"
      },
      "getStableCoinIfPegged()": {
        "notice": "Return the stable coin if pegged"
      },
      "maxDeviation()": {
        "notice": "The max acceptable deviation"
      },
      "primaryStableCoin()": {
        "notice": "A stable coin to use as USD price reference"
      },
      "secondaryStableCoin()": {
        "notice": "A secondary stable coin used to check USD-peg against primary"
      },
      "stalePeriodOf(address)": {
        "notice": "Get stale period of a token"
      },
      "toUsdRepresentation(uint256)": {
        "notice": "Convert given amount of stable coin to USD representation (18 decimals)"
      },
      "updateCustomStalePeriod(address,uint256)": {
        "notice": "Update custom stale period"
      },
      "updateDefaultStalePeriod(uint256)": {
        "notice": "Update default stale period"
      },
      "updateMaxDeviation(uint256)": {
        "notice": "Update max deviation"
      },
      "updateStableCoins(address,address)": {
        "notice": "Update stable coin"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8496,
        "contract": "contracts/core/StableCoinProvider.sol:StableCoinProvider",
        "label": "defaultStalePeriod",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8501,
        "contract": "contracts/core/StableCoinProvider.sol:StableCoinProvider",
        "label": "customStalePeriod",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8411,
        "contract": "contracts/core/StableCoinProvider.sol:StableCoinProvider",
        "label": "maxDeviation",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5670,
        "contract": "contracts/core/StableCoinProvider.sol:StableCoinProvider",
        "label": "primaryStableCoin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5672,
        "contract": "contracts/core/StableCoinProvider.sol:StableCoinProvider",
        "label": "__primaryStableCoinDecimals",
        "offset": 20,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 5675,
        "contract": "contracts/core/StableCoinProvider.sol:StableCoinProvider",
        "label": "secondaryStableCoin",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5677,
        "contract": "contracts/core/StableCoinProvider.sol:StableCoinProvider",
        "label": "__secondaryStableCoinDecimals",
        "offset": 20,
        "slot": "4",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
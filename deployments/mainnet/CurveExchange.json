{
  "address": "0xB812A730fCe12d3F841Fb6Ca3fD39Bd8F60ddF19",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addressProvider_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "contract ICurveAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        }
      ],
      "name": "getBestAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "getBestAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "outReceiver_",
          "type": "address"
        }
      ],
      "name": "swapExactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "remainingReceiver_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outReceiver_",
          "type": "address"
        }
      ],
      "name": "swapExactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xc25cc678fd30ee1a551e277e87d397902123afbf6a05aaa8a2c9f232d9a832aa",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xB812A730fCe12d3F841Fb6Ca3fD39Bd8F60ddF19",
    "transactionIndex": 132,
    "gasUsed": "704238",
    "logsBloom": "0x
    "blockHash": "0xa06fe40ce69d71242149172567ee1c378900dfe24839a7801027e7d9241eb700",
    "transactionHash": "0xc25cc678fd30ee1a551e277e87d397902123afbf6a05aaa8a2c9f232d9a832aa",
    "logs": [],
    "blockNumber": 16176625,
    "cumulativeGasUsed": "11867893",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000022D53366457F9d5E68Ec105046FC4383"
  ],
  "numDeployments": 1,
  "solcInputHash": "941efbb6272fac457b0ba47aca3d6b5a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressProvider_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract ICurveAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"}],\"name\":\"getBestAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"getBestAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outReceiver_\",\"type\":\"address\"}],\"name\":\"swapExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"remainingReceiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outReceiver_\",\"type\":\"address\"}],\"name\":\"swapExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmountsIn(uint256,bytes)\":{\"details\":\"Not supported by curve\"},\"getAmountsOut(uint256,bytes)\":{\"details\":\"It shouldn't be used as oracle!!!\"},\"getBestAmountOut(address,address,uint256)\":{\"details\":\"It iterates through all the curve pools which support `tokenIn_` and `tokenOut_` pair and would consume more gas.\"},\"swapExactInput(bytes,uint256,uint256,address)\":{\"details\":\"Should transfer `amountIn_` before performing swap\"},\"swapExactOutput(bytes,uint256,uint256,address,address)\":{\"details\":\"Not supported by curve\"}},\"title\":\"CurveExchange Exchange.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAmountsOut(uint256,bytes)\":{\"notice\":\"Wraps `swaps.get_exchange_amount()` function\"},\"getBestAmountIn(address,address,uint256)\":{\"notice\":\"solhint-disable \"},\"getBestAmountOut(address,address,uint256)\":{\"notice\":\"Wraps `swaps.get_best_rate()` function\"},\"swapExactInput(bytes,uint256,uint256,address)\":{\"notice\":\"Wraps `swaps.exchange()` function\"}},\"notice\":\"Implemented as per https://curve.readthedocs.io/registry-exchanges.html\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swapper/CurveExchange.sol\":\"CurveExchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurveAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurveAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 i) external view returns (address);\\n}\\n\",\"keccak256\":\"0x461681ed41c74b517147ff27f29139bff11d5e5de6f258e58b18d540fb779b58\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurveSwaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurveSwaps {\\n    /* solhint-disable */\\n    function get_best_rate(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external view returns (address, uint256);\\n\\n    function get_exchange_amount(\\n        address _pool,\\n        address _from,\\n        address _to,\\n        uint256 _amount        \\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        address _pool,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _expected,\\n        address _receiver\\n    ) external payable returns (uint256);\\n\\n    /**\\n     @notice This function queries the exchange rate for every pool where a swap between _to and _from is possible. \\n     For pairs that can be swapped in many pools this will result in very significant gas costs!\\n     */\\n    function exchange_with_best_rate(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _expected,\\n        address _receiver\\n    ) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0xa5e08b956b007cd35113626d8e6907470feb4e585df4039d777102dfa88e89eb\",\"license\":\"MIT\"},\"contracts/interfaces/swapper/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity <=0.8.9;\\n\\n/**\\n * @notice Exchange interface\\n */\\ninterface IExchange {\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the given path (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountsIn(uint256 _amountOut, bytes memory path_) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the given path (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountsOut(uint256 amountIn_, bytes memory path_) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getBestAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external returns (uint256 _amountIn, bytes memory _path);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getBestAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, bytes memory _path);\\n\\n    /**\\n     * @notice Perform an exact input swap\\n     * @dev Should transfer `amountIn_` before performing swap\\n     */\\n    function swapExactInput(\\n        bytes calldata path_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address outReceiver_\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap\\n     * @dev Should transfer `amountInMax_` before performing swap\\n     * @dev Sends swap remains - if any - to the `inSender_`\\n     */\\n    function swapExactOutput(\\n        bytes calldata path_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address inSender_,\\n        address outRecipient_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x7bda5651920a3a8f8c20c338350ca9b93f6b4f030cf8665005a15809b364bf22\",\"license\":\"MIT\"},\"contracts/swapper/CurveExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/swapper/IExchange.sol\\\";\\nimport \\\"../interfaces/external/curve/ICurveAddressProvider.sol\\\";\\nimport \\\"../interfaces/external/curve/ICurveSwaps.sol\\\";\\n\\n/**\\n * @title CurveExchange Exchange.\\n * @notice Implemented as per https://curve.readthedocs.io/registry-exchanges.html\\n */\\ncontract CurveExchange is IExchange {\\n    using SafeERC20 for IERC20;\\n    ICurveAddressProvider public immutable addressProvider;\\n    uint256 private constant SWAPS_ADDRESS_ID = 2;\\n\\n    constructor(address addressProvider_) {\\n        require(addressProvider_ != address(0), \\\"addressProvider-is-null\\\");\\n        addressProvider = ICurveAddressProvider(addressProvider_);\\n    }\\n\\n    /// @inheritdoc IExchange\\n    /// @dev It iterates through all the curve pools which support `tokenIn_` and `tokenOut_` pair and would consume more gas.\\n    /// @notice Wraps `swaps.get_best_rate()` function\\n    function getBestAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view override returns (uint256 _amountOut, bytes memory _path) {\\n        address _curvePool;\\n        (_curvePool, _amountOut) = getSwaps().get_best_rate(tokenIn_, tokenOut_, amountIn_);\\n        _path = abi.encode(_curvePool, tokenIn_, tokenOut_);\\n    }\\n\\n    /// @inheritdoc IExchange\\n    /// @notice Wraps `swaps.get_exchange_amount()` function\\n    function getAmountsOut(uint256 amountIn_, bytes memory path_) external view override returns (uint256 _amountOut) {\\n        (address _curvePool, address _tokenIn, address _tokenOut) = abi.decode(path_, (address, address, address));\\n        _amountOut = getSwaps().get_exchange_amount(_curvePool, _tokenIn, _tokenOut, amountIn_);\\n    }\\n\\n    /// @inheritdoc IExchange\\n    /// @notice Wraps `swaps.exchange()` function\\n    function swapExactInput(\\n        bytes calldata path_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address outReceiver_\\n    ) external override returns (uint256 _amountOut) {\\n        (address _curvePool, address _tokenIn, address _tokenOut) = abi.decode(path_, (address, address, address));\\n        IERC20 _tokenInContract = IERC20(_tokenIn);\\n        ICurveSwaps _swaps = getSwaps();\\n        if (_tokenInContract.allowance(address(this), address(_swaps)) < amountIn_) {\\n            _tokenInContract.approve(address(_swaps), type(uint256).max);\\n        }\\n        _amountOut = _swaps.exchange(_curvePool, _tokenIn, _tokenOut, amountIn_, amountOutMin_, outReceiver_);\\n    }\\n\\n    // @dev Not supported by curve\\n    /**  solhint-disable */\\n\\n    function getBestAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external pure override returns (uint256 _amountIn, bytes memory _path) {\\n        revert(\\\"not-supported\\\");\\n    }\\n\\n    /**\\n     * @dev Not supported by curve\\n     */\\n    function getAmountsIn(uint256 amountOut_, bytes memory path_) external pure override returns (uint256 _amountIn) {\\n        revert(\\\"not-supported\\\");\\n    }\\n\\n    /**\\n     * @dev Not supported by curve\\n     */\\n    function swapExactOutput(\\n        bytes calldata path_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address remainingReceiver_,\\n        address outReceiver_\\n    ) external pure override returns (uint256 _amountIn) {\\n        revert(\\\"not-supported\\\");\\n    }\\n\\n    /** solhint-enable */\\n\\n    /**  private methods */\\n\\n    // Get curve swaps address from address provider\\n    function getSwaps() private view returns (ICurveSwaps) {\\n        return ICurveSwaps(addressProvider.get_address(SWAPS_ADDRESS_ID));\\n    }\\n}\\n\",\"keccak256\":\"0x355d531c56258ee03768acc42d8f6bdd603b6ae268858324040a905fa4be1dfa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610cb5380380610cb583398101604081905261002f9161009a565b6001600160a01b0381166100895760405162461bcd60e51b815260206004820152601760248201527f6164647265737350726f76696465722d69732d6e756c6c000000000000000000604482015260640160405180910390fd5b6001600160a01b03166080526100ca565b6000602082840312156100ac57600080fd5b81516001600160a01b03811681146100c357600080fd5b9392505050565b608051610bca6100eb6000396000818160b101526106cd0152610bca6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80634909c29a1161005b5780634909c29a1461011957806370b247421461012c5780639d9f384d1461013f578063fee9574a1461014d57600080fd5b806319145798146100825780632954018c146100ac5780632aa4a9e5146100f8575b600080fd5b610095610090366004610786565b610160565b6040516100a39291906107c7565b60405180910390f35b6100d37f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a3565b61010b610106366004610871565b61026d565b6040519081526020016100a3565b61010b610127366004610993565b6102d7565b61009561013a366004610786565b610549565b61010b6101063660046109fe565b61010b61015b366004610871565b6105b1565b60006060600061016e61069b565b6040517f4e21df7500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301528781166024830152604482018790529190911690634e21df7590606401604080518083038186803b1580156101e557600080fd5b505afa1580156101f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021d9190610a7a565b6040805173ffffffffffffffffffffffffffffffffffffffff9384166020820152988316898201529690911660608089019190915286518089039091018152608090970190955250929492505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6e6f742d737570706f727465640000000000000000000000000000000000000060448201526000906064015b60405180910390fd5b60008080806102e8888a018a610aa8565b919450925090508160006102fa61069b565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff80831660248301529192508a9184169063dd62ed3e9060440160206040518083038186803b15801561036c57600080fd5b505afa158015610380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a49190610af3565b1015610473576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602483015283169063095ea7b390604401602060405180830381600087803b15801561043957600080fd5b505af115801561044d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104719190610b0c565b505b6040517f1a4c1ca300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015285811660248301528481166044830152606482018b9052608482018a905288811660a4830152821690631a4c1ca39060c401602060405180830381600087803b15801561050257600080fd5b505af1158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a9190610af3565b9b9a5050505050505050505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6e6f742d737570706f727465640000000000000000000000000000000000000060448201526000906060906064016102ce565b600080600080848060200190518101906105cb9190610b35565b9250925092506105d961069b565b6040517f3973e83400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015284811660248301528381166044830152606482018990529190911690633973e8349060840160206040518083038186803b15801561065957600080fd5b505afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106919190610af3565b9695505050505050565b6040517f493f4f74000000000000000000000000000000000000000000000000000000008152600260048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063493f4f749060240160206040518083038186803b15801561072457600080fd5b505afa158015610738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c9190610b77565b905090565b73ffffffffffffffffffffffffffffffffffffffff8116811461078357600080fd5b50565b60008060006060848603121561079b57600080fd5b83356107a681610761565b925060208401356107b681610761565b929592945050506040919091013590565b82815260006020604081840152835180604085015260005b818110156107fb578581018301518582016060015282016107df565b8181111561080d576000606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201606001949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561088457600080fd5b82359150602083013567ffffffffffffffff808211156108a357600080fd5b818501915085601f8301126108b757600080fd5b8135818111156108c9576108c9610842565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561090f5761090f610842565b8160405282815288602084870101111561092857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008083601f84011261095c57600080fd5b50813567ffffffffffffffff81111561097457600080fd5b60208301915083602082850101111561098c57600080fd5b9250929050565b6000806000806000608086880312156109ab57600080fd5b853567ffffffffffffffff8111156109c257600080fd5b6109ce8882890161094a565b909650945050602086013592506040860135915060608601356109f081610761565b809150509295509295909350565b60008060008060008060a08789031215610a1757600080fd5b863567ffffffffffffffff811115610a2e57600080fd5b610a3a89828a0161094a565b90975095505060208701359350604087013592506060870135610a5c81610761565b91506080870135610a6c81610761565b809150509295509295509295565b60008060408385031215610a8d57600080fd5b8251610a9881610761565b6020939093015192949293505050565b600080600060608486031215610abd57600080fd5b8335610ac881610761565b92506020840135610ad881610761565b91506040840135610ae881610761565b809150509250925092565b600060208284031215610b0557600080fd5b5051919050565b600060208284031215610b1e57600080fd5b81518015158114610b2e57600080fd5b9392505050565b600080600060608486031215610b4a57600080fd5b8351610b5581610761565b6020850151909350610b6681610761565b6040850151909250610ae881610761565b600060208284031215610b8957600080fd5b8151610b2e8161076156fea2646970667358221220b9ab098a38b51033948f255709e846af22daad0e0cac9f9f500c244b1389dc3264736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80634909c29a1161005b5780634909c29a1461011957806370b247421461012c5780639d9f384d1461013f578063fee9574a1461014d57600080fd5b806319145798146100825780632954018c146100ac5780632aa4a9e5146100f8575b600080fd5b610095610090366004610786565b610160565b6040516100a39291906107c7565b60405180910390f35b6100d37f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a3565b61010b610106366004610871565b61026d565b6040519081526020016100a3565b61010b610127366004610993565b6102d7565b61009561013a366004610786565b610549565b61010b6101063660046109fe565b61010b61015b366004610871565b6105b1565b60006060600061016e61069b565b6040517f4e21df7500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301528781166024830152604482018790529190911690634e21df7590606401604080518083038186803b1580156101e557600080fd5b505afa1580156101f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021d9190610a7a565b6040805173ffffffffffffffffffffffffffffffffffffffff9384166020820152988316898201529690911660608089019190915286518089039091018152608090970190955250929492505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6e6f742d737570706f727465640000000000000000000000000000000000000060448201526000906064015b60405180910390fd5b60008080806102e8888a018a610aa8565b919450925090508160006102fa61069b565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff80831660248301529192508a9184169063dd62ed3e9060440160206040518083038186803b15801561036c57600080fd5b505afa158015610380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a49190610af3565b1015610473576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602483015283169063095ea7b390604401602060405180830381600087803b15801561043957600080fd5b505af115801561044d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104719190610b0c565b505b6040517f1a4c1ca300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015285811660248301528481166044830152606482018b9052608482018a905288811660a4830152821690631a4c1ca39060c401602060405180830381600087803b15801561050257600080fd5b505af1158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a9190610af3565b9b9a5050505050505050505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6e6f742d737570706f727465640000000000000000000000000000000000000060448201526000906060906064016102ce565b600080600080848060200190518101906105cb9190610b35565b9250925092506105d961069b565b6040517f3973e83400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015284811660248301528381166044830152606482018990529190911690633973e8349060840160206040518083038186803b15801561065957600080fd5b505afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106919190610af3565b9695505050505050565b6040517f493f4f74000000000000000000000000000000000000000000000000000000008152600260048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063493f4f749060240160206040518083038186803b15801561072457600080fd5b505afa158015610738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c9190610b77565b905090565b73ffffffffffffffffffffffffffffffffffffffff8116811461078357600080fd5b50565b60008060006060848603121561079b57600080fd5b83356107a681610761565b925060208401356107b681610761565b929592945050506040919091013590565b82815260006020604081840152835180604085015260005b818110156107fb578581018301518582016060015282016107df565b8181111561080d576000606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201606001949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561088457600080fd5b82359150602083013567ffffffffffffffff808211156108a357600080fd5b818501915085601f8301126108b757600080fd5b8135818111156108c9576108c9610842565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561090f5761090f610842565b8160405282815288602084870101111561092857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008083601f84011261095c57600080fd5b50813567ffffffffffffffff81111561097457600080fd5b60208301915083602082850101111561098c57600080fd5b9250929050565b6000806000806000608086880312156109ab57600080fd5b853567ffffffffffffffff8111156109c257600080fd5b6109ce8882890161094a565b909650945050602086013592506040860135915060608601356109f081610761565b809150509295509295909350565b60008060008060008060a08789031215610a1757600080fd5b863567ffffffffffffffff811115610a2e57600080fd5b610a3a89828a0161094a565b90975095505060208701359350604087013592506060870135610a5c81610761565b91506080870135610a6c81610761565b809150509295509295509295565b60008060408385031215610a8d57600080fd5b8251610a9881610761565b6020939093015192949293505050565b600080600060608486031215610abd57600080fd5b8335610ac881610761565b92506020840135610ad881610761565b91506040840135610ae881610761565b809150509250925092565b600060208284031215610b0557600080fd5b5051919050565b600060208284031215610b1e57600080fd5b81518015158114610b2e57600080fd5b9392505050565b600080600060608486031215610b4a57600080fd5b8351610b5581610761565b6020850151909350610b6681610761565b6040850151909250610ae881610761565b600060208284031215610b8957600080fd5b8151610b2e8161076156fea2646970667358221220b9ab098a38b51033948f255709e846af22daad0e0cac9f9f500c244b1389dc3264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmountsIn(uint256,bytes)": {
        "details": "Not supported by curve"
      },
      "getAmountsOut(uint256,bytes)": {
        "details": "It shouldn't be used as oracle!!!"
      },
      "getBestAmountOut(address,address,uint256)": {
        "details": "It iterates through all the curve pools which support `tokenIn_` and `tokenOut_` pair and would consume more gas."
      },
      "swapExactInput(bytes,uint256,uint256,address)": {
        "details": "Should transfer `amountIn_` before performing swap"
      },
      "swapExactOutput(bytes,uint256,uint256,address,address)": {
        "details": "Not supported by curve"
      }
    },
    "title": "CurveExchange Exchange.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAmountsOut(uint256,bytes)": {
        "notice": "Wraps `swaps.get_exchange_amount()` function"
      },
      "getBestAmountIn(address,address,uint256)": {
        "notice": "solhint-disable "
      },
      "getBestAmountOut(address,address,uint256)": {
        "notice": "Wraps `swaps.get_best_rate()` function"
      },
      "swapExactInput(bytes,uint256,uint256,address)": {
        "notice": "Wraps `swaps.exchange()` function"
      }
    },
    "notice": "Implemented as per https://curve.readthedocs.io/registry-exchanges.html",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
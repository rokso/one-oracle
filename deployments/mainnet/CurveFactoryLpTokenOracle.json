{
  "address": "0xDc9d45E320AbD6907E1c1f0826Fa729c9f658CBf",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        }
      ],
      "name": "LpRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "contract ICurveAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken_",
          "type": "address"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken_",
          "type": "address"
        }
      ],
      "name": "registerLp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract ICurveFactoryRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "underlyingTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x43810fbdf3ecb17af5402dc6358906c99089599569447e0145e0826b19d429c9",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xDc9d45E320AbD6907E1c1f0826Fa729c9f658CBf",
    "transactionIndex": 54,
    "gasUsed": "691040",
    "logsBloom": "0x
    "blockHash": "0xc3289c3fb0d6ae9a33a196de953de51946f947a8926e5177909569a572272008",
    "transactionHash": "0x43810fbdf3ecb17af5402dc6358906c99089599569447e0145e0826b19d429c9",
    "logs": [],
    "blockNumber": 15583390,
    "cumulativeGasUsed": "4465550",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "484127642a19aeb7a7fbc27311cb599f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"LpRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract ICurveAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"name\":\"registerLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ICurveFactoryRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"underlyingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPriceInUsd(address)\":{\"params\":{\"token_\":\"The address of asset\"},\"returns\":{\"_priceInUsd\":\"The USD price\"}},\"registerLp(address)\":{\"details\":\"For factory pools, the LP and pool addresses are the same\"}},\"stateVariables\":{\"addressProvider\":{\"details\":\"Same address for all chains\"}},\"title\":\"Oracle for Curve LP tokens (Factory Pools)\",\"version\":1},\"userdoc\":{\"events\":{\"LpRegistered(address)\":{\"notice\":\"Emitted when a token is registered\"}},\"kind\":\"user\",\"methods\":{\"getPriceInUsd(address)\":{\"notice\":\"Get USD (or equivalent) price of an asset\"},\"registerLp(address)\":{\"notice\":\"Register LP token data\"},\"registry()\":{\"notice\":\"Factory Registry contract\"},\"underlyingTokens(address,uint256)\":{\"notice\":\"LP token => coins mapping\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/tokens/CurveFactoryLpTokenOracle.sol\":\"CurveFactoryLpTokenOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"contracts/interfaces/external/curve/ICurveAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./ICurveRegistry.sol\\\";\\n\\ninterface ICurveAddressProvider {\\n    function get_registry() external view returns (ICurveRegistry);\\n\\n    function get_address(uint256 i) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb71003c1b144d89ee42ef9d295f827db12b59bb461b6e229894c5b69ad48bc83\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurveFactoryRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurveFactoryRegistry {\\n    function get_n_coins(address lp) external view returns (uint256);\\n\\n    function get_coins(address pool) external view returns (address[4] memory);\\n\\n    function get_meta_n_coins(address pool) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x513e6814114ae19180ac2e3f0e6ce884e7d3589ed0e36067e90ba4d60d2a968d\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x5a4e3ea87689600f682b8d442284c8bfdc83930432d0e57e250880b50b38a251\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurveRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurveRegistry {\\n    function get_n_coins(address lp) external view returns (uint256);\\n\\n    function get_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_pool_from_lp_token(address lp) external view returns (address);\\n\\n    function is_meta(address pool) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x782c2e185d8abe18c8c41d91a913b27ec2908033052edfc9e22f332efaffcb5b\",\"license\":\"MIT\"},\"contracts/interfaces/periphery/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0xb48d57d83e75abecacbd065d3df55ee50eef4998fad94560cb1dbb0644049caa\",\"license\":\"MIT\"},\"contracts/interfaces/periphery/ITokenOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITokenOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n}\\n\",\"keccak256\":\"0x0a458745d97e56d125d348a597133af8572f34a7830c17d91b82cf8229c1492f\",\"license\":\"MIT\"},\"contracts/periphery/tokens/CurveFactoryLpTokenOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/periphery/ITokenOracle.sol\\\";\\nimport \\\"../../interfaces/external/curve/ICurveAddressProvider.sol\\\";\\nimport \\\"../../interfaces/external/curve/ICurveFactoryRegistry.sol\\\";\\nimport \\\"../../interfaces/external/curve/ICurvePool.sol\\\";\\nimport \\\"../../interfaces/periphery/IOracle.sol\\\";\\n\\n/**\\n * @title Oracle for Curve LP tokens (Factory Pools)\\n */\\ncontract CurveFactoryLpTokenOracle is ITokenOracle {\\n    /// @dev Same address for all chains\\n    ICurveAddressProvider public constant addressProvider =\\n        ICurveAddressProvider(0x0000000022D53366457F9d5E68Ec105046FC4383);\\n\\n    /// @notice Factory Registry contract\\n    ICurveFactoryRegistry public immutable registry;\\n\\n    /// @notice LP token => coins mapping\\n    mapping(address => address[]) public underlyingTokens;\\n\\n    /// @notice Emitted when a token is registered\\n    event LpRegistered(address indexed lpToken);\\n\\n    constructor() {\\n        registry = ICurveFactoryRegistry(addressProvider.get_address(3));\\n    }\\n\\n    /// @inheritdoc ITokenOracle\\n    function getPriceInUsd(address lpToken_) public view override returns (uint256 _priceInUsd) {\\n        address[] memory _tokens = underlyingTokens[lpToken_];\\n        require(_tokens.length > 0, \\\"lp-is-not-registered\\\");\\n        uint256 _min = type(uint256).max;\\n        uint256 _n = _tokens.length;\\n\\n        for (uint256 i; i < _n; i++) {\\n            uint256 _price = IOracle(msg.sender).getPriceInUsd(_tokens[i]);\\n            if (_price < _min) _min = _price;\\n        }\\n\\n        require(_min < type(uint256).max, \\\"no-min-underlying-price-found\\\");\\n        require(_min > 0, \\\"invalid-min-price\\\");\\n\\n        return (_min * ICurvePool(lpToken_).get_virtual_price()) / 1e18;\\n    }\\n\\n    /// @notice Register LP token data\\n    /// @dev For factory pools, the LP and pool addresses are the same\\n    function registerLp(address lpToken_) external {\\n        require(underlyingTokens[lpToken_].length == 0, \\\"lp-already-registered\\\");\\n\\n        uint256 _n = registry.get_n_coins(lpToken_);\\n        if (_n == 0) (_n, ) = registry.get_meta_n_coins(lpToken_);\\n        require(_n > 0, \\\"invalid-factory-lp-token\\\");\\n\\n        address[4] memory _tokens = registry.get_coins(lpToken_);\\n        for (uint256 i; i < _n; i++) {\\n            underlyingTokens[lpToken_].push(_tokens[i]);\\n        }\\n\\n        emit LpRegistered(lpToken_);\\n    }\\n}\\n\",\"keccak256\":\"0x900c7dd760a5f4355c90dc90174b585c69b869f20f315a931bd61112b458dd3b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405163124fd3dd60e21b8152600360048201526f22d53366457f9d5e68ec105046fc43839063493f4f749060240160206040518083038186803b15801561005857600080fd5b505afa15801561006c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009091906100a1565b6001600160a01b03166080526100d1565b6000602082840312156100b357600080fd5b81516001600160a01b03811681146100ca57600080fd5b9392505050565b608051610b7e6101006000396000818160e6015281816105990152818161066101526107900152610b7e6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80632954018c116100505780632954018c146100ca5780637b103999146100e15780637e3d43191461010857600080fd5b806301eadec41461006c57806307ee40bf146100a9575b600080fd5b61007f61007a36600461092c565b61011d565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100bc6100b7366004610958565b610162565b6040519081526020016100a0565b61007f6f22d53366457f9d5e68ec105046fc438381565b61007f7f000000000000000000000000000000000000000000000000000000000000000081565b61011b610116366004610958565b6104c4565b005b6000602052816000526040600020818154811061013957600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169150829050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208181526040808320805482518185028101850190935280835284938301828280156101e157602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116101b6575b505050505090506000815111610258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6c702d69732d6e6f742d7265676973746572656400000000000000000000000060448201526064015b60405180910390fd5b80516000199060005b8181101561034a5760003373ffffffffffffffffffffffffffffffffffffffff166307ee40bf8684815181106102995761029961097c565b60200260200101516040518263ffffffff1660e01b81526004016102d9919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60206040518083038186803b1580156102f157600080fd5b505afa158015610305573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032991906109ab565b905083811015610337578093505b5080610342816109f3565b915050610261565b5060001982106103b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6e6f2d6d696e2d756e6465726c79696e672d70726963652d666f756e64000000604482015260640161024f565b60008211610420576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c69642d6d696e2d7072696365000000000000000000000000000000604482015260640161024f565b670de0b6b3a76400008573ffffffffffffffffffffffffffffffffffffffff1663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561046f57600080fd5b505afa158015610483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a791906109ab565b6104b19084610a0e565b6104bb9190610a2d565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526020819052604090205415610551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6c702d616c72656164792d726567697374657265640000000000000000000000604482015260640161024f565b6040517f940494f100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063940494f19060240160206040518083038186803b1580156105dd57600080fd5b505afa1580156105f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061591906109ab565b9050806106de576040517feb73f37d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063eb73f37d90602401604080518083038186803b1580156106a257600080fd5b505afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190610a68565b5090505b60008111610748576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c69642d666163746f72792d6c702d746f6b656e0000000000000000604482015260640161024f565b6040517f9ac90d3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690639ac90d3d9060240160806040518083038186803b1580156107d457600080fd5b505afa1580156107e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080c9190610a9c565b905060005b828110156108c05773ffffffffffffffffffffffffffffffffffffffff841660009081526020819052604090208282600481106108505761085061097c565b6020908102919091015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055806108b8816109f3565b915050610811565b5060405173ffffffffffffffffffffffffffffffffffffffff8416907f21ebaedd59f317b5de83c2b833f2f8f6e38e5e826f527a827412bce37c93a14890600090a2505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461092957600080fd5b50565b6000806040838503121561093f57600080fd5b823561094a81610907565b946020939093013593505050565b60006020828403121561096a57600080fd5b813561097581610907565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156109bd57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000600019821415610a0757610a076109c4565b5060010190565b6000816000190483118215151615610a2857610a286109c4565b500290565b600082610a63577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008060408385031215610a7b57600080fd5b505080516020909101519092909150565b8051610a9781610907565b919050565b600060808284031215610aae57600080fd5b82601f830112610abd57600080fd5b6040516080810181811067ffffffffffffffff82111715610b07577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052806080840185811115610b1c57600080fd5b845b81811015610b3d57610b2f81610a8c565b835260209283019201610b1e565b50919594505050505056fea26469706673582212203f80c3a69c46f71562fe7183e4940d6d37f3508bca20b5b66a4fc5cd8236c65b64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80632954018c116100505780632954018c146100ca5780637b103999146100e15780637e3d43191461010857600080fd5b806301eadec41461006c57806307ee40bf146100a9575b600080fd5b61007f61007a36600461092c565b61011d565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100bc6100b7366004610958565b610162565b6040519081526020016100a0565b61007f6f22d53366457f9d5e68ec105046fc438381565b61007f7f000000000000000000000000000000000000000000000000000000000000000081565b61011b610116366004610958565b6104c4565b005b6000602052816000526040600020818154811061013957600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169150829050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208181526040808320805482518185028101850190935280835284938301828280156101e157602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116101b6575b505050505090506000815111610258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6c702d69732d6e6f742d7265676973746572656400000000000000000000000060448201526064015b60405180910390fd5b80516000199060005b8181101561034a5760003373ffffffffffffffffffffffffffffffffffffffff166307ee40bf8684815181106102995761029961097c565b60200260200101516040518263ffffffff1660e01b81526004016102d9919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60206040518083038186803b1580156102f157600080fd5b505afa158015610305573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032991906109ab565b905083811015610337578093505b5080610342816109f3565b915050610261565b5060001982106103b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6e6f2d6d696e2d756e6465726c79696e672d70726963652d666f756e64000000604482015260640161024f565b60008211610420576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c69642d6d696e2d7072696365000000000000000000000000000000604482015260640161024f565b670de0b6b3a76400008573ffffffffffffffffffffffffffffffffffffffff1663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561046f57600080fd5b505afa158015610483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a791906109ab565b6104b19084610a0e565b6104bb9190610a2d565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526020819052604090205415610551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6c702d616c72656164792d726567697374657265640000000000000000000000604482015260640161024f565b6040517f940494f100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063940494f19060240160206040518083038186803b1580156105dd57600080fd5b505afa1580156105f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061591906109ab565b9050806106de576040517feb73f37d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063eb73f37d90602401604080518083038186803b1580156106a257600080fd5b505afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190610a68565b5090505b60008111610748576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c69642d666163746f72792d6c702d746f6b656e0000000000000000604482015260640161024f565b6040517f9ac90d3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690639ac90d3d9060240160806040518083038186803b1580156107d457600080fd5b505afa1580156107e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080c9190610a9c565b905060005b828110156108c05773ffffffffffffffffffffffffffffffffffffffff841660009081526020819052604090208282600481106108505761085061097c565b6020908102919091015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055806108b8816109f3565b915050610811565b5060405173ffffffffffffffffffffffffffffffffffffffff8416907f21ebaedd59f317b5de83c2b833f2f8f6e38e5e826f527a827412bce37c93a14890600090a2505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461092957600080fd5b50565b6000806040838503121561093f57600080fd5b823561094a81610907565b946020939093013593505050565b60006020828403121561096a57600080fd5b813561097581610907565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156109bd57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000600019821415610a0757610a076109c4565b5060010190565b6000816000190483118215151615610a2857610a286109c4565b500290565b600082610a63577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008060408385031215610a7b57600080fd5b505080516020909101519092909150565b8051610a9781610907565b919050565b600060808284031215610aae57600080fd5b82601f830112610abd57600080fd5b6040516080810181811067ffffffffffffffff82111715610b07577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052806080840185811115610b1c57600080fd5b845b81811015610b3d57610b2f81610a8c565b835260209283019201610b1e565b50919594505050505056fea26469706673582212203f80c3a69c46f71562fe7183e4940d6d37f3508bca20b5b66a4fc5cd8236c65b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPriceInUsd(address)": {
        "params": {
          "token_": "The address of asset"
        },
        "returns": {
          "_priceInUsd": "The USD price"
        }
      },
      "registerLp(address)": {
        "details": "For factory pools, the LP and pool addresses are the same"
      }
    },
    "stateVariables": {
      "addressProvider": {
        "details": "Same address for all chains"
      }
    },
    "title": "Oracle for Curve LP tokens (Factory Pools)",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LpRegistered(address)": {
        "notice": "Emitted when a token is registered"
      }
    },
    "kind": "user",
    "methods": {
      "getPriceInUsd(address)": {
        "notice": "Get USD (or equivalent) price of an asset"
      },
      "registerLp(address)": {
        "notice": "Register LP token data"
      },
      "registry()": {
        "notice": "Factory Registry contract"
      },
      "underlyingTokens(address,uint256)": {
        "notice": "LP token => coins mapping"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14984,
        "contract": "contracts/periphery/tokens/CurveFactoryLpTokenOracle.sol:CurveFactoryLpTokenOracle",
        "label": "underlyingTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      }
    }
  }
}
{
  "address": "0xDBd9Cfb0b54C08E75085f8c8844E8054d13Bd39a",
  "abi": [
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CanNotPickMedianOfEmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataPackageTimestampMustNotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataPackageTimestampsMustBeEqual",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataTimestampCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EachSignerMustProvideTheSameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCalldataPointersArr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GetDataServiceIdNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldataPointer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedstonePayloadMustHaveAtLeastOneDataPackage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "TimestampFromTooLongFuture",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "TimestampIsTooOld",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimestampsMustBeEqual",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "valueByteSize",
          "type": "uint256"
        }
      ],
      "name": "TooLargeValueByteSize",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceTimestamp",
          "type": "uint256"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "feedId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "FeedIdUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "REDSTONE_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TO_SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USD_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "aggregateValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extractTimestampsAndAssertAllAreEqual",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extractedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        }
      ],
      "name": "getAuthorisedSignerIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDataServiceId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceInUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniqueSignersThreshold",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenInLastUpdatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenOutLastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteTokenToUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteUsdToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "feedId_",
          "type": "bytes32"
        }
      ],
      "name": "tokensOf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "feedId_",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "tokens_",
          "type": "address[]"
        }
      ],
      "name": "updateFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "dataFeedIds_",
          "type": "bytes32[]"
        }
      ],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampMilliseconds",
          "type": "uint256"
        }
      ],
      "name": "validateTimestamp",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xea24ba86934a30f121c555f44f1a1a974ded42ff45663074d949a458af030bc3",
  "receipt": {
    "to": null,
    "from": "0xF5F5195cF6998c57C651f9f0bBFA7cFC72a6FaC1",
    "contractAddress": "0xDBd9Cfb0b54C08E75085f8c8844E8054d13Bd39a",
    "transactionIndex": 1,
    "gasUsed": "1759522",
    "logsBloom": "0x
    "blockHash": "0xaf7562864960a7cf62b3778d4de5df601b137f827d1aa06548acd25d3330ddc5",
    "transactionHash": "0xea24ba86934a30f121c555f44f1a1a974ded42ff45663074d949a458af030bc3",
    "logs": [],
    "blockNumber": 867383,
    "cumulativeGasUsed": "1803448",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8438ec668be5c3dd7f055b02b25fa293",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CalldataMustHaveValidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataOverOrUnderFlow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanNotPickMedianOfEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataPackageTimestampMustNotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataPackageTimestampsMustBeEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataTimestampCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EachSignerMustProvideTheSameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCalldataPointersArr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GetDataServiceIdNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectUnsignedMetadataSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedSignersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignersCount\",\"type\":\"uint256\"}],\"name\":\"InsufficientNumberOfUniqueSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldataPointer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedstonePayloadMustHaveAtLeastOneDataPackage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedSigner\",\"type\":\"address\"}],\"name\":\"SignerNotAuthorised\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"TimestampFromTooLongFuture\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"TimestampIsTooOld\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimestampsMustBeEqual\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueByteSize\",\"type\":\"uint256\"}],\"name\":\"TooLargeValueByteSize\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceTimestamp\",\"type\":\"uint256\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"FeedIdUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REDSTONE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TO_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USD_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"aggregateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractTimestampsAndAssertAllAreEqual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extractedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"getAuthorisedSignerIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataServiceId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniqueSignersThreshold\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenInLastUpdatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenOutLastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteTokenToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteUsdToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"feedId_\",\"type\":\"bytes32\"}],\"name\":\"tokensOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"feedId_\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"}],\"name\":\"updateFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataFeedIds_\",\"type\":\"bytes32[]\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampMilliseconds\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"CacheUpdated(uint256,uint256)\":{\"params\":{\"price\":\"The Redstone price.\",\"priceTimestamp\":\"The timestamp contained within the price data packages.\"}}},\"kind\":\"dev\",\"methods\":{\"aggregateValues(uint256[])\":{\"details\":\"This function may be overridden by the child consumer contract. It should aggregate values from different signers to a single uint value. By default, it calculates the median value\",\"params\":{\"values\":\"An array of uint256 values from different signers\"},\"returns\":{\"_0\":\"Result of the aggregation in the form of a single number\"}},\"getDataServiceId()\":{\"details\":\"This function must be implemented by the child consumer contract. It should return dataServiceId which DataServiceWrapper will use if not provided explicitly . If not overridden, value will always have to be provided explicitly in DataServiceWrapper.\",\"returns\":{\"_0\":\"dataServiceId being consumed by contract\"}},\"getPriceInUsd(address)\":{\"params\":{\"token_\":\"The address of asset\"},\"returns\":{\"_lastUpdatedAt\":\"Last updated timestamp\",\"_priceInUsd\":\"The USD price\"}},\"getUniqueSignersThreshold()\":{\"details\":\"This function should be overridden by the child consumer contract.\",\"returns\":{\"_0\":\"The minimum required value of unique authorised signers\"}},\"quote(address,address,uint256)\":{\"params\":{\"amountIn_\":\"Amount of input token\",\"tokenIn_\":\"The address of assetIn\",\"tokenOut_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Amount out\",\"_tokenInLastUpdatedAt\":\"Last updated timestamp of `tokenIn_`\",\"_tokenOutLastUpdatedAt\":\"Last updated timestamp of `tokenOut_`\"}},\"quoteTokenToUsd(address,uint256)\":{\"params\":{\"amountIn_\":\"Amount of input token.\",\"token_\":\"The address of assetIn\"},\"returns\":{\"_amountOut\":\"Amount in USD\",\"_lastUpdatedAt\":\"Last updated timestamp\"}},\"quoteUsdToToken(address,uint256)\":{\"params\":{\"amountIn_\":\"Input amount in USD\",\"token_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Output amount of token\",\"_lastUpdatedAt\":\"Last updated timestamp\"}},\"updateFeed(bytes32,address[])\":{\"details\":\"The feed should be denominated in USD\"},\"validateTimestamp(uint256)\":{\"details\":\"This function may be overridden by the child consumer contract. It should validate the timestamp against the current time (block.timestamp) It should revert with a helpful message if the timestamp is not valid\",\"params\":{\"receivedTimestampMilliseconds\":\"Timestamp extracted from calldata\"}}},\"title\":\"Redstone's price provider\",\"version\":1},\"userdoc\":{\"events\":{\"CacheUpdated(uint256,uint256)\":{\"notice\":\"The cache timestamp was updated.\"},\"FeedIdUpdated(bytes32,address[])\":{\"notice\":\"Emitted when an feed id is updated\"}},\"kind\":\"user\",\"methods\":{\"getPriceInUsd(address)\":{\"notice\":\"Get USD (or equivalent) price of an asset\"},\"quote(address,address,uint256)\":{\"notice\":\"Get quote\"},\"quoteTokenToUsd(address,uint256)\":{\"notice\":\"Get quote in USD (or equivalent) amount\"},\"quoteUsdToToken(address,uint256)\":{\"notice\":\"Get quote from USD (or equivalent) amount to amount of token\"},\"tokensOf(bytes32)\":{\"notice\":\"Get tokens of a feed\"},\"updateFeed(bytes32,address[])\":{\"notice\":\"Update feed id\"},\"updatePrice(bytes32[])\":{\"notice\":\"Update price for the tokens related to the `dataFeedIds_`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/RedstonePriceProvider.sol\":\"RedstonePriceProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\n\\n/**\\n * @title The base contract with the main logic of data extraction from calldata\\n * @author The Redstone Oracles team\\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\\n * and the ProxyConnector contracts\\n */\\ncontract CalldataExtractor is RedstoneConstants {\\n\\n  error DataPackageTimestampMustNotBeZero();\\n  error DataPackageTimestampsMustBeEqual();\\n  error RedstonePayloadMustHaveAtLeastOneDataPackage();\\n  error TooLargeValueByteSize(uint256 valueByteSize);\\n\\n  function extractTimestampsAndAssertAllAreEqual() public pure returns (uint256 extractedTimestamp) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount;\\n    (dataPackagesCount, calldataNegativeOffset) = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n\\n    if (dataPackagesCount == 0) {\\n      revert RedstonePayloadMustHaveAtLeastOneDataPackage();\\n    }\\n\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n\\n      // Extracting timestamp for the current data package\\n      uint48 dataPackageTimestamp; // uint48, because timestamp uses 6 bytes\\n      uint256 timestampNegativeOffset = (calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n      uint256 timestampOffset = msg.data.length - timestampNegativeOffset;\\n      assembly {\\n        dataPackageTimestamp := calldataload(timestampOffset)\\n      }\\n\\n      if (dataPackageTimestamp == 0) {\\n        revert DataPackageTimestampMustNotBeZero();\\n      }\\n\\n      if (extractedTimestamp == 0) {\\n        extractedTimestamp = dataPackageTimestamp;\\n      } else if (dataPackageTimestamp != extractedTimestamp) {\\n        revert DataPackageTimestampsMustBeEqual();\\n      }\\n\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n  }\\n\\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) internal pure returns (uint256) {\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    return\\n      dataPointsCount *\\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n  }\\n\\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\\n    // Checking if the calldata ends with the RedStone marker\\n    bool hasValidRedstoneMarker;\\n    assembly {\\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n      hasValidRedstoneMarker := eq(\\n        REDSTONE_MARKER_MASK,\\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n      )\\n    }\\n    if (!hasValidRedstoneMarker) {\\n      revert CalldataMustHaveValidPayload();\\n    }\\n\\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\\n    uint24 unsignedMetadataByteSize;\\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      unsignedMetadataByteSize := calldataload(\\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\\n      )\\n    }\\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\\n      + UNSIGNED_METADATA_BYTE_SIZE_BS\\n      + REDSTONE_MARKER_BS;\\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n      revert IncorrectUnsignedMetadataSize();\\n    }\\n    return calldataNegativeOffset;\\n  }\\n\\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\\n    internal\\n    pure\\n    returns (uint16 dataPackagesCount, uint256 nextCalldataNegativeOffset)\\n  {\\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      dataPackagesCount := calldataload(\\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\\n      )\\n    }\\n    return (dataPackagesCount, calldataNegativeOffset + DATA_PACKAGES_COUNT_BS);\\n  }\\n\\n  function _extractDataPointValueAndDataFeedId(\\n    uint256 dataPointNegativeOffset,\\n    uint256 dataPointValueByteSize\\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n    uint256 dataPointCalldataOffset = msg.data.length - dataPointNegativeOffset;\\n    assembly {\\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n    }\\n    if (dataPointValueByteSize >= 33) {\\n      revert TooLargeValueByteSize(dataPointValueByteSize);\\n    }\\n    unchecked {\\n      dataPointValue = dataPointValue >> (32 - dataPointValueByteSize) * 8; \\n    }\\n  }\\n\\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\\n    internal\\n    pure\\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\\n  {\\n    // Using uint24, because data points count byte size number has 3 bytes\\n    uint24 dataPointsCount_;\\n\\n    // Using uint32, because data point value byte size has 4 bytes\\n    uint32 eachDataPointValueByteSize_;\\n\\n    // Extract data points count\\n    uint256 calldataOffset = msg.data.length - (calldataNegativeOffsetForDataPackage + SIG_BS + STANDARD_SLOT_BS);\\n    assembly {\\n      dataPointsCount_ := calldataload(calldataOffset)\\n    }\\n\\n    // Extract each data point value size\\n    calldataOffset = calldataOffset - DATA_POINTS_COUNT_BS;\\n    assembly {\\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n    }\\n\\n    // Prepare returned values\\n    dataPointsCount = dataPointsCount_;\\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n  }\\n}\\n\",\"keccak256\":\"0x059e911a27b1ac2d42930f198130381d688353b7b04fdad829558b532c148f96\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\ncontract RedstoneConstants {\\n  // === Abbreviations ===\\n  // BS - Bytes size\\n  // PTR - Pointer (memory location)\\n  // SIG - Signature\\n\\n  // Solidity and YUL constants\\n  uint256 internal constant STANDARD_SLOT_BS = 32;\\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n  // RedStone protocol consts\\n  uint256 internal constant SIG_BS = 65;\\n  uint256 internal constant TIMESTAMP_BS = 6;\\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\\n  uint256 internal constant UNSIGNED_METADATA_BYTE_SIZE_BS = 3;\\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n  // Derived values (based on consts)\\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\n  // Error messages\\n  error CalldataOverOrUnderFlow();\\n  error IncorrectUnsignedMetadataSize();\\n  error InsufficientNumberOfUniqueSigners(uint256 receivedSignersCount, uint256 requiredSignersCount);\\n  error EachSignerMustProvideTheSameValue();\\n  error EmptyCalldataPointersArr();\\n  error InvalidCalldataPointer();\\n  error CalldataMustHaveValidPayload();\\n  error SignerNotAuthorised(address receivedSigner);\\n  error DataTimestampCannotBeZero();\\n  error TimestampsMustBeEqual();\\n}\\n\",\"keccak256\":\"0x9654f99c87541c1050906fee7c1c1243fcbf21acd2aaa59c6b5f3e778526e735\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./RedstoneDefaultsLib.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\nimport \\\"../libs/BitmapLib.sol\\\";\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n/**\\n * @title The base contract with the main Redstone logic\\n * @author The Redstone Oracles team\\n * @dev Do not use this contract directly in consumer contracts, take a\\n * look at `RedstoneConsumerNumericBase` and `RedstoneConsumerBytesBase` instead\\n */\\nabstract contract RedstoneConsumerBase is CalldataExtractor {\\n\\n  error GetDataServiceIdNotImplemented();\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDDEN IN CHILD CONTRACTS) ========== */\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return dataServiceId which DataServiceWrapper will use if not provided explicitly .\\n   * If not overridden, value will always have to be provided explicitly in DataServiceWrapper.\\n   * @return dataServiceId being consumed by contract\\n   */\\n  function getDataServiceId() public view virtual returns (string memory) {\\n    revert GetDataServiceIdNotImplemented();\\n  }\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return a unique index for a given signer address if the signer\\n   * is authorised, otherwise it should revert\\n   * @param receivedSigner The address of a signer, recovered from ECDSA signature\\n   * @return Unique index for a signer in the range [0..255]\\n   */\\n  function getAuthorisedSignerIndex(address receivedSigner) public view virtual returns (uint8);\\n\\n  /**\\n   * @dev This function may be overridden by the child consumer contract.\\n   * It should validate the timestamp against the current time (block.timestamp)\\n   * It should revert with a helpful message if the timestamp is not valid\\n   * @param receivedTimestampMilliseconds Timestamp extracted from calldata\\n   */\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual {\\n    RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\\n  }\\n\\n  /**\\n   * @dev This function should be overridden by the child consumer contract.\\n   * @return The minimum required value of unique authorised signers\\n   */\\n  function getUniqueSignersThreshold() public view virtual returns (uint8) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @dev This function may be overridden by the child consumer contract.\\n   * It should aggregate values from different signers to a single uint value.\\n   * By default, it calculates the median value\\n   * @param values An array of uint256 values from different signers\\n   * @return Result of the aggregation in the form of a single number\\n   */\\n  function aggregateValues(uint256[] memory values) public view virtual returns (uint256) {\\n    return RedstoneDefaultsLib.aggregateValues(values);\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDDEN) ========== */\\n\\n  /**\\n   * @dev This is an internal helpful function for secure extraction oracle values\\n   * from the tx calldata. Security is achieved by signatures verification, timestamp\\n   * validation, and aggregating values from different authorised signers into a\\n   * single numeric value. If any of the required conditions (e.g. packages with different \\n   * timestamps or insufficient number of authorised signers) do not match, the function \\n   * will revert.\\n   *\\n   * Note! You should not call this function in a consumer contract. You can use\\n   * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\\n   *\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in dataFeedIds array\\n   * @return dataPackagesTimestamp timestamp equal for all data packages\\n   */\\n  function _securelyExtractOracleValuesAndTimestampFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    returns (uint256[] memory, uint256 dataPackagesTimestamp)\\n  {\\n    // Initializing helpful variables and allocating memory\\n    uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\\n    for (uint256 i = 0; i < dataFeedIds.length;) {\\n      // The line below is commented because newly allocated arrays are filled with zeros\\n      // But we left it for better readability\\n      // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\\n      valuesForDataFeeds[i] = new uint256[](getUniqueSignersThreshold());\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    // Extracting the number of data packages from calldata\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount;\\n    (dataPackagesCount, calldataNegativeOffset) = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n\\n    // Saving current free memory pointer\\n    uint256 freeMemPtr;\\n    assembly {\\n      freeMemPtr := mload(FREE_MEMORY_PTR)\\n    }\\n\\n    // Data packages extraction in a loop\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount;) {\\n      // Extract data package details and update calldata offset\\n      uint256 dataPackageTimestamp;\\n      (calldataNegativeOffset, dataPackageTimestamp) = _extractDataPackage(\\n        dataFeedIds,\\n        uniqueSignerCountForDataFeedIds,\\n        signersBitmapForDataFeedIds,\\n        valuesForDataFeeds,\\n        calldataNegativeOffset\\n      );\\n\\n      if (dataPackageTimestamp == 0) {\\n        revert DataTimestampCannotBeZero();\\n      }\\n\\n      if (dataPackageTimestamp != dataPackagesTimestamp && dataPackagesTimestamp != 0) {\\n        revert TimestampsMustBeEqual();\\n      }\\n\\n      dataPackagesTimestamp = dataPackageTimestamp;\\n\\n      // Shifting memory pointer back to the \\\"safe\\\" value\\n      assembly {\\n        mstore(FREE_MEMORY_PTR, freeMemPtr)\\n      }\\n      unchecked {\\n        dataPackageIndex++;\\n      }\\n    }\\n\\n    // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\\n    return (_getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds), dataPackagesTimestamp);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which extracts data for a data package based\\n   * on the given negative calldata offset, verifies them, and in the case of successful\\n   * verification updates the corresponding data package values in memory\\n   *\\n   * @param dataFeedIds an array of unique data feed identifiers\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   * @param signersBitmapForDataFeedIds an array of signer bitmaps for data feeds\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param calldataNegativeOffset negative calldata offset for the given data package\\n   *\\n   * @return nextCalldataNegativeOffset negative calldata offset for the next data package\\n   * @return dataPackageTimestamp data package timestamp\\n   */\\n  function _extractDataPackage(\\n    bytes32[] memory dataFeedIds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds,\\n    uint256[] memory signersBitmapForDataFeedIds,\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256 calldataNegativeOffset\\n  ) private view returns (uint256 nextCalldataNegativeOffset, uint256 dataPackageTimestamp) {\\n    uint256 signerIndex;\\n\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    // We use scopes to resolve problem with too deep stack\\n    {\\n      address signerAddress;\\n      bytes32 signedHash;\\n      bytes memory signedMessage;\\n      uint256 signedMessageBytesCount;\\n      uint48 extractedTimestamp;\\n\\n      signedMessageBytesCount = dataPointsCount * (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS)\\n        + DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS; //DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n\\n      uint256 timestampCalldataOffset = msg.data.length - \\n        (calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n\\n      uint256 signedMessageCalldataOffset = msg.data.length - \\n        (calldataNegativeOffset + SIG_BS + signedMessageBytesCount);\\n\\n      assembly {\\n        // Extracting the signed message\\n        signedMessage := extractBytesFromCalldata(\\n          signedMessageCalldataOffset,\\n          signedMessageBytesCount\\n        )\\n\\n        // Hashing the signed message\\n        signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\\n\\n        // Extracting timestamp\\n        extractedTimestamp := calldataload(timestampCalldataOffset)\\n\\n        function initByteArray(bytesCount) -> ptr {\\n          ptr := mload(FREE_MEMORY_PTR)\\n          mstore(ptr, bytesCount)\\n          ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\\n          mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\\n        }\\n\\n        function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\\n          let extractedBytesStartPtr := initByteArray(bytesCount)\\n          calldatacopy(\\n            extractedBytesStartPtr,\\n            offset,\\n            bytesCount\\n          )\\n          extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\\n        }\\n      }\\n\\n      dataPackageTimestamp = extractedTimestamp;\\n\\n      // Verifying the off-chain signature against on-chain hashed data\\n      signerAddress = SignatureLib.recoverSignerAddress(\\n        signedHash,\\n        calldataNegativeOffset + SIG_BS\\n      );\\n      signerIndex = getAuthorisedSignerIndex(signerAddress);\\n    }\\n\\n    // Updating helpful arrays\\n    {\\n      calldataNegativeOffset = calldataNegativeOffset + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n      bytes32 dataPointDataFeedId;\\n      uint256 dataPointValue;\\n      for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount;) {\\n        calldataNegativeOffset = calldataNegativeOffset + eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS;\\n        // Extracting data feed id and value for the current data point\\n        (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\\n          calldataNegativeOffset,\\n          eachDataPointValueByteSize\\n        );\\n\\n        for (\\n          uint256 dataFeedIdIndex = 0;\\n          dataFeedIdIndex < dataFeedIds.length;\\n        ) {\\n          if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\\n            uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\\n\\n            if (\\n              !BitmapLib.getBitFromBitmap(bitmapSignersForDataFeedId, signerIndex) && /* current signer was not counted for current dataFeedId */\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\\n            ) {\\n              // Add new value\\n              valuesForDataFeeds[dataFeedIdIndex][uniqueSignerCountForDataFeedIds[dataFeedIdIndex]] = dataPointValue;\\n\\n              // Increase unique signer counter\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\\n\\n              // Update signers bitmap\\n              signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\\n                bitmapSignersForDataFeedId,\\n                signerIndex\\n              );\\n            }\\n\\n            // Breaking, as there couldn't be several indexes for the same feed ID\\n            break;\\n          }\\n          unchecked {\\n            dataFeedIdIndex++;\\n          }\\n        }\\n        unchecked {\\n           dataPointIndex++;\\n        }\\n      }\\n    }\\n\\n    return (calldataNegativeOffset, dataPackageTimestamp);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which aggregates values from different\\n   * authorised signers for the given arrays of values for each data feed\\n   *\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _getAggregatedValues(\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds\\n  ) private view returns (uint256[] memory) {\\n    uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\\n\\n    for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length; dataFeedIndex++) {\\n      if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\\n        revert InsufficientNumberOfUniqueSigners(\\n          uniqueSignerCountForDataFeedIds[dataFeedIndex],\\n          uniqueSignersThreshold);\\n      }\\n      uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\\n      aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\\n    }\\n\\n    return aggregatedValues;\\n  }\\n}\\n\",\"keccak256\":\"0x8da7218c8cd345bbb65bcc1a13a31c397bceaa10854aa2b439f188ab3e392ff7\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConsumerBase.sol\\\";\\n\\n/**\\n * @title The base contract for Redstone consumers' contracts that allows to\\n * securely calculate numeric redstone oracle values\\n * @author The Redstone Oracles team\\n * @dev This contract can extend other contracts to allow them\\n * securely fetch Redstone oracle data from transactions calldata\\n */\\nabstract contract RedstoneConsumerNumericBase is RedstoneConsumerBase {\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract an\\n   * oracle value for a given data feed id. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedId bytes32 value that uniquely identifies the data feed\\n   * @return Extracted and verified numeric oracle value for the given data feed id\\n   */\\n  function getOracleNumericValueFromTxMsg(bytes32 dataFeedId)\\n    internal\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    bytes32[] memory dataFeedIds = new bytes32[](1);\\n    dataFeedIds[0] = dataFeedId;\\n    return getOracleNumericValuesFromTxMsg(dataFeedIds)[0];\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array\\n   */\\n  function getOracleNumericValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory)\\n  {\\n    (uint256[] memory values, uint256 timestamp) = _securelyExtractOracleValuesAndTimestampFromTxMsg(dataFeedIds);\\n    validateTimestamp(timestamp);\\n    return values;\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification and aggregating values from different authorised signers \\n   * into a single numeric value. If any of the required conditions do not match, \\n   * the function will revert.\\n   * Note! This function returns the timestamp of the packages (it requires it to be \\n   * the same for all), but does not validate this timestamp.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array and data packages timestamp\\n   */\\n   function getOracleNumericValuesAndTimestampFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory, uint256)\\n  {\\n    return _securelyExtractOracleValuesAndTimestampFromTxMsg(dataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This function works similarly to the `getOracleNumericValuesFromTxMsg` with the\\n   * only difference that it allows to request oracle data for an array of data feeds\\n   * that may contain duplicates\\n   * \\n   * @param dataFeedIdsWithDuplicates An array of data feed identifiers (duplicates are allowed)\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIdsWithDuplicates array\\n   */\\n  function getOracleNumericValuesWithDuplicatesFromTxMsg(bytes32[] memory dataFeedIdsWithDuplicates) internal view returns (uint256[] memory) {\\n    // Building an array without duplicates\\n    bytes32[] memory dataFeedIdsWithoutDuplicates = new bytes32[](dataFeedIdsWithDuplicates.length);\\n    bool alreadyIncluded;\\n    uint256 uniqueDataFeedIdsCount = 0;\\n\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      // Checking if current element is already included in `dataFeedIdsWithoutDuplicates`\\n      alreadyIncluded = false;\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < uniqueDataFeedIdsCount; indexWithoutDup++) {\\n        if (dataFeedIdsWithoutDuplicates[indexWithoutDup] == dataFeedIdsWithDuplicates[indexWithDup]) {\\n          alreadyIncluded = true;\\n          break;\\n        }\\n      }\\n\\n      // Adding if not included\\n      if (!alreadyIncluded) {\\n        dataFeedIdsWithoutDuplicates[uniqueDataFeedIdsCount] = dataFeedIdsWithDuplicates[indexWithDup];\\n        uniqueDataFeedIdsCount++;\\n      }\\n    }\\n\\n    // Overriding dataFeedIdsWithoutDuplicates.length\\n    // Equivalent to: dataFeedIdsWithoutDuplicates.length = uniqueDataFeedIdsCount;\\n    assembly {\\n      mstore(dataFeedIdsWithoutDuplicates, uniqueDataFeedIdsCount)\\n    }\\n\\n    // Requesting oracle values (without duplicates)\\n    (uint256[] memory valuesWithoutDuplicates, uint256 timestamp) = _securelyExtractOracleValuesAndTimestampFromTxMsg(dataFeedIdsWithoutDuplicates);\\n    validateTimestamp(timestamp);\\n\\n    // Preparing result values array\\n    uint256[] memory valuesWithDuplicates = new uint256[](dataFeedIdsWithDuplicates.length);\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\\n        if (dataFeedIdsWithDuplicates[indexWithDup] == dataFeedIdsWithoutDuplicates[indexWithoutDup]) {\\n          valuesWithDuplicates[indexWithDup] = valuesWithoutDuplicates[indexWithoutDup];\\n          break;\\n        }\\n      }\\n    }\\n\\n    return valuesWithDuplicates;\\n  }\\n}\\n\",\"keccak256\":\"0x4094dfbc4d9169aebbc8585e4b6a1dd857a012c8a988612d768f78b7684f73fb\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libs/NumericArrayLib.sol\\\";\\n\\n/**\\n * @title Default implementations of virtual redstone consumer base functions\\n * @author The Redstone Oracles team\\n */\\nlibrary RedstoneDefaultsLib {\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\\n\\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\\n\\n    if (block.timestamp < receivedTimestampSeconds) {\\n      if ((receivedTimestampSeconds - block.timestamp) > DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) {\\n        revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\\n      }\\n    } else if ((block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\\n    }\\n  }\\n\\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\\n    return NumericArrayLib.pickMedian(values);\\n  }\\n}\\n\",\"keccak256\":\"0xe39ee1618d15944d6f44918f02f71d0d604fb678dbdbf36ca1eeecc86858ff25\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/data-services/PrimaryProdDataServiceConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../core/RedstoneConsumerNumericBase.sol\\\";\\n\\ncontract PrimaryProdDataServiceConsumerBase is RedstoneConsumerNumericBase {\\n  function getDataServiceId() public view virtual override returns (string memory) {\\n    return \\\"redstone-primary-prod\\\";\\n  }\\n\\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\\n    return 3;\\n  }\\n\\n  function getAuthorisedSignerIndex(\\n    address signerAddress\\n  ) public view virtual override returns (uint8) {\\n    if (signerAddress == 0x8BB8F32Df04c8b654987DAaeD53D6B6091e3B774) {\\n      return 0;\\n    } else if (signerAddress == 0xdEB22f54738d54976C4c0fe5ce6d408E40d88499) {\\n      return 1;\\n    } else if (signerAddress == 0x51Ce04Be4b3E32572C4Ec9135221d0691Ba7d202) {\\n      return 2;\\n    } else if (signerAddress == 0xDD682daEC5A90dD295d14DA4b0bec9281017b5bE) {\\n      return 3;\\n    } else if (signerAddress == 0x9c5AE89C4Af6aA32cE58588DBaF90d18a855B6de) {\\n      return 4;\\n    } else {\\n      revert SignerNotAuthorised(signerAddress);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x355c0c729aa063b77ad7c35d65087330711eeaa03a83786d3071213532c5824f\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary BitmapLib {\\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\\n    return bitmap | (1 << bitIndex);\\n  }\\n\\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\\n    return bitAtIndex > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x9762198cae997eebad303a7a43a6133908646ed30811285085c9ea9cbd2a5e07\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary NumericArrayLib {\\n  // This function sort array in memory using bubble sort algorithm,\\n  // which performs even better than quick sort for small arrays\\n\\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 constant UINT256_VALUE_BS = 32;\\n\\n  error CanNotPickMedianOfEmptyArray();\\n\\n  // This function modifies the array\\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\\n    if (arr.length == 2) {\\n      return (arr[0] + arr[1]) / 2;\\n    }\\n    if (arr.length == 0) {\\n      revert CanNotPickMedianOfEmptyArray();\\n    }\\n    sort(arr);\\n    uint256 middleIndex = arr.length / 2;\\n    if (arr.length % 2 == 0) {\\n      uint256 sum = arr[middleIndex - 1] + arr[middleIndex];\\n      return sum / 2;\\n    } else {\\n      return arr[middleIndex];\\n    }\\n  }\\n\\n  function sort(uint256[] memory arr) internal pure {\\n    assembly {\\n      let arrLength := mload(arr)\\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\\n      for {\\n        let arrIPtr := valuesPtr\\n      } lt(arrIPtr, endPtr) {\\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\\n      } {\\n        for {\\n          let arrJPtr := valuesPtr\\n        } lt(arrJPtr, arrIPtr) {\\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\\n        } {\\n          let arrI := mload(arrIPtr)\\n          let arrJ := mload(arrJPtr)\\n          if lt(arrI, arrJ) {\\n            mstore(arrIPtr, arrJ)\\n            mstore(arrJPtr, arrI)\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfe091bc5f3422baa3706a0bb18d6e70225b25f8f23be3bd840a14d016777e3aa\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SignatureLib {\\n  uint256 constant ECDSA_SIG_R_BS = 32;\\n  uint256 constant ECDSA_SIG_S_BS = 32;\\n\\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\\n      r := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\\n      s := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\\n    }\\n    return ecrecover(signedHash, v, r, s);\\n  }\\n}\\n\",\"keccak256\":\"0x06037b440e5eab52d550718543c463da00ac7231f303a503178ad5191e154310\",\"license\":\"MIT\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/core/IAddressProvider.sol\\\";\\n\\n/**\\n * @notice Contract module which provides access control mechanism, where\\n * the governor account is granted with exclusive access to specific functions.\\n * @dev Uses the AddressProvider to get the governor\\n */\\nabstract contract Governable {\\n    IAddressProvider public constant addressProvider = IAddressProvider(0xfbA0816A81bcAbBf3829bED28618177a2bf0e82A);\\n\\n    /// @dev Throws if called by any account other than the governor.\\n    modifier onlyGovernor() {\\n        require(msg.sender == addressProvider.governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9fcc955db07cc6517e7456517eae374a3910d557b7d16f9372154188290d3da0\",\"license\":\"MIT\"},\"contracts/core/PriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/core/IPriceProvider.sol\\\";\\n\\n/**\\n * @title Price providers' super class that implements common functions\\n */\\nabstract contract PriceProvider is IPriceProvider {\\n    uint256 public constant USD_DECIMALS = 18;\\n\\n    /// @inheritdoc IPriceProvider\\n    function getPriceInUsd(address token_) public view virtual returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /// @inheritdoc IPriceProvider\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256 _amountOut, uint256 _tokenInLastUpdatedAt, uint256 _tokenOutLastUpdatedAt)\\n    {\\n        uint256 _amountInUsd;\\n        (_amountInUsd, _tokenInLastUpdatedAt) = quoteTokenToUsd(tokenIn_, amountIn_);\\n        (_amountOut, _tokenOutLastUpdatedAt) = quoteUsdToToken(tokenOut_, _amountInUsd);\\n    }\\n\\n    /// @inheritdoc IPriceProvider\\n    function quoteTokenToUsd(\\n        address token_,\\n        uint256 amountIn_\\n    ) public view override returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        uint256 _price;\\n        (_price, _lastUpdatedAt) = getPriceInUsd(token_);\\n        _amountOut = (amountIn_ * _price) / 10 ** IERC20Metadata(token_).decimals();\\n    }\\n\\n    /// @inheritdoc IPriceProvider\\n    function quoteUsdToToken(\\n        address token_,\\n        uint256 amountIn_\\n    ) public view override returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        uint256 _price;\\n        (_price, _lastUpdatedAt) = getPriceInUsd(token_);\\n        if (_price == 0) {\\n            return (0, 0);\\n        }\\n        _amountOut = (amountIn_ * 10 ** IERC20Metadata(token_).decimals()) / _price;\\n    }\\n}\\n\",\"keccak256\":\"0x8ba534ae3a4005b1268ef18e7e01bcbf6fbe2ee5a98422e2a18f7026e51bd9c6\",\"license\":\"MIT\"},\"contracts/core/RedstonePriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {PrimaryProdDataServiceConsumerBase} from \\\"@redstone-finance/evm-connector/contracts/data-services/PrimaryProdDataServiceConsumerBase.sol\\\";\\nimport {IRedstonePriceProvider} from \\\"../interfaces/core/IRedstonePriceProvider.sol\\\";\\nimport {IPriceProvider, PriceProvider} from \\\"./PriceProvider.sol\\\";\\nimport {Governable} from \\\"../access/Governable.sol\\\";\\n\\n/**\\n * @title Redstone's price provider\\n */\\ncontract RedstonePriceProvider is\\n    IRedstonePriceProvider,\\n    PrimaryProdDataServiceConsumerBase,\\n    PriceProvider,\\n    Governable\\n{\\n    uint256 public constant REDSTONE_DECIMALS = 8;\\n    uint256 public constant TO_SCALE = 10 ** (USD_DECIMALS - REDSTONE_DECIMALS);\\n    uint256 internal constant MAX_TIME_TOLERANCE = 1 minutes;\\n\\n    struct Cache {\\n        uint256 price;\\n        uint256 priceTimestamp;\\n    }\\n\\n    /// @notice Feed ids (feedId => token)\\n    mapping(bytes32 => address[]) internal feeds;\\n\\n    /// @notice Price cache\\n    mapping(address => Cache) internal cache;\\n\\n    /// @notice Emitted when an feed id is updated\\n    event FeedIdUpdated(bytes32 feedId, address[] tokens);\\n\\n    /// @notice The cache timestamp was updated.\\n    /// @param price The Redstone price.\\n    /// @param priceTimestamp The timestamp contained within the price data packages.\\n    event CacheUpdated(uint256 price, uint256 priceTimestamp);\\n\\n    /// @notice Get tokens of a feed\\n    function tokensOf(bytes32 feedId_) external view returns (address[] memory tokens_) {\\n        return feeds[feedId_];\\n    }\\n\\n    /// @notice Update price for the tokens related to the `dataFeedIds_`\\n    function updatePrice(bytes32[] memory dataFeedIds_) external {\\n        (uint256[] memory _values, uint256 _timestamp) = _securelyExtractOracleValuesAndTimestampFromTxMsg(\\n            dataFeedIds_\\n        );\\n\\n        uint256 _valuesLength = _values.length;\\n        require(_valuesLength == dataFeedIds_.length, \\\"invalid-data\\\");\\n\\n        _timestamp /= 1000; // Redstone uses milliseconds\\n\\n        for (uint256 i; i < _valuesLength; ++i) {\\n            address[] memory _tokens = feeds[dataFeedIds_[i]];\\n            uint256 _tokensLength = _tokens.length;\\n            for (uint j; j < _tokensLength; ++j) {\\n                address _token = _tokens[j];\\n                require(_token != address(0), \\\"feed-unknown\\\");\\n                if (_timestamp != cache[_token].priceTimestamp) {\\n                    cache[_token] = Cache({price: _values[i] * TO_SCALE, priceTimestamp: _timestamp});\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IPriceProvider\\n    function getPriceInUsd(\\n        address token_\\n    )\\n        public\\n        view\\n        virtual\\n        override(IPriceProvider, PriceProvider)\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt)\\n    {\\n        Cache memory _cache = cache[token_];\\n        _lastUpdatedAt = _cache.priceTimestamp;\\n        _priceInUsd = _cache.price;\\n\\n        if (_lastUpdatedAt == 0) {\\n            return (0, 0);\\n        }\\n\\n        if (_lastUpdatedAt < block.timestamp && block.timestamp - _lastUpdatedAt > MAX_TIME_TOLERANCE) {\\n            return (0, 0);\\n        }\\n\\n        if (_lastUpdatedAt > block.timestamp && _lastUpdatedAt - block.timestamp > MAX_TIME_TOLERANCE) {\\n            return (0, 0);\\n        }\\n    }\\n\\n    /// @inheritdoc IRedstonePriceProvider\\n    /// @dev The feed should be denominated in USD\\n    function updateFeed(bytes32 feedId_, address[] memory tokens_) external override onlyGovernor {\\n        require(feedId_ != bytes32(0), \\\"id-is-null\\\");\\n\\n        feeds[feedId_] = tokens_;\\n\\n        emit FeedIdUpdated(feedId_, tokens_);\\n    }\\n}\\n\",\"keccak256\":\"0xfb78a231f19e28f9dede419d006f19350a1ea08c629b981058300ff1ff8d3b32\",\"license\":\"MIT\"},\"contracts/interfaces/core/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStableCoinProvider.sol\\\";\\nimport \\\"./IPriceProvidersAggregator.sol\\\";\\n\\ninterface IAddressProvider {\\n    function governor() external view returns (address);\\n\\n    function providersAggregator() external view returns (IPriceProvidersAggregator);\\n\\n    function stableCoinProvider() external view returns (IStableCoinProvider);\\n\\n    function updateProvidersAggregator(IPriceProvidersAggregator providersAggregator_) external;\\n}\\n\",\"keccak256\":\"0x133c36faf973cdef1639bdbc837c21368240146875b5aa28e533bb1769b84329\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n}\\n\",\"keccak256\":\"0x188c27728bd50b187944ef217b58751efd7b8ec3f1ef0d923be82298b2b0af0e\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvidersAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"./IPriceProvider.sol\\\";\\n\\n/**\\n * @notice PriceProvidersAggregator interface\\n * @dev Worth noting that the `_lastUpdatedAt` logic depends on the underlying price provider. In summary:\\n * ChainLink: returns the last updated date from the aggregator\\n * UniswapV2: returns the date of the latest pair oracle update\\n * UniswapV3: assumes that the price is always updated (returns block.timestamp)\\n * Umbrella (FCD): returns the last updated date returned from their oracle contract\\n * Umbrella (Passport): returns the date of the latest pallet submission\\n * Anytime that a quote performs more than one query, it uses the oldest date as the `_lastUpdatedAt`.\\n * See more: https://github.com/bloqpriv/one-oracle/issues/64\\n */\\ninterface IPriceProvidersAggregator {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(\\n        DataTypes.Provider provider_,\\n        address token_\\n    ) external view returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Provider Providers' mapping\\n     */\\n    function priceProviders(DataTypes.Provider provider_) external view returns (IPriceProvider _priceProvider);\\n\\n    /**\\n     * @notice Get quote\\n     * @param provider_ The price provider to get quote from\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _tokenInLastUpdatedAt, uint256 _tokenOutLastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @dev If providers aren't the same, uses native token as \\\"bridge\\\"\\n     * @param providerIn_ The price provider to get quote for the tokenIn\\n     * @param tokenIn_ The address of assetIn\\n     * @param providerOut_ The price provider to get quote for the tokenOut\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _nativeTokenLastUpdatedAt Last updated timestamp of native token (i.e. WETH) used when providers aren't the same\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        DataTypes.Provider providerIn_,\\n        address tokenIn_,\\n        DataTypes.Provider providerOut_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _nativeTokenLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Set a price provider\\n     * @dev Administrative function\\n     * @param provider_ The provider (from enum)\\n     * @param priceProvider_ The price provider contract\\n     */\\n    function setPriceProvider(DataTypes.Provider provider_, IPriceProvider priceProvider_) external;\\n}\\n\",\"keccak256\":\"0x2cc214fb40cc9d9f912e8570bdeaee983ab3bc966872c3d69c5cb8d100a614ed\",\"license\":\"MIT\"},\"contracts/interfaces/core/IRedstonePriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPriceProvider.sol\\\";\\n\\ninterface IRedstonePriceProvider is IPriceProvider {\\n    /**\\n     * @notice Update feed id\\n     */\\n    function updateFeed(bytes32 feedId_, address[] memory tokens_) external;\\n}\\n\",\"keccak256\":\"0x9f5a84dda8f29081977d337d9520e58ab588c14663b4ec4c82221988fd9033bb\",\"license\":\"MIT\"},\"contracts/interfaces/core/IStableCoinProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStableCoinProvider {\\n    /**\\n     * @notice Return the stable coin if pegged\\n     * @dev Check price relation between both stable coins and revert if peg is too loose\\n     * @return _stableCoin The primary stable coin if pass all checks\\n     */\\n    function getStableCoinIfPegged() external view returns (address _stableCoin);\\n\\n    /**\\n     * @notice Convert given amount of stable coin to USD representation (18 decimals)\\n     */\\n    function toUsdRepresentation(uint256 stableCoinAmount_) external view returns (uint256 _usdAmount);\\n}\\n\",\"keccak256\":\"0x57121c0faef63ea2d06b05048054ffa78d4d3c5734c2dabc1aaa4c5032e194c5\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary DataTypes {\\n    /**\\n     * @notice Price providers enumeration\\n     */\\n    enum Provider {\\n        NONE,\\n        CHAINLINK,\\n        UNISWAP_V3,\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UMBRELLA_FIRST_CLASS,\\n        UMBRELLA_PASSPORT\\n    }\\n}\\n\",\"keccak256\":\"0x6f43074d75ecc057e2ea789fa896096ade570d64c76b86eb3be563d5ae9175da\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611f04806100206000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80639db22f71116100b2578063c274583a11610081578063dee7aba411610066578063dee7aba4146102c6578063f50b2efe146102ce578063f90c4924146102e157600080fd5b8063c274583a14610274578063d3dce958146102b357600080fd5b80639db22f7114610200578063b24ebfcc14610220578063b5e9bef514610233578063b64663841461024657600080fd5b80633ce142f5116100ee5780633ce142f5146101ab57806355a547d5146101d05780636820b6e8146101d85780638d0dba00146101ed57600080fd5b806307ee40bf1461012057806309089ac51461014d5780632954018c146101635780632f6ee695146101a3575b600080fd5b61013361012e36600461193c565b6102e8565b604080519283526020830191909152015b60405180910390f35b610155600881565b604051908152602001610144565b61017e73fba0816a81bcabbf3829bed28618177a2bf0e82a81565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610144565b610155601281565b6101be6101b936600461193c565b610392565b60405160ff9091168152602001610144565b610155610505565b6101eb6101e63660046119dd565b610654565b005b6101336101fb366004611a73565b610927565b61021361020e366004611a9f565b6109e4565b6040516101449190611b09565b61015561022e3660046119dd565b610a5b565b610133610241366004611a73565b610a6c565b610259610254366004611b1c565b610b2b565b60408051938452602084019290925290820152606001610144565b604080518082018252601581527f72656473746f6e652d7072696d6172792d70726f640000000000000000000000602082015290516101449190611b5d565b6101eb6102c1366004611bb2565b610b58565b610155610d40565b6101eb6102dc366004611a9f565b610d5a565b60036101be565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600160208181526040928390208351808501909452805480855292015490830181905290918161033a5750600093849350915050565b42821080156103525750603c6103508342611c87565b115b156103635750600093849350915050565b428211801561037b5750603c6103794284611c87565b115b1561038c5750600093849350915050565b50915091565b6000738bb8f32df04c8b654987daaed53d6b6091e3b77473ffffffffffffffffffffffffffffffffffffffff831614156103ce57506000919050565b73deb22f54738d54976c4c0fe5ce6d408e40d8849973ffffffffffffffffffffffffffffffffffffffff8316141561040857506001919050565b7351ce04be4b3e32572c4ec9135221d0691ba7d20273ffffffffffffffffffffffffffffffffffffffff8316141561044257506002919050565b73dd682daec5a90dd295d14da4b0bec9281017b5be73ffffffffffffffffffffffffffffffffffffffff8316141561047c57506003919050565b739c5ae89c4af6aa32ce58588dbaf90d18a855b6de73ffffffffffffffffffffffffffffffffffffffff831614156104b657506004919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b600080610510610d66565b9050600061051d82610e7d565b925061ffff1690508061055c576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561064e57600061057284610ee5565b9050600080610582606887611c9e565b905060006105908236611c87565b80359350905065ffffffffffff83166105d5576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876105ea578265ffffffffffff16975061062b565b878365ffffffffffff161461062b576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106358488611c9e565b965050505050808061064690611cb6565b91505061055f565b50505090565b60008061066083610f21565b91509150600082519050835181146106d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f696e76616c69642d64617461000000000000000000000000000000000000000060448201526064016104fc565b6106e06103e883611d00565b915060005b8181101561092057600080600087848151811061070457610704611d14565b6020026020010151815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561077b57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610750575b505083519394506000925050505b8181101561090c5760008382815181106107a5576107a5611d14565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f666565642d756e6b6e6f776e000000000000000000000000000000000000000060448201526064016104fc565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600160208190526040909120015487146108fb5760405180604001604052806008601261088f9190611c87565b61089a90600a611e27565b8a88815181106108ac576108ac611d14565b60200260200101516108be9190611e33565b8152602090810189905273ffffffffffffffffffffffffffffffffffffffff83166000908152600180835260409091208351815592909101519101555b5061090581611cb6565b9050610789565b5050508061091990611cb6565b90506106e5565b5050505050565b6000806000610935856102e8565b80935081925050508473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561098357600080fd5b505afa158015610997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bb9190611e52565b6109c690600a611e75565b6109d08286611e33565b6109da9190611d00565b9250509250929050565b60008181526020818152604091829020805483518184028101840190945280845260609392830182828015610a4f57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610a24575b50505050509050919050565b6000610a668261113f565b92915050565b6000806000610a7a856102e8565b9250905080610a90576000809250925050610b24565b808573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad757600080fd5b505afa158015610aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0f9190611e52565b610b1a90600a611e75565b6109d09086611e33565b9250929050565b600080600080610b3b8786610927565b93509050610b498682610a6c565b90989397509550919350505050565b73fba0816a81bcabbf3829bed28618177a2bf0e82a73ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610bb257600080fd5b505afa158015610bc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bea9190611e84565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016104fc565b81610ce5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69642d69732d6e756c6c0000000000000000000000000000000000000000000060448201526064016104fc565b6000828152602081815260409091208251610d029284019061187b565b507fe2283bd41bd3257b2f0fdaf5490cc4da556c1f214492fc5c0222b93d1bc350708282604051610d34929190611ea1565b60405180910390a15050565b610d4c60086012611c87565b610d5790600a611e27565b81565b610d638161114a565b50565b60006602ed57011e0000601f1936013581161480610db0576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610ded576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610e26600362ffffff8516611c9e565b610e309190611c9e565b905036610e3e600283611c9e565b1115610e76576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b60008080610e8c602085611c9e565b905036811115610ec8576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3681900335925082610edb600286611c9e565b9250925050915091565b6000806000610ef384611200565b9092509050604e610f05826020611c9e565b610f0f9084611e33565b610f199190611c9e565b949350505050565b6060600080835167ffffffffffffffff811115610f4057610f40611959565b604051908082528060200260200182016040528015610f69578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610f8857610f88611959565b604051908082528060200260200182016040528015610fb1578160200160208202803683370190505b5090506000855167ffffffffffffffff811115610fd057610fd0611959565b60405190808252806020026020018201604052801561100357816020015b6060815260200190600190039081610fee5790505b50905060005b8651811015611056576040805160038082526080820190925290602082016060803683370190505082828151811061104357611043611d14565b6020908102919091010152600101611009565b506000611061610d66565b9050600061106e82610e7d565b60405190935061ffff909116915060005b828110156111275760006110968b89898989611253565b9095509050806110d2576040517fdfb25a7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8881141580156110e157508815155b15611118576040517f4cbc474200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040839052975060010161107f565b5061113284876114df565b9750505050505050915091565b6000610a6682611611565b60006111586103e883611d00565b9050804210156111b357603c61116e4283611c87565b11156111af576040517fb6b0916d000000000000000000000000000000000000000000000000000000008152600481018290524260248201526044016104fc565b5050565b60b46111bf8242611c87565b11156111af576040517f0321d0b5000000000000000000000000000000000000000000000000000000008152600481018290524260248201526044016104fc565b6000808080806020611213604188611c9e565b61121d9190611c9e565b6112279036611c87565b803593509050611238600382611c87565b62ffffff9390931696923563ffffffff169550919350505050565b600080600080600061126486611200565b909250905060008060608180600d61127d602088611c9e565b6112879089611e33565b6112919190611c9e565b915060006112a060688d611c9e565b6112aa9036611c87565b90506000836112ba60418f611c9e565b6112c49190611c9e565b6112ce9036611c87565b90506112da84826112ed565b9450836020860120955081359250611311565b60408051838152602081850181019092526000910183838237601f19019392505050565b8265ffffffffffff169a506113328660418f61132d9190611c9e565b611749565b965061133d87610392565b60ff16995050505050505050604e866113569190611c9e565b955060008060005b848110156114cc576020611372858b611c9e565b61137c9190611c9e565b985061138889856117c1565b909350915060005b8d518110156114c3578d81815181106113ab576113ab611d14565b60200260200101518414156114bb5760008c82815181106113ce576113ce611d14565b602002602001015190506113e781896001901b16151590565b1580156114105750600360ff168e838151811061140657611406611d14565b6020026020010151105b156114b557838c838151811061142857611428611d14565b60200260200101518f848151811061144257611442611d14565b60200260200101518151811061145a5761145a611d14565b6020026020010181815250508d828151811061147857611478611d14565b60200260200101805180919061148d90611cb6565b9052506001881b81178d83815181106114a8576114a8611d14565b6020026020010181815250505b506114c3565b600101611390565b5060010161135e565b5050508594505050509550959350505050565b60606000835167ffffffffffffffff8111156114fd576114fd611959565b604051908082528060200260200182016040528015611526578160200160208202803683370190505b509050600360005b8551811015611607578185828151811061154a5761154a611d14565b602002602001015110156115b05784818151811061156a5761156a611d14565b6020026020010151826040517f2b13aef50000000000000000000000000000000000000000000000000000000081526004016104fc929190918252602082015260400190565b60006115d48783815181106115c7576115c7611d14565b6020026020010151610a5b565b9050808483815181106115e9576115e9611d14565b602090810291909101015250806115ff81611cb6565b91505061152e565b5090949350505050565b60008151600214156116695760028260018151811061163257611632611d14565b60200260200101518360008151811061164d5761164d611d14565b602002602001015161165f9190611c9e565b610a669190611d00565b81516116a1576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6116aa8261182d565b6000600283516116ba9190611d00565b9050600283516116ca9190611eba565b6117275760008382815181106116e2576116e2611d14565b6020026020010151846001846116f89190611c87565b8151811061170857611708611d14565b602002602001015161171a9190611c9e565b9050610f19600282611d00565b82818151811061173957611739611d14565b6020026020010151915050919050565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa1580156117ac573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b600080806117cf8536611c87565b9050803592506020810135915060218410611819576040517fc000fc42000000000000000000000000000000000000000000000000000000008152600481018590526024016104fc565b8360200360080282901c9150509250929050565b8051602082016020820281019150805b8281101561187557815b8181101561186c578151815180821015611862578084528183525b5050602001611847565b5060200161183d565b50505050565b8280548282559060005260206000209081019282156118f5579160200282015b828111156118f557825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061189b565b50611901929150611905565b5090565b5b808211156119015760008155600101611906565b73ffffffffffffffffffffffffffffffffffffffff81168114610d6357600080fd5b60006020828403121561194e57600080fd5b8135610e768161191a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119b1576119b1611959565b604052919050565b600067ffffffffffffffff8211156119d3576119d3611959565b5060051b60200190565b600060208083850312156119f057600080fd5b823567ffffffffffffffff811115611a0757600080fd5b8301601f81018513611a1857600080fd5b8035611a2b611a26826119b9565b611988565b81815260059190911b82018301908381019087831115611a4a57600080fd5b928401925b82841015611a6857833582529284019290840190611a4f565b979650505050505050565b60008060408385031215611a8657600080fd5b8235611a918161191a565b946020939093013593505050565b600060208284031215611ab157600080fd5b5035919050565b600081518084526020808501945080840160005b83811015611afe57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611acc565b509495945050505050565b602081526000610e766020830184611ab8565b600080600060608486031215611b3157600080fd5b8335611b3c8161191a565b92506020840135611b4c8161191a565b929592945050506040919091013590565b600060208083528351808285015260005b81811015611b8a57858101830151858201604001528201611b6e565b81811115611b9c576000604083870101525b50601f01601f1916929092016040019392505050565b60008060408385031215611bc557600080fd5b8235915060208084013567ffffffffffffffff811115611be457600080fd5b8401601f81018613611bf557600080fd5b8035611c03611a26826119b9565b81815260059190911b82018301908381019088831115611c2257600080fd5b928401925b82841015611c49578335611c3a8161191a565b82529284019290840190611c27565b80955050505050509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611c9957611c99611c58565b500390565b60008219821115611cb157611cb1611c58565b500190565b6000600019821415611cca57611cca611c58565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611d0f57611d0f611cd1565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181815b80851115611d7e578160001904821115611d6457611d64611c58565b80851615611d7157918102915b93841c9390800290611d48565b509250929050565b600082611d9557506001610a66565b81611da257506000610a66565b8160018114611db85760028114611dc257611dde565b6001915050610a66565b60ff841115611dd357611dd3611c58565b50506001821b610a66565b5060208310610133831016604e8410600b8410161715611e01575081810a610a66565b611e0b8383611d43565b8060001904821115611e1f57611e1f611c58565b029392505050565b6000610e768383611d86565b6000816000190483118215151615611e4d57611e4d611c58565b500290565b600060208284031215611e6457600080fd5b815160ff81168114610e7657600080fd5b6000610e7660ff841683611d86565b600060208284031215611e9657600080fd5b8151610e768161191a565b828152604060208201526000610f196040830184611ab8565b600082611ec957611ec9611cd1565b50069056fea2646970667358221220a3fcb304592924d177c19b5cfa6dd8acb0e50c7c2c4f11c221beaa2108e88c1b64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011b5760003560e01c80639db22f71116100b2578063c274583a11610081578063dee7aba411610066578063dee7aba4146102c6578063f50b2efe146102ce578063f90c4924146102e157600080fd5b8063c274583a14610274578063d3dce958146102b357600080fd5b80639db22f7114610200578063b24ebfcc14610220578063b5e9bef514610233578063b64663841461024657600080fd5b80633ce142f5116100ee5780633ce142f5146101ab57806355a547d5146101d05780636820b6e8146101d85780638d0dba00146101ed57600080fd5b806307ee40bf1461012057806309089ac51461014d5780632954018c146101635780632f6ee695146101a3575b600080fd5b61013361012e36600461193c565b6102e8565b604080519283526020830191909152015b60405180910390f35b610155600881565b604051908152602001610144565b61017e73fba0816a81bcabbf3829bed28618177a2bf0e82a81565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610144565b610155601281565b6101be6101b936600461193c565b610392565b60405160ff9091168152602001610144565b610155610505565b6101eb6101e63660046119dd565b610654565b005b6101336101fb366004611a73565b610927565b61021361020e366004611a9f565b6109e4565b6040516101449190611b09565b61015561022e3660046119dd565b610a5b565b610133610241366004611a73565b610a6c565b610259610254366004611b1c565b610b2b565b60408051938452602084019290925290820152606001610144565b604080518082018252601581527f72656473746f6e652d7072696d6172792d70726f640000000000000000000000602082015290516101449190611b5d565b6101eb6102c1366004611bb2565b610b58565b610155610d40565b6101eb6102dc366004611a9f565b610d5a565b60036101be565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600160208181526040928390208351808501909452805480855292015490830181905290918161033a5750600093849350915050565b42821080156103525750603c6103508342611c87565b115b156103635750600093849350915050565b428211801561037b5750603c6103794284611c87565b115b1561038c5750600093849350915050565b50915091565b6000738bb8f32df04c8b654987daaed53d6b6091e3b77473ffffffffffffffffffffffffffffffffffffffff831614156103ce57506000919050565b73deb22f54738d54976c4c0fe5ce6d408e40d8849973ffffffffffffffffffffffffffffffffffffffff8316141561040857506001919050565b7351ce04be4b3e32572c4ec9135221d0691ba7d20273ffffffffffffffffffffffffffffffffffffffff8316141561044257506002919050565b73dd682daec5a90dd295d14da4b0bec9281017b5be73ffffffffffffffffffffffffffffffffffffffff8316141561047c57506003919050565b739c5ae89c4af6aa32ce58588dbaf90d18a855b6de73ffffffffffffffffffffffffffffffffffffffff831614156104b657506004919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b600080610510610d66565b9050600061051d82610e7d565b925061ffff1690508061055c576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561064e57600061057284610ee5565b9050600080610582606887611c9e565b905060006105908236611c87565b80359350905065ffffffffffff83166105d5576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876105ea578265ffffffffffff16975061062b565b878365ffffffffffff161461062b576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106358488611c9e565b965050505050808061064690611cb6565b91505061055f565b50505090565b60008061066083610f21565b91509150600082519050835181146106d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f696e76616c69642d64617461000000000000000000000000000000000000000060448201526064016104fc565b6106e06103e883611d00565b915060005b8181101561092057600080600087848151811061070457610704611d14565b6020026020010151815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561077b57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610750575b505083519394506000925050505b8181101561090c5760008382815181106107a5576107a5611d14565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f666565642d756e6b6e6f776e000000000000000000000000000000000000000060448201526064016104fc565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600160208190526040909120015487146108fb5760405180604001604052806008601261088f9190611c87565b61089a90600a611e27565b8a88815181106108ac576108ac611d14565b60200260200101516108be9190611e33565b8152602090810189905273ffffffffffffffffffffffffffffffffffffffff83166000908152600180835260409091208351815592909101519101555b5061090581611cb6565b9050610789565b5050508061091990611cb6565b90506106e5565b5050505050565b6000806000610935856102e8565b80935081925050508473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561098357600080fd5b505afa158015610997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bb9190611e52565b6109c690600a611e75565b6109d08286611e33565b6109da9190611d00565b9250509250929050565b60008181526020818152604091829020805483518184028101840190945280845260609392830182828015610a4f57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610a24575b50505050509050919050565b6000610a668261113f565b92915050565b6000806000610a7a856102e8565b9250905080610a90576000809250925050610b24565b808573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad757600080fd5b505afa158015610aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0f9190611e52565b610b1a90600a611e75565b6109d09086611e33565b9250929050565b600080600080610b3b8786610927565b93509050610b498682610a6c565b90989397509550919350505050565b73fba0816a81bcabbf3829bed28618177a2bf0e82a73ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610bb257600080fd5b505afa158015610bc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bea9190611e84565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016104fc565b81610ce5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69642d69732d6e756c6c0000000000000000000000000000000000000000000060448201526064016104fc565b6000828152602081815260409091208251610d029284019061187b565b507fe2283bd41bd3257b2f0fdaf5490cc4da556c1f214492fc5c0222b93d1bc350708282604051610d34929190611ea1565b60405180910390a15050565b610d4c60086012611c87565b610d5790600a611e27565b81565b610d638161114a565b50565b60006602ed57011e0000601f1936013581161480610db0576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610ded576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610e26600362ffffff8516611c9e565b610e309190611c9e565b905036610e3e600283611c9e565b1115610e76576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b60008080610e8c602085611c9e565b905036811115610ec8576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3681900335925082610edb600286611c9e565b9250925050915091565b6000806000610ef384611200565b9092509050604e610f05826020611c9e565b610f0f9084611e33565b610f199190611c9e565b949350505050565b6060600080835167ffffffffffffffff811115610f4057610f40611959565b604051908082528060200260200182016040528015610f69578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610f8857610f88611959565b604051908082528060200260200182016040528015610fb1578160200160208202803683370190505b5090506000855167ffffffffffffffff811115610fd057610fd0611959565b60405190808252806020026020018201604052801561100357816020015b6060815260200190600190039081610fee5790505b50905060005b8651811015611056576040805160038082526080820190925290602082016060803683370190505082828151811061104357611043611d14565b6020908102919091010152600101611009565b506000611061610d66565b9050600061106e82610e7d565b60405190935061ffff909116915060005b828110156111275760006110968b89898989611253565b9095509050806110d2576040517fdfb25a7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8881141580156110e157508815155b15611118576040517f4cbc474200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040839052975060010161107f565b5061113284876114df565b9750505050505050915091565b6000610a6682611611565b60006111586103e883611d00565b9050804210156111b357603c61116e4283611c87565b11156111af576040517fb6b0916d000000000000000000000000000000000000000000000000000000008152600481018290524260248201526044016104fc565b5050565b60b46111bf8242611c87565b11156111af576040517f0321d0b5000000000000000000000000000000000000000000000000000000008152600481018290524260248201526044016104fc565b6000808080806020611213604188611c9e565b61121d9190611c9e565b6112279036611c87565b803593509050611238600382611c87565b62ffffff9390931696923563ffffffff169550919350505050565b600080600080600061126486611200565b909250905060008060608180600d61127d602088611c9e565b6112879089611e33565b6112919190611c9e565b915060006112a060688d611c9e565b6112aa9036611c87565b90506000836112ba60418f611c9e565b6112c49190611c9e565b6112ce9036611c87565b90506112da84826112ed565b9450836020860120955081359250611311565b60408051838152602081850181019092526000910183838237601f19019392505050565b8265ffffffffffff169a506113328660418f61132d9190611c9e565b611749565b965061133d87610392565b60ff16995050505050505050604e866113569190611c9e565b955060008060005b848110156114cc576020611372858b611c9e565b61137c9190611c9e565b985061138889856117c1565b909350915060005b8d518110156114c3578d81815181106113ab576113ab611d14565b60200260200101518414156114bb5760008c82815181106113ce576113ce611d14565b602002602001015190506113e781896001901b16151590565b1580156114105750600360ff168e838151811061140657611406611d14565b6020026020010151105b156114b557838c838151811061142857611428611d14565b60200260200101518f848151811061144257611442611d14565b60200260200101518151811061145a5761145a611d14565b6020026020010181815250508d828151811061147857611478611d14565b60200260200101805180919061148d90611cb6565b9052506001881b81178d83815181106114a8576114a8611d14565b6020026020010181815250505b506114c3565b600101611390565b5060010161135e565b5050508594505050509550959350505050565b60606000835167ffffffffffffffff8111156114fd576114fd611959565b604051908082528060200260200182016040528015611526578160200160208202803683370190505b509050600360005b8551811015611607578185828151811061154a5761154a611d14565b602002602001015110156115b05784818151811061156a5761156a611d14565b6020026020010151826040517f2b13aef50000000000000000000000000000000000000000000000000000000081526004016104fc929190918252602082015260400190565b60006115d48783815181106115c7576115c7611d14565b6020026020010151610a5b565b9050808483815181106115e9576115e9611d14565b602090810291909101015250806115ff81611cb6565b91505061152e565b5090949350505050565b60008151600214156116695760028260018151811061163257611632611d14565b60200260200101518360008151811061164d5761164d611d14565b602002602001015161165f9190611c9e565b610a669190611d00565b81516116a1576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6116aa8261182d565b6000600283516116ba9190611d00565b9050600283516116ca9190611eba565b6117275760008382815181106116e2576116e2611d14565b6020026020010151846001846116f89190611c87565b8151811061170857611708611d14565b602002602001015161171a9190611c9e565b9050610f19600282611d00565b82818151811061173957611739611d14565b6020026020010151915050919050565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa1580156117ac573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b600080806117cf8536611c87565b9050803592506020810135915060218410611819576040517fc000fc42000000000000000000000000000000000000000000000000000000008152600481018590526024016104fc565b8360200360080282901c9150509250929050565b8051602082016020820281019150805b8281101561187557815b8181101561186c578151815180821015611862578084528183525b5050602001611847565b5060200161183d565b50505050565b8280548282559060005260206000209081019282156118f5579160200282015b828111156118f557825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061189b565b50611901929150611905565b5090565b5b808211156119015760008155600101611906565b73ffffffffffffffffffffffffffffffffffffffff81168114610d6357600080fd5b60006020828403121561194e57600080fd5b8135610e768161191a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119b1576119b1611959565b604052919050565b600067ffffffffffffffff8211156119d3576119d3611959565b5060051b60200190565b600060208083850312156119f057600080fd5b823567ffffffffffffffff811115611a0757600080fd5b8301601f81018513611a1857600080fd5b8035611a2b611a26826119b9565b611988565b81815260059190911b82018301908381019087831115611a4a57600080fd5b928401925b82841015611a6857833582529284019290840190611a4f565b979650505050505050565b60008060408385031215611a8657600080fd5b8235611a918161191a565b946020939093013593505050565b600060208284031215611ab157600080fd5b5035919050565b600081518084526020808501945080840160005b83811015611afe57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611acc565b509495945050505050565b602081526000610e766020830184611ab8565b600080600060608486031215611b3157600080fd5b8335611b3c8161191a565b92506020840135611b4c8161191a565b929592945050506040919091013590565b600060208083528351808285015260005b81811015611b8a57858101830151858201604001528201611b6e565b81811115611b9c576000604083870101525b50601f01601f1916929092016040019392505050565b60008060408385031215611bc557600080fd5b8235915060208084013567ffffffffffffffff811115611be457600080fd5b8401601f81018613611bf557600080fd5b8035611c03611a26826119b9565b81815260059190911b82018301908381019088831115611c2257600080fd5b928401925b82841015611c49578335611c3a8161191a565b82529284019290840190611c27565b80955050505050509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611c9957611c99611c58565b500390565b60008219821115611cb157611cb1611c58565b500190565b6000600019821415611cca57611cca611c58565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611d0f57611d0f611cd1565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181815b80851115611d7e578160001904821115611d6457611d64611c58565b80851615611d7157918102915b93841c9390800290611d48565b509250929050565b600082611d9557506001610a66565b81611da257506000610a66565b8160018114611db85760028114611dc257611dde565b6001915050610a66565b60ff841115611dd357611dd3611c58565b50506001821b610a66565b5060208310610133831016604e8410600b8410161715611e01575081810a610a66565b611e0b8383611d43565b8060001904821115611e1f57611e1f611c58565b029392505050565b6000610e768383611d86565b6000816000190483118215151615611e4d57611e4d611c58565b500290565b600060208284031215611e6457600080fd5b815160ff81168114610e7657600080fd5b6000610e7660ff841683611d86565b600060208284031215611e9657600080fd5b8151610e768161191a565b828152604060208201526000610f196040830184611ab8565b600082611ec957611ec9611cd1565b50069056fea2646970667358221220a3fcb304592924d177c19b5cfa6dd8acb0e50c7c2c4f11c221beaa2108e88c1b64736f6c63430008090033",
  "devdoc": {
    "events": {
      "CacheUpdated(uint256,uint256)": {
        "params": {
          "price": "The Redstone price.",
          "priceTimestamp": "The timestamp contained within the price data packages."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "aggregateValues(uint256[])": {
        "details": "This function may be overridden by the child consumer contract. It should aggregate values from different signers to a single uint value. By default, it calculates the median value",
        "params": {
          "values": "An array of uint256 values from different signers"
        },
        "returns": {
          "_0": "Result of the aggregation in the form of a single number"
        }
      },
      "getDataServiceId()": {
        "details": "This function must be implemented by the child consumer contract. It should return dataServiceId which DataServiceWrapper will use if not provided explicitly . If not overridden, value will always have to be provided explicitly in DataServiceWrapper.",
        "returns": {
          "_0": "dataServiceId being consumed by contract"
        }
      },
      "getPriceInUsd(address)": {
        "params": {
          "token_": "The address of asset"
        },
        "returns": {
          "_lastUpdatedAt": "Last updated timestamp",
          "_priceInUsd": "The USD price"
        }
      },
      "getUniqueSignersThreshold()": {
        "details": "This function should be overridden by the child consumer contract.",
        "returns": {
          "_0": "The minimum required value of unique authorised signers"
        }
      },
      "quote(address,address,uint256)": {
        "params": {
          "amountIn_": "Amount of input token",
          "tokenIn_": "The address of assetIn",
          "tokenOut_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Amount out",
          "_tokenInLastUpdatedAt": "Last updated timestamp of `tokenIn_`",
          "_tokenOutLastUpdatedAt": "Last updated timestamp of `tokenOut_`"
        }
      },
      "quoteTokenToUsd(address,uint256)": {
        "params": {
          "amountIn_": "Amount of input token.",
          "token_": "The address of assetIn"
        },
        "returns": {
          "_amountOut": "Amount in USD",
          "_lastUpdatedAt": "Last updated timestamp"
        }
      },
      "quoteUsdToToken(address,uint256)": {
        "params": {
          "amountIn_": "Input amount in USD",
          "token_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Output amount of token",
          "_lastUpdatedAt": "Last updated timestamp"
        }
      },
      "updateFeed(bytes32,address[])": {
        "details": "The feed should be denominated in USD"
      },
      "validateTimestamp(uint256)": {
        "details": "This function may be overridden by the child consumer contract. It should validate the timestamp against the current time (block.timestamp) It should revert with a helpful message if the timestamp is not valid",
        "params": {
          "receivedTimestampMilliseconds": "Timestamp extracted from calldata"
        }
      }
    },
    "title": "Redstone's price provider",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CacheUpdated(uint256,uint256)": {
        "notice": "The cache timestamp was updated."
      },
      "FeedIdUpdated(bytes32,address[])": {
        "notice": "Emitted when an feed id is updated"
      }
    },
    "kind": "user",
    "methods": {
      "getPriceInUsd(address)": {
        "notice": "Get USD (or equivalent) price of an asset"
      },
      "quote(address,address,uint256)": {
        "notice": "Get quote"
      },
      "quoteTokenToUsd(address,uint256)": {
        "notice": "Get quote in USD (or equivalent) amount"
      },
      "quoteUsdToToken(address,uint256)": {
        "notice": "Get quote from USD (or equivalent) amount to amount of token"
      },
      "tokensOf(bytes32)": {
        "notice": "Get tokens of a feed"
      },
      "updateFeed(bytes32,address[])": {
        "notice": "Update feed id"
      },
      "updatePrice(bytes32[])": {
        "notice": "Update price for the tokens related to the `dataFeedIds_`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9525,
        "contract": "contracts/core/RedstonePriceProvider.sol:RedstonePriceProvider",
        "label": "feeds",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 9531,
        "contract": "contracts/core/RedstonePriceProvider.sol:RedstonePriceProvider",
        "label": "cache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Cache)9519_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Cache)9519_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RedstonePriceProvider.Cache)",
        "numberOfBytes": "32",
        "value": "t_struct(Cache)9519_storage"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_struct(Cache)9519_storage": {
        "encoding": "inplace",
        "label": "struct RedstonePriceProvider.Cache",
        "members": [
          {
            "astId": 9516,
            "contract": "contracts/core/RedstonePriceProvider.sol:RedstonePriceProvider",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9518,
            "contract": "contracts/core/RedstonePriceProvider.sol:RedstonePriceProvider",
            "label": "priceTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
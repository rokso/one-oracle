{
  "address": "0x3eb916cddCdF072cb292dB8B09616B6f1C11c3F5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICurveAddressProvider",
          "name": "addressProvider_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLending",
          "type": "bool"
        }
      ],
      "name": "LpRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curveAddressProvider",
      "outputs": [
        {
          "internalType": "contract ICurveAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken_",
          "type": "address"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken_",
          "type": "address"
        }
      ],
      "name": "registerLendingLp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken_",
          "type": "address"
        }
      ],
      "name": "registerLp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "underlyingTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6be7e54a04d4f4996bc7a9256f5536ad34ad45a68d9717cc0acb6dcb7505630c",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x3eb916cddCdF072cb292dB8B09616B6f1C11c3F5",
    "transactionIndex": 791,
    "gasUsed": "766791",
    "logsBloom": "0x
    "blockHash": "0x85feedbb79052415f108d35c40ec9cd517ad95650d1fedc62bb30364bb5be8a5",
    "transactionHash": "0x6be7e54a04d4f4996bc7a9256f5536ad34ad45a68d9717cc0acb6dcb7505630c",
    "logs": [],
    "blockNumber": 22658449,
    "cumulativeGasUsed": "34816433",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x31D236483A15F9B9dD60b36D4013D75e9dbF852b"
  ],
  "numDeployments": 1,
  "solcInputHash": "6024ac27a35281ee3828957dcac0214b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICurveAddressProvider\",\"name\":\"addressProvider_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLending\",\"type\":\"bool\"}],\"name\":\"LpRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveAddressProvider\",\"outputs\":[{\"internalType\":\"contract ICurveAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"name\":\"registerLendingLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"name\":\"registerLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"underlyingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPriceInUsd(address)\":{\"details\":\"This function is supposed to be called from `MasterOracle` only\",\"params\":{\"token_\":\"The address of asset\"},\"returns\":{\"_priceInUsd\":\"The USD price\"}}},\"title\":\"Oracle for Ellipsis LP tokens\",\"version\":1},\"userdoc\":{\"events\":{\"LpRegistered(address,bool)\":{\"notice\":\"Emitted when a token is registered\"}},\"kind\":\"user\",\"methods\":{\"getPriceInUsd(address)\":{\"notice\":\"Get USD (or equivalent) price of an asset\"},\"poolOf(address)\":{\"notice\":\"LP token => pool\"},\"registerLendingLp(address)\":{\"notice\":\"Register LP token data\"},\"registerLp(address)\":{\"notice\":\"Register LP token data\"},\"registry()\":{\"notice\":\"Registry contract\"},\"underlyingTokens(address,uint256)\":{\"notice\":\"LP token => coins mapping\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/tokens/EllipsisLpTokenOracle.sol\":\"EllipsisLpTokenOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../core/AddressProvider.sol\\\";\\n\\n/**\\n * @notice Contract module which provides access control mechanism, where\\n * the governor account is granted with exclusive access to specific functions.\\n * @dev Uses the AddressProvider to get the governor\\n */\\nabstract contract Governable {\\n    IAddressProvider public constant addressProvider = IAddressProvider(0xfbA0816A81bcAbBf3829bED28618177a2bf0e82A);\\n\\n    /// @dev Throws if called by any account other than the governor.\\n    modifier onlyGovernor() {\\n        require(msg.sender == addressProvider.governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0aeb534826bb8e2428dd859d5cf5eb82664c4de97106a783d8fb92a2a7661e38\",\"license\":\"MIT\"},\"contracts/core/AddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/core/IAddressProvider.sol\\\";\\n\\ncontract AddressProvider is IAddressProvider, Initializable {\\n    /// @notice The governor account\\n    address public governor;\\n\\n    /// @notice The proposed governor account. Becomes the new governor after acceptance\\n    address public proposedGovernor;\\n\\n    /// @notice The PriceProvidersAggregator contract\\n    IPriceProvidersAggregator public override providersAggregator;\\n\\n    /// @notice The StableCoinProvider contract\\n    IStableCoinProvider public override stableCoinProvider;\\n\\n    /// @notice Emitted when providers aggregator is updated\\n    event ProvidersAggregatorUpdated(\\n        IPriceProvidersAggregator oldProvidersAggregator,\\n        IPriceProvidersAggregator newProvidersAggregator\\n    );\\n\\n    /// @notice Emitted when stable coin provider is updated\\n    event StableCoinProviderUpdated(\\n        IStableCoinProvider oldStableCoinProvider,\\n        IStableCoinProvider newStableCoinProvider\\n    );\\n\\n    /// @notice Emitted when governor is updated\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == msg.sender, \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    function initialize(address governor_) external initializer {\\n        governor = governor_;\\n        emit UpdatedGovernor(address(0), governor_);\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(msg.sender == proposedGovernor, \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @notice Update PriceProvidersAggregator contract\\n     */\\n    function updateProvidersAggregator(IPriceProvidersAggregator providersAggregator_) external onlyGovernor {\\n        require(address(providersAggregator_) != address(0), \\\"address-is-null\\\");\\n        emit ProvidersAggregatorUpdated(providersAggregator, providersAggregator_);\\n        providersAggregator = providersAggregator_;\\n    }\\n\\n    /**\\n     * @notice Update StableCoinProvider contract\\n     */\\n    function updateStableCoinProvider(IStableCoinProvider stableCoinProvider_) external onlyGovernor {\\n        emit StableCoinProviderUpdated(stableCoinProvider, stableCoinProvider_);\\n        stableCoinProvider = stableCoinProvider_;\\n    }\\n}\\n\",\"keccak256\":\"0x145bfcd3b2e957400f54636b517e54599fd918fd9e6e368a85e4362677e96ffa\",\"license\":\"MIT\"},\"contracts/interfaces/core/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStableCoinProvider.sol\\\";\\nimport \\\"./IPriceProvidersAggregator.sol\\\";\\n\\ninterface IAddressProvider {\\n    function governor() external view returns (address);\\n\\n    function providersAggregator() external view returns (IPriceProvidersAggregator);\\n\\n    function stableCoinProvider() external view returns (IStableCoinProvider);\\n}\\n\",\"keccak256\":\"0xa17f9e29e3de520c35faa21ddeb139fe73b3663c1ebf83f17b2c0aa00c297cf8\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n}\\n\",\"keccak256\":\"0x05e6cf557c19e2f9e439b483ed67e85713c0045dced6133f530003382e9b72d1\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvidersAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"./IPriceProvider.sol\\\";\\n\\n/**\\n * @notice PriceProvidersAggregator interface\\n * @dev Worth noting that the `_lastUpdatedAt` logic depends on the underlying price provider. In summary:\\n * ChainLink: returns the last updated date from the aggregator\\n * UniswapV2: returns the date of the latest pair oracle update\\n * UniswapV3: assumes that the price is always updated (returns block.timestamp)\\n * Flux: returns the last updated date from the aggregator\\n * Umbrella (FCD): returns the last updated date returned from their oracle contract\\n * Umbrella (Passport): returns the date of the latest pallet submission\\n * Anytime that a quote performs more than one query, it uses the oldest date as the `_lastUpdatedAt`.\\n * See more: https://github.com/bloqpriv/one-oracle/issues/64\\n */\\ninterface IPriceProvidersAggregator {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        external\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Provider Providers' mapping\\n     */\\n    function priceProviders(DataTypes.Provider provider_) external view returns (IPriceProvider _priceProvider);\\n\\n    /**\\n     * @notice Get quote\\n     * @param provider_ The price provider to get quote from\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @dev If providers aren't the same, uses native token as \\\"bridge\\\"\\n     * @param providerIn_ The price provider to get quote for the tokenIn\\n     * @param tokenIn_ The address of assetIn\\n     * @param providerOut_ The price provider to get quote for the tokenOut\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        DataTypes.Provider providerIn_,\\n        address tokenIn_,\\n        DataTypes.Provider providerOut_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Set a price provider\\n     * @dev Administrative function\\n     * @param provider_ The provider (from enum)\\n     * @param priceProvider_ The price provider contract\\n     */\\n    function setPriceProvider(DataTypes.Provider provider_, IPriceProvider priceProvider_) external;\\n}\\n\",\"keccak256\":\"0xf1708572db9b1b429856b6f5fc22e5c9a6e98047559f1d29ba854621bf155dc9\",\"license\":\"MIT\"},\"contracts/interfaces/core/IStableCoinProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStableCoinProvider {\\n    /**\\n     * @notice Return the stable coin if pegged\\n     * @dev Check price relation between both stable coins and revert if peg is too loose\\n     * @return _stableCoin The primary stable coin if pass all checks\\n     */\\n    function getStableCoinIfPegged() external view returns (address _stableCoin);\\n\\n    /**\\n     * @notice Convert given amount of stable coin to USD representation (18 decimals)\\n     */\\n    function toUsdRepresentation(uint256 stableCoinAmount_) external view returns (uint256 _usdAmount);\\n}\\n\",\"keccak256\":\"0x57121c0faef63ea2d06b05048054ffa78d4d3c5734c2dabc1aaa4c5032e194c5\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurveAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurveAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 i) external view returns (address);\\n}\\n\",\"keccak256\":\"0x461681ed41c74b517147ff27f29139bff11d5e5de6f258e58b18d540fb779b58\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x5a4e3ea87689600f682b8d442284c8bfdc83930432d0e57e250880b50b38a251\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurveRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICurveRegistry {\\n    function get_n_coins(address lp) external view returns (uint256);\\n\\n    function get_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_pool_from_lp_token(address lp) external view returns (address);\\n\\n    function is_meta(address pool) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x782c2e185d8abe18c8c41d91a913b27ec2908033052edfc9e22f332efaffcb5b\",\"license\":\"MIT\"},\"contracts/interfaces/external/ellipsis/IEllipsisRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IEllipsisRegistry {\\n    function get_n_coins(address pool) external view returns (uint256);\\n\\n    function get_pool_from_lp_token(address lp) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[4] memory);\\n}\\n\",\"keccak256\":\"0x6583eebdfe4488e221451d0306d797d743a4904eafa43aa61a439adfc6f2fd64\",\"license\":\"MIT\"},\"contracts/interfaces/periphery/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0xb48d57d83e75abecacbd065d3df55ee50eef4998fad94560cb1dbb0644049caa\",\"license\":\"MIT\"},\"contracts/interfaces/periphery/ITokenOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITokenOracle {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n}\\n\",\"keccak256\":\"0x0a458745d97e56d125d348a597133af8572f34a7830c17d91b82cf8229c1492f\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary DataTypes {\\n    /**\\n     * @notice Price providers enumeration\\n     */\\n    enum Provider {\\n        NONE,\\n        CHAINLINK,\\n        UNISWAP_V3,\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UMBRELLA_FIRST_CLASS,\\n        UMBRELLA_PASSPORT,\\n        FLUX\\n    }\\n\\n    enum ExchangeType {\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UNISWAP_V3,\\n        PANCAKE_SWAP\\n    }\\n\\n    enum SwapType {\\n        EXACT_INPUT,\\n        EXACT_OUTPUT\\n    }\\n}\\n\",\"keccak256\":\"0xd857b923a046012c8e7f105e2040c0d5598917a198932af1ad7683e64a7b15e4\",\"license\":\"MIT\"},\"contracts/periphery/tokens/CurveLpTokenOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/periphery/ITokenOracle.sol\\\";\\nimport \\\"../../interfaces/external/curve/ICurveAddressProvider.sol\\\";\\nimport \\\"../../interfaces/external/curve/ICurveRegistry.sol\\\";\\nimport \\\"../../interfaces/external/curve/ICurvePool.sol\\\";\\nimport \\\"../../interfaces/periphery/IOracle.sol\\\";\\nimport \\\"../../access/Governable.sol\\\";\\n\\n/**\\n * @title Oracle for Curve LP tokens\\n */\\ncontract CurveLpTokenOracle is ITokenOracle, Governable {\\n    ICurveAddressProvider public immutable curveAddressProvider;\\n\\n    /// @notice Registry contract\\n    address public immutable registry;\\n\\n    /// @notice LP token => coins mapping\\n    mapping(address => address[]) public underlyingTokens;\\n\\n    /// @notice LP token => pool\\n    mapping(address => address) public poolOf;\\n\\n    /// @notice Emitted when a token is registered\\n    event LpRegistered(address indexed lpToken, bool isLending);\\n\\n    constructor(ICurveAddressProvider curveAddressProvider_) {\\n        require(address(curveAddressProvider_) != address(0), \\\"null-address-provider\\\");\\n        curveAddressProvider = curveAddressProvider_;\\n        registry = curveAddressProvider.get_registry();\\n    }\\n\\n    /// @inheritdoc ITokenOracle\\n    /// @dev This function is supposed to be called from `MasterOracle` only\\n    function getPriceInUsd(address lpToken_) public view override returns (uint256 _priceInUsd) {\\n        address _pool = poolOf[lpToken_];\\n        require(_pool != address(0), \\\"lp-is-not-registered\\\");\\n        address[] memory _tokens = underlyingTokens[lpToken_];\\n        uint256 _min = type(uint256).max;\\n        uint256 _n = _tokens.length;\\n\\n        for (uint256 i; i < _n; i++) {\\n            // Note: `msg.sender` is the `MasterOracle` contract\\n            uint256 _price = IOracle(msg.sender).getPriceInUsd(_tokens[i]);\\n            if (_price < _min) _min = _price;\\n        }\\n\\n        require(_min < type(uint256).max, \\\"no-min-underlying-price-found\\\");\\n        require(_min > 0, \\\"invalid-min-price\\\");\\n\\n        return (_min * ICurvePool(_pool).get_virtual_price()) / 1e18;\\n    }\\n\\n    /// @notice Register LP token data\\n    function registerLp(address lpToken_) external onlyGovernor {\\n        _registerLp(lpToken_, false);\\n    }\\n\\n    /// @notice Register LP token data\\n    function registerLendingLp(address lpToken_) external onlyGovernor {\\n        _registerLp(lpToken_, true);\\n    }\\n\\n    /// @notice Register LP token data\\n    function _registerLp(address lpToken_, bool isLending_) internal virtual {\\n        ICurveRegistry _registry = ICurveRegistry(registry);\\n        address _pool = _registry.get_pool_from_lp_token(lpToken_);\\n        require(_pool != address(0), \\\"invalid-non-factory-lp\\\");\\n\\n        address[8] memory _tokens;\\n        if (isLending_) {\\n            _tokens = _registry.get_underlying_coins(_pool);\\n        } else {\\n            _tokens = _registry.get_coins(_pool);\\n        }\\n\\n        if (poolOf[lpToken_] != address(0)) {\\n            // Clean current tokens if LP exists\\n            delete underlyingTokens[lpToken_];\\n        }\\n\\n        poolOf[lpToken_] = _pool;\\n\\n        uint256 _n = _registry.get_n_coins(_pool);\\n        for (uint256 i; i < _n; i++) {\\n            underlyingTokens[lpToken_].push(_tokens[i]);\\n        }\\n\\n        emit LpRegistered(lpToken_, isLending_);\\n    }\\n}\\n\",\"keccak256\":\"0x0006722b6aa7f35dbbcc8a33409d820b8a009a99461f56f37d7504a99e3e4b88\",\"license\":\"MIT\"},\"contracts/periphery/tokens/EllipsisLpTokenOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/external/ellipsis/IEllipsisRegistry.sol\\\";\\nimport \\\"./CurveLpTokenOracle.sol\\\";\\n\\n/**\\n * @title Oracle for Ellipsis LP tokens\\n */\\ncontract EllipsisLpTokenOracle is CurveLpTokenOracle {\\n    constructor(ICurveAddressProvider addressProvider_) CurveLpTokenOracle(addressProvider_) {}\\n\\n    /// @notice Register LP token data\\n    function _registerLp(address lpToken_, bool isLending_) internal override {\\n        IEllipsisRegistry _registry = IEllipsisRegistry(registry);\\n        address _pool = _registry.get_pool_from_lp_token(lpToken_);\\n        require(_pool != address(0), \\\"invalid-non-factory-lp\\\");\\n\\n        address[4] memory _tokens = _registry.get_coins(_pool);\\n\\n        if (poolOf[lpToken_] != address(0)) {\\n            // Clean current tokens if LP exists\\n            delete underlyingTokens[lpToken_];\\n        }\\n\\n        poolOf[lpToken_] = _pool;\\n\\n        uint256 _n = _registry.get_n_coins(_pool);\\n        for (uint256 i; i < _n; i++) {\\n            underlyingTokens[lpToken_].push(_tokens[i]);\\n        }\\n\\n        emit LpRegistered(lpToken_, isLending_);\\n    }\\n}\\n\",\"keccak256\":\"0x00334f60a5df14998d09b2a4516d112f2899f8a7c0e3db4d07c26fb3e39c0c6f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610e59380380610e5983398101604081905261002f91610133565b806001600160a01b03811661008a5760405162461bcd60e51b815260206004820152601560248201527f6e756c6c2d616464726573732d70726f76696465720000000000000000000000604482015260640160405180910390fd5b6001600160a01b03811660808190526040805163a262904b60e01b8152905163a262904b91600480820192602092909190829003018186803b1580156100cf57600080fd5b505afa1580156100e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101079190610133565b6001600160a01b031660a052506101579050565b6001600160a01b038116811461013057600080fd5b50565b60006020828403121561014557600080fd5b81516101508161011b565b9392505050565b60805160a051610cd76101826000396000818161012501526106da0152600060fe0152610cd76000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637b1039991161005b5780637b103999146101205780637e3d431914610147578063988b1fa71461015c578063fd182f381461018557600080fd5b806301eadec41461008d57806307ee40bf146100bd5780632954018c146100de5780633d6e7388146100f9575b600080fd5b6100a061009b366004610a8c565b610198565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d06100cb366004610ab8565b6101d0565b6040519081526020016100b4565b6100a073fba0816a81bcabbf3829bed28618177a2bf0e82a81565b6100a07f000000000000000000000000000000000000000000000000000000000000000081565b6100a07f000000000000000000000000000000000000000000000000000000000000000081565b61015a610155366004610ab8565b6104c3565b005b6100a061016a366004610ab8565b6001602052600090815260409020546001600160a01b031681565b61015a610193366004610ab8565b6105b6565b600060205281600052604060002081815481106101b457600080fd5b6000918252602090912001546001600160a01b03169150829050565b6001600160a01b038082166000908152600160205260408120549091168061023f5760405162461bcd60e51b815260206004820152601460248201527f6c702d69732d6e6f742d7265676973746572656400000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038316600090815260208181526040808320805482518185028101850190935280835291929091908301828280156102a757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610289575b5050835193945060001993925060009150505b81811015610389576000336001600160a01b03166307ee40bf8684815181106102e5576102e5610adc565b60200260200101516040518263ffffffff1660e01b815260040161031891906001600160a01b0391909116815260200190565b60206040518083038186803b15801561033057600080fd5b505afa158015610344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103689190610b0b565b905083811015610376578093505b508061038181610b53565b9150506102ba565b5060001982106103db5760405162461bcd60e51b815260206004820152601d60248201527f6e6f2d6d696e2d756e6465726c79696e672d70726963652d666f756e640000006044820152606401610236565b6000821161042b5760405162461bcd60e51b815260206004820152601160248201527f696e76616c69642d6d696e2d70726963650000000000000000000000000000006044820152606401610236565b670de0b6b3a7640000846001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561046d57600080fd5b505afa158015610481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a59190610b0b565b6104af9084610b6e565b6104b99190610b8d565b9695505050505050565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561051057600080fd5b505afa158015610524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105489190610bd8565b6001600160a01b0316336001600160a01b0316146105a85760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610236565b6105b38160006106a2565b50565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561060357600080fd5b505afa158015610617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063b9190610bd8565b6001600160a01b0316336001600160a01b03161461069b5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610236565b6105b38160015b6040517fbdf475c30000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000009160009183169063bdf475c39060240160206040518083038186803b15801561072157600080fd5b505afa158015610735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107599190610bd8565b90506001600160a01b0381166107b15760405162461bcd60e51b815260206004820152601660248201527f696e76616c69642d6e6f6e2d666163746f72792d6c70000000000000000000006044820152606401610236565b6040517f9ac90d3d0000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015260009190841690639ac90d3d9060240160806040518083038186803b15801561080f57600080fd5b505afa158015610823573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108479190610bf5565b6001600160a01b03868116600090815260016020526040902054919250161561088b576001600160a01b038516600090815260208190526040812061088b91610a45565b6001600160a01b0385811660009081526001602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001686851690811790915590517f940494f10000000000000000000000000000000000000000000000000000000081526004810191909152909185169063940494f19060240160206040518083038186803b15801561092557600080fd5b505afa158015610939573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095d9190610b0b565b905060005b818110156109f7576001600160a01b038716600090815260208190526040902083826004811061099457610994610adc565b6020908102919091015182546001810184556000938452919092200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055806109ef81610b53565b915050610962565b50856001600160a01b03167f57d0e2ad10d7bd8ccdedffbc52e5e50ff5314a8d8be6248e7c0d05d4cd81435386604051610a35911515815260200190565b60405180910390a2505050505050565b50805460008255906000526020600020908101906105b391905b80821115610a735760008155600101610a5f565b5090565b6001600160a01b03811681146105b357600080fd5b60008060408385031215610a9f57600080fd5b8235610aaa81610a77565b946020939093013593505050565b600060208284031215610aca57600080fd5b8135610ad581610a77565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610b1d57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000600019821415610b6757610b67610b24565b5060010190565b6000816000190483118215151615610b8857610b88610b24565b500290565b600082610bc3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8051610bd381610a77565b919050565b600060208284031215610bea57600080fd5b8151610ad581610a77565b600060808284031215610c0757600080fd5b82601f830112610c1657600080fd5b6040516080810181811067ffffffffffffffff82111715610c60577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052806080840185811115610c7557600080fd5b845b81811015610c9657610c8881610bc8565b835260209283019201610c77565b50919594505050505056fea2646970667358221220cf04fbafdf7c755f7cbb77683bdc5ed531a314c8c91e9d44e56950ed5c603da664736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80637b1039991161005b5780637b103999146101205780637e3d431914610147578063988b1fa71461015c578063fd182f381461018557600080fd5b806301eadec41461008d57806307ee40bf146100bd5780632954018c146100de5780633d6e7388146100f9575b600080fd5b6100a061009b366004610a8c565b610198565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d06100cb366004610ab8565b6101d0565b6040519081526020016100b4565b6100a073fba0816a81bcabbf3829bed28618177a2bf0e82a81565b6100a07f000000000000000000000000000000000000000000000000000000000000000081565b6100a07f000000000000000000000000000000000000000000000000000000000000000081565b61015a610155366004610ab8565b6104c3565b005b6100a061016a366004610ab8565b6001602052600090815260409020546001600160a01b031681565b61015a610193366004610ab8565b6105b6565b600060205281600052604060002081815481106101b457600080fd5b6000918252602090912001546001600160a01b03169150829050565b6001600160a01b038082166000908152600160205260408120549091168061023f5760405162461bcd60e51b815260206004820152601460248201527f6c702d69732d6e6f742d7265676973746572656400000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038316600090815260208181526040808320805482518185028101850190935280835291929091908301828280156102a757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610289575b5050835193945060001993925060009150505b81811015610389576000336001600160a01b03166307ee40bf8684815181106102e5576102e5610adc565b60200260200101516040518263ffffffff1660e01b815260040161031891906001600160a01b0391909116815260200190565b60206040518083038186803b15801561033057600080fd5b505afa158015610344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103689190610b0b565b905083811015610376578093505b508061038181610b53565b9150506102ba565b5060001982106103db5760405162461bcd60e51b815260206004820152601d60248201527f6e6f2d6d696e2d756e6465726c79696e672d70726963652d666f756e640000006044820152606401610236565b6000821161042b5760405162461bcd60e51b815260206004820152601160248201527f696e76616c69642d6d696e2d70726963650000000000000000000000000000006044820152606401610236565b670de0b6b3a7640000846001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561046d57600080fd5b505afa158015610481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a59190610b0b565b6104af9084610b6e565b6104b99190610b8d565b9695505050505050565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561051057600080fd5b505afa158015610524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105489190610bd8565b6001600160a01b0316336001600160a01b0316146105a85760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610236565b6105b38160006106a2565b50565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561060357600080fd5b505afa158015610617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063b9190610bd8565b6001600160a01b0316336001600160a01b03161461069b5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610236565b6105b38160015b6040517fbdf475c30000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000009160009183169063bdf475c39060240160206040518083038186803b15801561072157600080fd5b505afa158015610735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107599190610bd8565b90506001600160a01b0381166107b15760405162461bcd60e51b815260206004820152601660248201527f696e76616c69642d6e6f6e2d666163746f72792d6c70000000000000000000006044820152606401610236565b6040517f9ac90d3d0000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015260009190841690639ac90d3d9060240160806040518083038186803b15801561080f57600080fd5b505afa158015610823573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108479190610bf5565b6001600160a01b03868116600090815260016020526040902054919250161561088b576001600160a01b038516600090815260208190526040812061088b91610a45565b6001600160a01b0385811660009081526001602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001686851690811790915590517f940494f10000000000000000000000000000000000000000000000000000000081526004810191909152909185169063940494f19060240160206040518083038186803b15801561092557600080fd5b505afa158015610939573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095d9190610b0b565b905060005b818110156109f7576001600160a01b038716600090815260208190526040902083826004811061099457610994610adc565b6020908102919091015182546001810184556000938452919092200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055806109ef81610b53565b915050610962565b50856001600160a01b03167f57d0e2ad10d7bd8ccdedffbc52e5e50ff5314a8d8be6248e7c0d05d4cd81435386604051610a35911515815260200190565b60405180910390a2505050505050565b50805460008255906000526020600020908101906105b391905b80821115610a735760008155600101610a5f565b5090565b6001600160a01b03811681146105b357600080fd5b60008060408385031215610a9f57600080fd5b8235610aaa81610a77565b946020939093013593505050565b600060208284031215610aca57600080fd5b8135610ad581610a77565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610b1d57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000600019821415610b6757610b67610b24565b5060010190565b6000816000190483118215151615610b8857610b88610b24565b500290565b600082610bc3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8051610bd381610a77565b919050565b600060208284031215610bea57600080fd5b8151610ad581610a77565b600060808284031215610c0757600080fd5b82601f830112610c1657600080fd5b6040516080810181811067ffffffffffffffff82111715610c60577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052806080840185811115610c7557600080fd5b845b81811015610c9657610c8881610bc8565b835260209283019201610c77565b50919594505050505056fea2646970667358221220cf04fbafdf7c755f7cbb77683bdc5ed531a314c8c91e9d44e56950ed5c603da664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPriceInUsd(address)": {
        "details": "This function is supposed to be called from `MasterOracle` only",
        "params": {
          "token_": "The address of asset"
        },
        "returns": {
          "_priceInUsd": "The USD price"
        }
      }
    },
    "title": "Oracle for Ellipsis LP tokens",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LpRegistered(address,bool)": {
        "notice": "Emitted when a token is registered"
      }
    },
    "kind": "user",
    "methods": {
      "getPriceInUsd(address)": {
        "notice": "Get USD (or equivalent) price of an asset"
      },
      "poolOf(address)": {
        "notice": "LP token => pool"
      },
      "registerLendingLp(address)": {
        "notice": "Register LP token data"
      },
      "registerLp(address)": {
        "notice": "Register LP token data"
      },
      "registry()": {
        "notice": "Registry contract"
      },
      "underlyingTokens(address,uint256)": {
        "notice": "LP token => coins mapping"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1328,
        "contract": "contracts/periphery/tokens/EllipsisLpTokenOracle.sol:EllipsisLpTokenOracle",
        "label": "underlyingTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 1333,
        "contract": "contracts/periphery/tokens/EllipsisLpTokenOracle.sol:EllipsisLpTokenOracle",
        "label": "poolOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      }
    }
  }
}
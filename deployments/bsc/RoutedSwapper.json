{
  "address": "0x64E26Aeb32003aa17CdC20D07b27EC141a3f863d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "key",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "oldRouting",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newRouting",
          "type": "bytes"
        }
      ],
      "name": "DefaultRoutingUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum DataTypes.ExchangeType",
          "name": "exchangeType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldExchange",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newExchange",
          "type": "address"
        }
      ],
      "name": "ExchangeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IExchange",
          "name": "exchange",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "SwapExactInput",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IExchange",
          "name": "exchange",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "SwapExactOutput",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.ExchangeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "addressOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "defaultRoutings",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllExchanges",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.SwapType",
          "name": "swapType_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "enum DataTypes.ExchangeType",
          "name": "exchange_",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        }
      ],
      "name": "setDefaultRouting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.ExchangeType",
          "name": "type_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "exchange_",
          "type": "address"
        }
      ],
      "name": "setExchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        }
      ],
      "name": "swapExactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        }
      ],
      "name": "swapExactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe575436a5181aaf3662fc836e21322b4fa283ad4fa9676c378c7524d4b834759",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x64E26Aeb32003aa17CdC20D07b27EC141a3f863d",
    "transactionIndex": 130,
    "gasUsed": "1853685",
    "logsBloom": "0x
    "blockHash": "0x02b35b54aefceb621c54648b0afa50176e1da6380a21bc79532bc83676459e0e",
    "transactionHash": "0xe575436a5181aaf3662fc836e21322b4fa283ad4fa9676c378c7524d4b834759",
    "logs": [],
    "blockNumber": 23135989,
    "cumulativeGasUsed": "16598149",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "09558308d54d3300cecb3743b140aa91",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oldRouting\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newRouting\",\"type\":\"bytes\"}],\"name\":\"DefaultRoutingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum DataTypes.ExchangeType\",\"name\":\"exchangeType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExchange\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExchange\",\"type\":\"address\"}],\"name\":\"ExchangeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IExchange\",\"name\":\"exchange\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwapExactInput\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IExchange\",\"name\":\"exchange\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwapExactOutput\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.ExchangeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"addressOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"defaultRoutings\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllExchanges\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.SwapType\",\"name\":\"swapType_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"enum DataTypes.ExchangeType\",\"name\":\"exchange_\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"}],\"name\":\"setDefaultRouting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.ExchangeType\",\"name\":\"type_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"exchange_\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"swapExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"swapExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAllExchanges()\":{\"details\":\"This function is gas intensive\"},\"getAmountIn(address,address,uint256)\":{\"details\":\"It shouldn't be used as oracle!!!\"},\"getAmountOut(address,address,uint256)\":{\"details\":\"It shouldn't be used as oracle!!!\"},\"setDefaultRouting(uint8,address,address,uint8,bytes)\":{\"details\":\"Use empty `path_` for removalUse `abi.encodePacked(tokenA, poolFee1, tokenB, poolFee2, tokenC, ...)` for UniswapV3 exchangeUse `abi.encode([tokenA, tokenB, tokenC, ...])` for UniswapV2-like exchanges\",\"params\":{\"exchange_\":\"The type (i.e. protocol) of the exchange\",\"path_\":\"The swap path\",\"swapType_\":\"If the routing is related to `EXACT_INPUT` or `EXACT_OUTPUT`\",\"tokenIn_\":\"The swap in token\",\"tokenOut_\":\"The swap out token\"}},\"setExchange(uint8,address)\":{\"details\":\"Use null `exchange_` for removal\"}},\"stateVariables\":{\"defaultRoutings\":{\"details\":\"Used to save gas by using a preset routing instead of looking for the best\"}},\"version\":1},\"userdoc\":{\"events\":{\"DefaultRoutingUpdated(bytes,bytes,bytes)\":{\"notice\":\"Emitted when default routing is updated\"},\"ExchangeUpdated(uint8,address,address)\":{\"notice\":\"Emitted when an exchange is added\"},\"SwapExactInput(address,bytes,address,address,uint256,uint256)\":{\"notice\":\"Emitted when exact-input swap is executed\"},\"SwapExactOutput(address,bytes,address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when exact-output swap is executed\"}},\"kind\":\"user\",\"methods\":{\"addressOf(uint8)\":{\"notice\":\"Mapping of exchanges' addresses by type\"},\"defaultRoutings(bytes)\":{\"notice\":\"Default swap routings\"},\"getAllExchanges()\":{\"notice\":\"The list of supported DEXes\"},\"getAmountIn(address,address,uint256)\":{\"notice\":\"Get *spot* quote It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\"},\"getAmountOut(address,address,uint256)\":{\"notice\":\"Get *spot* quote It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\"},\"setDefaultRouting(uint8,address,address,uint8,bytes)\":{\"notice\":\"Set default routing\"},\"setExchange(uint8,address)\":{\"notice\":\"Add or update exchange\"},\"swapExactInput(address,address,uint256,uint256,address)\":{\"notice\":\"Perform an exact input swap - will revert if there is no default routing\"},\"swapExactOutput(address,address,uint256,uint256,address)\":{\"notice\":\"Perform an exact output swap - will revert if there is no default routing\"}},\"notice\":\"Routed Swapper contract This contract execute swaps and quoted using pre-set swap routes\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swapper/RoutedSwapper.sol\":\"RoutedSwapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../core/AddressProvider.sol\\\";\\n\\n/**\\n * @notice Contract module which provides access control mechanism, where\\n * the governor account is granted with exclusive access to specific functions.\\n * @dev Uses the AddressProvider to get the governor\\n */\\nabstract contract Governable {\\n    IAddressProvider public constant addressProvider = IAddressProvider(0xfbA0816A81bcAbBf3829bED28618177a2bf0e82A);\\n\\n    /// @dev Throws if called by any account other than the governor.\\n    modifier onlyGovernor() {\\n        require(msg.sender == addressProvider.governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0aeb534826bb8e2428dd859d5cf5eb82664c4de97106a783d8fb92a2a7661e38\",\"license\":\"MIT\"},\"contracts/core/AddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/core/IAddressProvider.sol\\\";\\n\\ncontract AddressProvider is IAddressProvider, Initializable {\\n    /// @notice The governor account\\n    address public governor;\\n\\n    /// @notice The proposed governor account. Becomes the new governor after acceptance\\n    address public proposedGovernor;\\n\\n    /// @notice The PriceProvidersAggregator contract\\n    IPriceProvidersAggregator public override providersAggregator;\\n\\n    /// @notice The StableCoinProvider contract\\n    IStableCoinProvider public override stableCoinProvider;\\n\\n    /// @notice Emitted when providers aggregator is updated\\n    event ProvidersAggregatorUpdated(\\n        IPriceProvidersAggregator oldProvidersAggregator,\\n        IPriceProvidersAggregator newProvidersAggregator\\n    );\\n\\n    /// @notice Emitted when stable coin provider is updated\\n    event StableCoinProviderUpdated(\\n        IStableCoinProvider oldStableCoinProvider,\\n        IStableCoinProvider newStableCoinProvider\\n    );\\n\\n    /// @notice Emitted when governor is updated\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == msg.sender, \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    function initialize(address governor_) external initializer {\\n        governor = governor_;\\n        emit UpdatedGovernor(address(0), governor_);\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(msg.sender == proposedGovernor, \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @notice Update PriceProvidersAggregator contract\\n     */\\n    function updateProvidersAggregator(IPriceProvidersAggregator providersAggregator_) external onlyGovernor {\\n        require(address(providersAggregator_) != address(0), \\\"address-is-null\\\");\\n        emit ProvidersAggregatorUpdated(providersAggregator, providersAggregator_);\\n        providersAggregator = providersAggregator_;\\n    }\\n\\n    /**\\n     * @notice Update StableCoinProvider contract\\n     */\\n    function updateStableCoinProvider(IStableCoinProvider stableCoinProvider_) external onlyGovernor {\\n        emit StableCoinProviderUpdated(stableCoinProvider, stableCoinProvider_);\\n        stableCoinProvider = stableCoinProvider_;\\n    }\\n}\\n\",\"keccak256\":\"0x145bfcd3b2e957400f54636b517e54599fd918fd9e6e368a85e4362677e96ffa\",\"license\":\"MIT\"},\"contracts/interfaces/core/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStableCoinProvider.sol\\\";\\nimport \\\"./IPriceProvidersAggregator.sol\\\";\\n\\ninterface IAddressProvider {\\n    function governor() external view returns (address);\\n\\n    function providersAggregator() external view returns (IPriceProvidersAggregator);\\n\\n    function stableCoinProvider() external view returns (IStableCoinProvider);\\n}\\n\",\"keccak256\":\"0xa17f9e29e3de520c35faa21ddeb139fe73b3663c1ebf83f17b2c0aa00c297cf8\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n}\\n\",\"keccak256\":\"0x188c27728bd50b187944ef217b58751efd7b8ec3f1ef0d923be82298b2b0af0e\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvidersAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"./IPriceProvider.sol\\\";\\n\\n/**\\n * @notice PriceProvidersAggregator interface\\n * @dev Worth noting that the `_lastUpdatedAt` logic depends on the underlying price provider. In summary:\\n * ChainLink: returns the last updated date from the aggregator\\n * UniswapV2: returns the date of the latest pair oracle update\\n * UniswapV3: assumes that the price is always updated (returns block.timestamp)\\n * Flux: returns the last updated date from the aggregator\\n * Umbrella (FCD): returns the last updated date returned from their oracle contract\\n * Umbrella (Passport): returns the date of the latest pallet submission\\n * Anytime that a quote performs more than one query, it uses the oldest date as the `_lastUpdatedAt`.\\n * See more: https://github.com/bloqpriv/one-oracle/issues/64\\n */\\ninterface IPriceProvidersAggregator {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        external\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Provider Providers' mapping\\n     */\\n    function priceProviders(DataTypes.Provider provider_) external view returns (IPriceProvider _priceProvider);\\n\\n    /**\\n     * @notice Get quote\\n     * @param provider_ The price provider to get quote from\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote\\n     * @dev If providers aren't the same, uses native token as \\\"bridge\\\"\\n     * @param providerIn_ The price provider to get quote for the tokenIn\\n     * @param tokenIn_ The address of assetIn\\n     * @param providerOut_ The price provider to get quote for the tokenOut\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _tokenInLastUpdatedAt Last updated timestamp of `tokenIn_`\\n     * @return _nativeTokenLastUpdatedAt Last updated timestamp of native token (i.e. WETH) used when providers aren't the same\\n     * @return _tokenOutLastUpdatedAt Last updated timestamp of `tokenOut_`\\n     */\\n    function quote(\\n        DataTypes.Provider providerIn_,\\n        address tokenIn_,\\n        DataTypes.Provider providerOut_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountOut,\\n            uint256 _tokenInLastUpdatedAt,\\n            uint256 _nativeTokenLastUpdatedAt,\\n            uint256 _tokenOutLastUpdatedAt\\n        );\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Set a price provider\\n     * @dev Administrative function\\n     * @param provider_ The provider (from enum)\\n     * @param priceProvider_ The price provider contract\\n     */\\n    function setPriceProvider(DataTypes.Provider provider_, IPriceProvider priceProvider_) external;\\n}\\n\",\"keccak256\":\"0xbd791bd564866a61c6aac64171095a9134dfe9c5173a0ddbe22312a9bdfc9c19\",\"license\":\"MIT\"},\"contracts/interfaces/core/IStableCoinProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStableCoinProvider {\\n    /**\\n     * @notice Return the stable coin if pegged\\n     * @dev Check price relation between both stable coins and revert if peg is too loose\\n     * @return _stableCoin The primary stable coin if pass all checks\\n     */\\n    function getStableCoinIfPegged() external view returns (address _stableCoin);\\n\\n    /**\\n     * @notice Convert given amount of stable coin to USD representation (18 decimals)\\n     */\\n    function toUsdRepresentation(uint256 stableCoinAmount_) external view returns (uint256 _usdAmount);\\n}\\n\",\"keccak256\":\"0x57121c0faef63ea2d06b05048054ffa78d4d3c5734c2dabc1aaa4c5032e194c5\",\"license\":\"MIT\"},\"contracts/interfaces/swapper/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity <=0.8.9;\\n\\n/**\\n * @notice Exchange interface\\n */\\ninterface IExchange {\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the given path (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountsIn(uint256 _amountOut, bytes memory path_) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the given path (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountsOut(uint256 amountIn_, bytes memory path_) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getBestAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external returns (uint256 _amountIn, bytes memory _path);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getBestAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, bytes memory _path);\\n\\n    /**\\n     * @notice Perform an exact input swap\\n     * @dev Should transfer `amountIn_` before performing swap\\n     */\\n    function swapExactInput(\\n        bytes calldata path_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address outReceiver_\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap\\n     * @dev Should transfer `amountInMax_` before performing swap\\n     * @dev Sends swap remains - if any - to the `inSender_`\\n     */\\n    function swapExactOutput(\\n        bytes calldata path_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address inSender_,\\n        address outRecipient_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x7bda5651920a3a8f8c20c338350ca9b93f6b4f030cf8665005a15809b364bf22\",\"license\":\"MIT\"},\"contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x81fccad24b581704ec06b681d0f75d2af86c461142bf0224e118779783271d10\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary DataTypes {\\n    /**\\n     * @notice Price providers enumeration\\n     */\\n    enum Provider {\\n        NONE,\\n        CHAINLINK,\\n        UNISWAP_V3,\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UMBRELLA_FIRST_CLASS,\\n        UMBRELLA_PASSPORT,\\n        FLUX\\n    }\\n\\n    enum ExchangeType {\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UNISWAP_V3,\\n        PANCAKE_SWAP,\\n        CURVE\\n    }\\n\\n    enum SwapType {\\n        EXACT_INPUT,\\n        EXACT_OUTPUT\\n    }\\n}\\n\",\"keccak256\":\"0x95f2896f7ec6df99ed860b7682fd2801477b4517a27dd3f7bb111c879f43f847\",\"license\":\"MIT\"},\"contracts/swapper/RoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\nimport \\\"../interfaces/swapper/IExchange.sol\\\";\\nimport \\\"../libraries/DataTypes.sol\\\";\\n\\n/**\\n * @notice Routed Swapper contract\\n * This contract execute swaps and quoted using pre-set swap routes\\n */\\ncontract RoutedSwapper is IRoutedSwapper, Governable {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice List of the supported exchanges\\n     */\\n    EnumerableSet.AddressSet private allExchanges;\\n\\n    /**\\n     * @notice Mapping of exchanges' addresses by type\\n     */\\n    mapping(DataTypes.ExchangeType => address) public addressOf;\\n\\n    /**\\n     * @notice Default swap routings\\n     * @dev Used to save gas by using a preset routing instead of looking for the best\\n     */\\n    mapping(bytes => bytes) public defaultRoutings;\\n\\n    /// @notice Emitted when an exchange is added\\n    event ExchangeUpdated(\\n        DataTypes.ExchangeType indexed exchangeType,\\n        address indexed oldExchange,\\n        address indexed newExchange\\n    );\\n\\n    /// @notice Emitted when exact-input swap is executed\\n    event SwapExactInput(\\n        IExchange indexed exchange,\\n        bytes path,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /// @notice Emitted when exact-output swap is executed\\n    event SwapExactOutput(\\n        IExchange indexed exchange,\\n        bytes path,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountInMax,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /// @notice Emitted when default routing is updated\\n    event DefaultRoutingUpdated(bytes key, bytes oldRouting, bytes newRouting);\\n\\n    /// @inheritdoc IRoutedSwapper\\n    function getAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) public returns (uint256 _amountIn) {\\n        bytes memory _defaultRouting = defaultRoutings[\\n            abi.encodePacked(DataTypes.SwapType.EXACT_OUTPUT, tokenIn_, tokenOut_)\\n        ];\\n        require(_defaultRouting.length > 0, \\\"no-routing-found\\\");\\n\\n        (DataTypes.ExchangeType _exchangeType, bytes memory _path) = abi.decode(\\n            _defaultRouting,\\n            (DataTypes.ExchangeType, bytes)\\n        );\\n\\n        _amountIn = IExchange(addressOf[_exchangeType]).getAmountsIn(amountOut_, _path);\\n    }\\n\\n    /// @inheritdoc IRoutedSwapper\\n    function getAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) public returns (uint256 _amountOut) {\\n        bytes memory _defaultRouting = defaultRoutings[\\n            abi.encodePacked(DataTypes.SwapType.EXACT_INPUT, tokenIn_, tokenOut_)\\n        ];\\n        require(_defaultRouting.length > 0, \\\"no-routing-found\\\");\\n\\n        (DataTypes.ExchangeType _exchangeType, bytes memory _path) = abi.decode(\\n            _defaultRouting,\\n            (DataTypes.ExchangeType, bytes)\\n        );\\n\\n        _amountOut = IExchange(addressOf[_exchangeType]).getAmountsOut(amountIn_, _path);\\n    }\\n\\n    /// @inheritdoc IRoutedSwapper\\n    function getAllExchanges() external view override returns (address[] memory) {\\n        return allExchanges.values();\\n    }\\n\\n    /// @inheritdoc IRoutedSwapper\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address receiver_\\n    ) external returns (uint256 _amountOut) {\\n        bytes memory _defaultRouting = defaultRoutings[\\n            abi.encodePacked(DataTypes.SwapType.EXACT_INPUT, tokenIn_, tokenOut_)\\n        ];\\n        require(_defaultRouting.length > 0, \\\"no-routing-found\\\");\\n\\n        (DataTypes.ExchangeType _exchangeType, bytes memory _path) = abi.decode(\\n            _defaultRouting,\\n            (DataTypes.ExchangeType, bytes)\\n        );\\n\\n        IExchange _exchange = IExchange(addressOf[_exchangeType]);\\n        uint256 _balanceBefore = IERC20(tokenIn_).balanceOf(address(_exchange));\\n        IERC20(tokenIn_).safeTransferFrom(msg.sender, address(_exchange), amountIn_);\\n        _amountOut = _exchange.swapExactInput(\\n            _path,\\n            // amountIn will be balanceNow - balanceBefore for fee-on-transfer tokens\\n            IERC20(tokenIn_).balanceOf(address(_exchange)) - _balanceBefore,\\n            amountOutMin_,\\n            receiver_\\n        );\\n        emit SwapExactInput(_exchange, _path, tokenIn_, tokenOut_, amountIn_, _amountOut);\\n    }\\n\\n    /// @inheritdoc IRoutedSwapper\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn) {\\n        bytes memory _defaultRouting = defaultRoutings[\\n            abi.encodePacked(DataTypes.SwapType.EXACT_OUTPUT, tokenIn_, tokenOut_)\\n        ];\\n        require(_defaultRouting.length > 0, \\\"no-routing-found\\\");\\n        (DataTypes.ExchangeType _exchangeType, bytes memory _path) = abi.decode(\\n            _defaultRouting,\\n            (DataTypes.ExchangeType, bytes)\\n        );\\n\\n        IExchange _exchange = IExchange(addressOf[_exchangeType]);\\n        IERC20(tokenIn_).safeTransferFrom(msg.sender, address(_exchange), amountInMax_);\\n        _amountIn = _exchange.swapExactOutput(_path, amountOut_, amountInMax_, msg.sender, receiver_);\\n        emit SwapExactOutput(_exchange, _path, tokenIn_, tokenOut_, amountInMax_, _amountIn, amountOut_);\\n    }\\n\\n    /**\\n     * @notice Add or update exchange\\n     * @dev Use null `exchange_` for removal\\n     */\\n    function setExchange(DataTypes.ExchangeType type_, address exchange_) external onlyGovernor {\\n        address _currentExchange = addressOf[type_];\\n\\n        if (_currentExchange == address(0)) {\\n            // Adding\\n            require(allExchanges.add(exchange_), \\\"exchange-exists\\\");\\n            addressOf[type_] = exchange_;\\n        } else if (exchange_ == address(0)) {\\n            // Removing\\n            require(allExchanges.remove(_currentExchange), \\\"exchange-does-not-exist\\\");\\n            delete addressOf[type_];\\n        } else {\\n            // Updating\\n            require(allExchanges.remove(_currentExchange), \\\"exchange-does-not-exist\\\");\\n            require(allExchanges.add(exchange_), \\\"exchange-exists\\\");\\n            addressOf[type_] = exchange_;\\n        }\\n        emit ExchangeUpdated(type_, _currentExchange, exchange_);\\n    }\\n\\n    /**\\n     * @notice Set default routing\\n     * @dev Use empty `path_` for removal\\n     * @param swapType_ If the routing is related to `EXACT_INPUT` or `EXACT_OUTPUT`\\n     * @param tokenIn_ The swap in token\\n     * @param tokenOut_ The swap out token\\n     * @param exchange_ The type (i.e. protocol) of the exchange\\n     * @param path_ The swap path\\n     * @dev Use `abi.encodePacked(tokenA, poolFee1, tokenB, poolFee2, tokenC, ...)` for UniswapV3 exchange\\n     * @dev Use `abi.encode([tokenA, tokenB, tokenC, ...])` for UniswapV2-like exchanges\\n     */\\n    function setDefaultRouting(\\n        DataTypes.SwapType swapType_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        DataTypes.ExchangeType exchange_,\\n        bytes calldata path_\\n    ) external onlyGovernor {\\n        bytes memory _key = abi.encodePacked(swapType_, tokenIn_, tokenOut_);\\n        bytes memory _currentRouting = defaultRoutings[_key];\\n        bytes memory _newRouting = abi.encode(exchange_, path_);\\n        if (path_.length == 0) {\\n            delete defaultRoutings[_key];\\n        } else {\\n            defaultRoutings[_key] = _newRouting;\\n        }\\n        emit DefaultRoutingUpdated(_key, _currentRouting, _newRouting);\\n    }\\n}\\n\",\"keccak256\":\"0x1aaf5f7f7ad202520a5bed9608333e71303637f3327f827151194ffa96802c18\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506120b1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806353b609b5116100765780636ccb2b011161005b5780636ccb2b01146101a257806381cc619b146101b5578063c71f8f94146101c857600080fd5b806353b609b51461016657806367b426451461017957600080fd5b80633254e7b1116100a75780633254e7b11461011057806337c03fb6146101305780634aa066521461014557600080fd5b80632954018c146100c35780632aa3e6c6146100fb575b600080fd5b6100de73fba0816a81bcabbf3829bed28618177a2bf0e82a81565b6040516001600160a01b0390911681526020015b60405180910390f35b61010e61010936600461191e565b6101db565b005b61012361011e3660046119df565b6105e9565b6040516100f29190611ab7565b61013861068e565b6040516100f29190611aca565b610158610153366004611b17565b61069f565b6040519081526020016100f2565b610158610174366004611b17565b6108b7565b6100de610187366004611b58565b6002602052600090815260409020546001600160a01b031681565b6101586101b0366004611b75565b610a72565b6101586101c3366004611b75565b610e1a565b61010e6101d6366004611bd4565b6110b2565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561022857600080fd5b505afa15801561023c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102609190611c94565b6001600160a01b0316336001600160a01b0316146102c55760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000600260008460078111156102dd576102dd611cb1565b60078111156102ee576102ee611cb1565b81526020810191909152604001600020546001600160a01b03169050806103c55761031a600083611341565b6103665760405162461bcd60e51b815260206004820152600f60248201527f65786368616e67652d657869737473000000000000000000000000000000000060448201526064016102bc565b816002600085600781111561037d5761037d611cb1565b600781111561038e5761038e611cb1565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610595565b6001600160a01b03821661048c576103de60008261135f565b61042a5760405162461bcd60e51b815260206004820152601760248201527f65786368616e67652d646f65732d6e6f742d657869737400000000000000000060448201526064016102bc565b6002600084600781111561044057610440611cb1565b600781111561045157610451611cb1565b8152602081019190915260400160002080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055610595565b61049760008261135f565b6104e35760405162461bcd60e51b815260206004820152601760248201527f65786368616e67652d646f65732d6e6f742d657869737400000000000000000060448201526064016102bc565b6104ee600083611341565b61053a5760405162461bcd60e51b815260206004820152600f60248201527f65786368616e67652d657869737473000000000000000000000000000000000060448201526064016102bc565b816002600085600781111561055157610551611cb1565b600781111561056257610562611cb1565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b816001600160a01b0316816001600160a01b03168460078111156105bb576105bb611cb1565b6040517fd368678e81cb4fa5855a3e8bc7c4df1cdfdc699b194e44bff3d1a4399ee6be1490600090a4505050565b80516020818301810180516003825292820191909301209152805461060d90611ce0565b80601f016020809104026020016040519081016040528092919081815260200182805461063990611ce0565b80156106865780601f1061065b57610100808354040283529160200191610686565b820191906000526020600020905b81548152906001019060200180831161066957829003601f168201915b505050505081565b606061069a6000611374565b905090565b6000806003600086866040516020016106ba93929190611d34565b60408051601f19818403018152908290526106d491611d8a565b908152602001604051809103902080546106ed90611ce0565b80601f016020809104026020016040519081016040528092919081815260200182805461071990611ce0565b80156107665780601f1061073b57610100808354040283529160200191610766565b820191906000526020600020905b81548152906001019060200180831161074957829003601f168201915b5050505050905060008151116107be5760405162461bcd60e51b815260206004820152601060248201527f6e6f2d726f7574696e672d666f756e640000000000000000000000000000000060448201526064016102bc565b600080828060200190518101906107d59190611da6565b91509150600260008360078111156107ef576107ef611cb1565b600781111561080057610800611cb1565b8152602081019190915260409081016000205490517ffee9574a0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063fee9574a9061085a9088908590600401611e33565b602060405180830381600087803b15801561087457600080fd5b505af1158015610888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac9190611e4c565b979650505050505050565b6000806003600186866040516020016108d293929190611d34565b60408051601f19818403018152908290526108ec91611d8a565b9081526020016040518091039020805461090590611ce0565b80601f016020809104026020016040519081016040528092919081815260200182805461093190611ce0565b801561097e5780601f106109535761010080835404028352916020019161097e565b820191906000526020600020905b81548152906001019060200180831161096157829003601f168201915b5050505050905060008151116109d65760405162461bcd60e51b815260206004820152601060248201527f6e6f2d726f7574696e672d666f756e640000000000000000000000000000000060448201526064016102bc565b600080828060200190518101906109ed9190611da6565b9150915060026000836007811115610a0757610a07611cb1565b6007811115610a1857610a18611cb1565b8152602081019190915260409081016000205490517f2aa4a9e50000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690632aa4a9e59061085a9088908590600401611e33565b600080600360008888604051602001610a8d93929190611d34565b60408051601f1981840301815290829052610aa791611d8a565b90815260200160405180910390208054610ac090611ce0565b80601f0160208091040260200160405190810160405280929190818152602001828054610aec90611ce0565b8015610b395780601f10610b0e57610100808354040283529160200191610b39565b820191906000526020600020905b815481529060010190602001808311610b1c57829003601f168201915b505050505090506000815111610b915760405162461bcd60e51b815260206004820152601060248201527f6e6f2d726f7574696e672d666f756e640000000000000000000000000000000060448201526064016102bc565b60008082806020019051810190610ba89190611da6565b91509150600060026000846007811115610bc457610bc4611cb1565b6007811115610bd557610bd5611cb1565b81526020810191909152604090810160009081205491517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201819052935090918c16906370a082319060240160206040518083038186803b158015610c4957600080fd5b505afa158015610c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c819190611e4c565b9050610c986001600160a01b038c1633848c611388565b816001600160a01b0316634909c29a84838e6001600160a01b03166370a08231876040518263ffffffff1660e01b8152600401610ce491906001600160a01b0391909116815260200190565b60206040518083038186803b158015610cfc57600080fd5b505afa158015610d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d349190611e4c565b610d3e9190611e65565b8b8b6040518563ffffffff1660e01b8152600401610d5f9493929190611ea3565b602060405180830381600087803b158015610d7957600080fd5b505af1158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db19190611e4c565b9550896001600160a01b03168b6001600160a01b0316836001600160a01b03167f332d883d1035df5d58d7a529e9dab834dbc4c3983a2d629a6424230ec1bf8c04868d8b604051610e0493929190611edb565b60405180910390a4505050505095945050505050565b600080600360018888604051602001610e3593929190611d34565b60408051601f1981840301815290829052610e4f91611d8a565b90815260200160405180910390208054610e6890611ce0565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9490611ce0565b8015610ee15780601f10610eb657610100808354040283529160200191610ee1565b820191906000526020600020905b815481529060010190602001808311610ec457829003601f168201915b505050505090506000815111610f395760405162461bcd60e51b815260206004820152601060248201527f6e6f2d726f7574696e672d666f756e640000000000000000000000000000000060448201526064016102bc565b60008082806020019051810190610f509190611da6565b91509150600060026000846007811115610f6c57610f6c611cb1565b6007811115610f7d57610f7d611cb1565b81526020810191909152604001600020546001600160a01b039081169150610fa9908b1633838a611388565b6040517f9d9f384d0000000000000000000000000000000000000000000000000000000081526001600160a01b03821690639d9f384d90610ff69085908c908c9033908d90600401611f00565b602060405180830381600087803b15801561101057600080fd5b505af1158015611024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110489190611e4c565b9450886001600160a01b03168a6001600160a01b0316826001600160a01b03167fe2b399ee44535cc98392f9d1d787f5c925873e04562dee99db8c1f781240c062858b8a8e60405161109d9493929190611f40565b60405180910390a45050505095945050505050565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ff57600080fd5b505afa158015611113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111379190611c94565b6001600160a01b0316336001600160a01b0316146111975760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f72000000000000000000000000000000000000000060448201526064016102bc565b60008686866040516020016111ae93929190611d34565b604051602081830303815290604052905060006003826040516111d19190611d8a565b908152602001604051809103902080546111ea90611ce0565b80601f016020809104026020016040519081016040528092919081815260200182805461121690611ce0565b80156112635780601f1061123857610100808354040283529160200191611263565b820191906000526020600020905b81548152906001019060200180831161124657829003601f168201915b50505050509050600085858560405160200161128193929190611f6f565b60408051601f198184030181529190529050836112c7576003836040516112a89190611d8a565b908152602001604051809103902060006112c29190611826565b6112fb565b806003846040516112d89190611d8a565b908152602001604051809103902090805190602001906112f9929190611863565b505b7f69f079d2078c67fbbdee50f8233f472aed9a0ddc1deb4c04fa3ed59fdee4db3083838360405161132e93929190611fb8565b60405180910390a1505050505050505050565b6000611356836001600160a01b038416611416565b90505b92915050565b6000611356836001600160a01b038416611465565b6060600061138183611558565b9392505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526114109085906115b4565b50505050565b600081815260018301602052604081205461145d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611359565b506000611359565b6000818152600183016020526040812054801561154e576000611489600183611e65565b855490915060009061149d90600190611e65565b90508181146115025760008660000182815481106114bd576114bd611ffb565b90600052602060002001549050808760000184815481106114e0576114e0611ffb565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806115135761151361202a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611359565b6000915050611359565b6060816000018054806020026020016040519081016040528092919081815260200182805480156115a857602002820191906000526020600020905b815481526020019060010190808311611594575b50505050509050919050565b6000611609826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661169e9092919063ffffffff16565b80519091501561169957808060200190518101906116279190612059565b6116995760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102bc565b505050565b60606116ad84846000856116b5565b949350505050565b60608247101561172d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102bc565b6001600160a01b0385163b6117845760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102bc565b600080866001600160a01b031685876040516117a09190611d8a565b60006040518083038185875af1925050503d80600081146117dd576040519150601f19603f3d011682016040523d82523d6000602084013e6117e2565b606091505b50915091506108ac828286606083156117fc575081611381565b82511561180c5782518084602001fd5b8160405162461bcd60e51b81526004016102bc9190611ab7565b50805461183290611ce0565b6000825580601f10611842575050565b601f01602090049060005260206000209081019061186091906118e7565b50565b82805461186f90611ce0565b90600052602060002090601f01602090048101928261189157600085556118d7565b82601f106118aa57805160ff19168380011785556118d7565b828001600101855582156118d7579182015b828111156118d75782518255916020019190600101906118bc565b506118e39291506118e7565b5090565b5b808211156118e357600081556001016118e8565b6008811061186057600080fd5b6001600160a01b038116811461186057600080fd5b6000806040838503121561193157600080fd5b823561193c816118fc565b9150602083013561194c81611909565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119af576119af611957565b604052919050565b600067ffffffffffffffff8211156119d1576119d1611957565b50601f01601f191660200190565b6000602082840312156119f157600080fd5b813567ffffffffffffffff811115611a0857600080fd5b8201601f81018413611a1957600080fd5b8035611a2c611a27826119b7565b611986565b818152856020838501011115611a4157600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b83811015611a7a578181015183820152602001611a62565b838111156114105750506000910152565b60008151808452611aa3816020860160208601611a5f565b601f01601f19169290920160200192915050565b6020815260006113566020830184611a8b565b6020808252825182820181905260009190848201906040850190845b81811015611b0b5783516001600160a01b031683529284019291840191600101611ae6565b50909695505050505050565b600080600060608486031215611b2c57600080fd5b8335611b3781611909565b92506020840135611b4781611909565b929592945050506040919091013590565b600060208284031215611b6a57600080fd5b8135611381816118fc565b600080600080600060a08688031215611b8d57600080fd5b8535611b9881611909565b94506020860135611ba881611909565b935060408601359250606086013591506080860135611bc681611909565b809150509295509295909350565b60008060008060008060a08789031215611bed57600080fd5b863560028110611bfc57600080fd5b95506020870135611c0c81611909565b94506040870135611c1c81611909565b93506060870135611c2c816118fc565b9250608087013567ffffffffffffffff80821115611c4957600080fd5b818901915089601f830112611c5d57600080fd5b813581811115611c6c57600080fd5b8a6020828501011115611c7e57600080fd5b6020830194508093505050509295509295509295565b600060208284031215611ca657600080fd5b815161138181611909565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600181811c90821680611cf457607f821691505b60208210811415611d2e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060028510611d4657611d46611cb1565b5060f89390931b83527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606092831b81166001850152911b16601582015260290190565b60008251611d9c818460208701611a5f565b9190910192915050565b60008060408385031215611db957600080fd5b8251611dc4816118fc565b602084015190925067ffffffffffffffff811115611de157600080fd5b8301601f81018513611df257600080fd5b8051611e00611a27826119b7565b818152866020838501011115611e1557600080fd5b611e26826020830160208601611a5f565b8093505050509250929050565b8281526040602082015260006116ad6040830184611a8b565b600060208284031215611e5e57600080fd5b5051919050565b600082821015611e9e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b608081526000611eb66080830187611a8b565b60208301959095525060408101929092526001600160a01b0316606090910152919050565b606081526000611eee6060830186611a8b565b60208301949094525060400152919050565b60a081526000611f1360a0830188611a8b565b60208301969096525060408101939093526001600160a01b03918216606084015216608090910152919050565b608081526000611f536080830187611a8b565b6020830195909552506040810192909252606090910152919050565b600060088510611f8157611f81611cb1565b84825260406020830152826040830152828460608401376000606084840101526060601f19601f8501168301019050949350505050565b606081526000611fcb6060830186611a8b565b8281036020840152611fdd8186611a8b565b90508281036040840152611ff18185611a8b565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006020828403121561206b57600080fd5b8151801515811461138157600080fdfea26469706673582212208a4507ccc51ea7b70e17b1055343a85193db26aef0aa3599dda3c4b2d0c2dfab64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAllExchanges()": {
        "details": "This function is gas intensive"
      },
      "getAmountIn(address,address,uint256)": {
        "details": "It shouldn't be used as oracle!!!"
      },
      "getAmountOut(address,address,uint256)": {
        "details": "It shouldn't be used as oracle!!!"
      },
      "setDefaultRouting(uint8,address,address,uint8,bytes)": {
        "details": "Use empty `path_` for removalUse `abi.encodePacked(tokenA, poolFee1, tokenB, poolFee2, tokenC, ...)` for UniswapV3 exchangeUse `abi.encode([tokenA, tokenB, tokenC, ...])` for UniswapV2-like exchanges",
        "params": {
          "exchange_": "The type (i.e. protocol) of the exchange",
          "path_": "The swap path",
          "swapType_": "If the routing is related to `EXACT_INPUT` or `EXACT_OUTPUT`",
          "tokenIn_": "The swap in token",
          "tokenOut_": "The swap out token"
        }
      },
      "setExchange(uint8,address)": {
        "details": "Use null `exchange_` for removal"
      }
    },
    "stateVariables": {
      "defaultRoutings": {
        "details": "Used to save gas by using a preset routing instead of looking for the best"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DefaultRoutingUpdated(bytes,bytes,bytes)": {
        "notice": "Emitted when default routing is updated"
      },
      "ExchangeUpdated(uint8,address,address)": {
        "notice": "Emitted when an exchange is added"
      },
      "SwapExactInput(address,bytes,address,address,uint256,uint256)": {
        "notice": "Emitted when exact-input swap is executed"
      },
      "SwapExactOutput(address,bytes,address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when exact-output swap is executed"
      }
    },
    "kind": "user",
    "methods": {
      "addressOf(uint8)": {
        "notice": "Mapping of exchanges' addresses by type"
      },
      "defaultRoutings(bytes)": {
        "notice": "Default swap routings"
      },
      "getAllExchanges()": {
        "notice": "The list of supported DEXes"
      },
      "getAmountIn(address,address,uint256)": {
        "notice": "Get *spot* quote It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)."
      },
      "getAmountOut(address,address,uint256)": {
        "notice": "Get *spot* quote It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)."
      },
      "setDefaultRouting(uint8,address,address,uint8,bytes)": {
        "notice": "Set default routing"
      },
      "setExchange(uint8,address)": {
        "notice": "Add or update exchange"
      },
      "swapExactInput(address,address,uint256,uint256,address)": {
        "notice": "Perform an exact input swap - will revert if there is no default routing"
      },
      "swapExactOutput(address,address,uint256,uint256,address)": {
        "notice": "Perform an exact output swap - will revert if there is no default routing"
      }
    },
    "notice": "Routed Swapper contract This contract execute swaps and quoted using pre-set swap routes",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12732,
        "contract": "contracts/swapper/RoutedSwapper.sol:RoutedSwapper",
        "label": "allExchanges",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressSet)1970_storage"
      },
      {
        "astId": 12738,
        "contract": "contracts/swapper/RoutedSwapper.sol:RoutedSwapper",
        "label": "addressOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_enum(ExchangeType)9918,t_address)"
      },
      {
        "astId": 12743,
        "contract": "contracts/swapper/RoutedSwapper.sol:RoutedSwapper",
        "label": "defaultRoutings",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes_memory_ptr,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(ExchangeType)9918": {
        "encoding": "inplace",
        "label": "enum DataTypes.ExchangeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_enum(ExchangeType)9918,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(ExchangeType)9918",
        "label": "mapping(enum DataTypes.ExchangeType => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AddressSet)1970_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1969,
            "contract": "contracts/swapper/RoutedSwapper.sol:RoutedSwapper",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1669_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1669_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1664,
            "contract": "contracts/swapper/RoutedSwapper.sol:RoutedSwapper",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1668,
            "contract": "contracts/swapper/RoutedSwapper.sol:RoutedSwapper",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x1CC8Ba8f1C4698549cd4BAB39c99412982684Cab",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "initCodeHash_",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "wethLike_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldWethLike",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newWethLike",
          "type": "address"
        }
      ],
      "name": "WethLikeTokenUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path_",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path_",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        }
      ],
      "name": "getBestAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "getBestAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "outReceiver_",
          "type": "address"
        }
      ],
      "name": "swapExactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "inSender_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outRecipient_",
          "type": "address"
        }
      ],
      "name": "swapExactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposedGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wethLike_",
          "type": "address"
        }
      ],
      "name": "updateWethLikeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethLike",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ffcf235d0c9a2706c82e016f2403a15d9a67b644a790a7f4084d28636e4308d",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x1CC8Ba8f1C4698549cd4BAB39c99412982684Cab",
    "transactionIndex": 9,
    "gasUsed": "2147175",
    "logsBloom": "0x
    "blockHash": "0x3c0d2090d4486d290a2c5cab26bf08286bfb80763cca819ea3025841ac1ccb43",
    "transactionHash": "0x0ffcf235d0c9a2706c82e016f2403a15d9a67b644a790a7f4084d28636e4308d",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 17664022,
        "transactionHash": "0x0ffcf235d0c9a2706c82e016f2403a15d9a67b644a790a7f4084d28636e4308d",
        "address": "0x1CC8Ba8f1C4698549cd4BAB39c99412982684Cab",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000076d266dfd3754f090488ae12f6bd115cd7e77ebd"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0x3c0d2090d4486d290a2c5cab26bf08286bfb80763cca819ea3025841ac1ccb43"
      }
    ],
    "blockNumber": 17664022,
    "cumulativeGasUsed": "3207387",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10",
    "0x0bbca9af0511ad1a1da383135cf3a8d2ac620e549ef9f6ae3a4c33c2fed0af91",
    "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
  ],
  "numDeployments": 1,
  "solcInputHash": "b7d2ef77559d78105af4c2ea80b55c05",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wethLike_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldWethLike\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWethLike\",\"type\":\"address\"}],\"name\":\"WethLikeTokenUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path_\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path_\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"}],\"name\":\"getBestAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"getBestAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outReceiver_\",\"type\":\"address\"}],\"name\":\"swapExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inSender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outRecipient_\",\"type\":\"address\"}],\"name\":\"swapExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wethLike_\",\"type\":\"address\"}],\"name\":\"updateWethLikeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethLike\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptGovernorship()\":{\"details\":\"Allows new governor to accept governorship of the contract.\"},\"constructor\":{\"details\":\"Doesn't consider router.WETH() as `wethLike` because isn't guaranteed that it's the most liquid token.\"},\"getAmountsIn(uint256,address[])\":{\"details\":\"getBestAmountIn require a try/catch version of getAmountsIn and try/catch do not work with internal library functions, hence wrapped library call in this function so that it can be used in try/catch\"},\"getAmountsIn(uint256,bytes)\":{\"details\":\"It shouldn't be used as oracle!!!\"},\"getAmountsOut(uint256,address[])\":{\"details\":\"getBestAmountOut require a try/catch version of getAmountsOut and try/catch do not work with internal library functions, hence wrapped library call in this function so that it can be used in try/catch\"},\"getAmountsOut(uint256,bytes)\":{\"details\":\"It shouldn't be used as oracle!!!\"},\"getBestAmountIn(address,address,uint256)\":{\"details\":\"It shouldn't be used as oracle!!!\"},\"getBestAmountOut(address,address,uint256)\":{\"details\":\"It shouldn't be used as oracle!!!\"},\"swapExactInput(bytes,uint256,uint256,address)\":{\"details\":\"Should transfer `amountIn_` before performing swap\"},\"swapExactOutput(bytes,uint256,uint256,address,address)\":{\"details\":\"Should transfer `amountInMax_` before performing swapSends swap remains - if any - to the `inSender_`\"},\"transferGovernorship(address)\":{\"details\":\"Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner.\"}},\"stateVariables\":{\"wethLike\":{\"details\":\"I.e. should be the most liquid token that offer best routers among trade pairsIt's usually the wrapper token of the chain's native coin but it isn't always true For instance: On Polygon, the `WETH` is more liquid than `WMATIC` on UniV3 protocol.\"}},\"version\":1},\"userdoc\":{\"events\":{\"WethLikeTokenUpdated(address,address)\":{\"notice\":\"Emitted when wethLike token is updated\"}},\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The UniswapV2-Like factory contract\"},\"getAmountsIn(uint256,bytes)\":{\"notice\":\"Get *spot* quote It will return the swap amount based on the current reserves of the given path (i.e. spot price)\"},\"getAmountsOut(uint256,bytes)\":{\"notice\":\"Get *spot* quote It will return the swap amount based on the current reserves of the given path (i.e. spot price)\"},\"getBestAmountIn(address,address,uint256)\":{\"notice\":\"Get *spot* quote It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)\"},\"getBestAmountOut(address,address,uint256)\":{\"notice\":\"Get *spot* quote It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)\"},\"swapExactInput(bytes,uint256,uint256,address)\":{\"notice\":\"Perform an exact input swap\"},\"swapExactOutput(bytes,uint256,uint256,address,address)\":{\"notice\":\"Perform an exact output swap\"},\"updateWethLikeToken(address)\":{\"notice\":\"Update WETH-Like token\"},\"wethLike()\":{\"notice\":\"The WETH-Like token (a.k.a. Native Token)\"}},\"notice\":\"UniswapV2 Like Exchange\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swapper/UniswapV2LikeExchange.sol\":\"UniswapV2LikeExchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, Context, Initializable {\\n    address public governor;\\n    address private proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Governable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal initializer {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == _msgSender(), \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(proposedGovernor == _msgSender(), \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x57b52a711313030d4d996899be3c248fbfd4ee72b5578d4b427dddb500d668ab\",\"license\":\"MIT\"},\"contracts/dependencies/uniswap/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\\n\\n/**\\n * This is copied from Uniswap's V2SwapRouter.sol deployed at 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45\\n * and licensed under GPL-2.0-or-later.\\n * Changelog:\\n * - Removed hardcoded initCodeHash and taking as param so that we can support multiple UniswapV2Like exchanges\\n * - Added function getAmountsOut()\\n */\\nlibrary UniswapV2Library {\\n    using LowGasSafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB);\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0));\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, bytes32 initCodeHash, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint160\\n        (uint256(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                initCodeHash\\n            )))));\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        bytes32 initCodeHash,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, initCodeHash, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, 'INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0);\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, 'INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0);\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n        // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        bytes32 initCodeHash,\\n        uint amountIn,\\n        address[] memory path\\n    ) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2);\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i < path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, initCodeHash, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        bytes32 initCodeHash,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2);\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory,initCodeHash, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9a68d6ffa30117faaec498b632a6264664e01c154b79741e3bfaf859d90b2885\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/swapper/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity <=0.8.9;\\n\\n/**\\n * @notice Exchange interface\\n */\\ninterface IExchange {\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the given path (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountsIn(uint256 _amountOut, bytes memory path_) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the given path (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountsOut(uint256 amountIn_, bytes memory path_) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getBestAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external returns (uint256 _amountIn, bytes memory _path);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getBestAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, bytes memory _path);\\n\\n    /**\\n     * @notice Perform an exact input swap\\n     * @dev Should transfer `amountIn_` before performing swap\\n     */\\n    function swapExactInput(\\n        bytes calldata path_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address outReceiver_\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap\\n     * @dev Should transfer `amountInMax_` before performing swap\\n     * @dev Sends swap remains - if any - to the `inSender_`\\n     */\\n    function swapExactOutput(\\n        bytes calldata path_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address inSender_,\\n        address outRecipient_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x7bda5651920a3a8f8c20c338350ca9b93f6b4f030cf8665005a15809b364bf22\",\"license\":\"MIT\"},\"contracts/swapper/UniswapV2LikeExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../dependencies/uniswap/libraries/UniswapV2Library.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\nimport \\\"../interfaces/swapper/IExchange.sol\\\";\\n\\n/**\\n * @notice UniswapV2 Like Exchange\\n */\\ncontract UniswapV2LikeExchange is IExchange, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice The WETH-Like token (a.k.a. Native Token)\\n     * @dev I.e. should be the most liquid token that offer best routers among trade pairs\\n     * @dev It's usually the wrapper token of the chain's native coin but it isn't always true\\n     * For instance: On Polygon, the `WETH` is more liquid than `WMATIC` on UniV3 protocol.\\n     */\\n    address public wethLike;\\n\\n    /**\\n     * @notice The UniswapV2-Like factory contract\\n     */\\n    address public immutable factory;\\n\\n    bytes32 internal immutable initCodeHash;\\n    /// @notice Emitted when wethLike token is updated\\n    event WethLikeTokenUpdated(address oldWethLike, address newWethLike);\\n\\n    /**\\n     * @dev Doesn't consider router.WETH() as `wethLike` because isn't guaranteed that it's the most liquid token.\\n     */\\n    constructor(\\n        address factory_,\\n        bytes32 initCodeHash_,\\n        address wethLike_\\n    ) {\\n        factory = factory_;\\n        initCodeHash = initCodeHash_;\\n        wethLike = wethLike_;\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function getAmountsIn(uint256 amountOut_, bytes memory path_) external view override returns (uint256 _amountIn) {\\n        _amountIn = getAmountsIn(amountOut_, _decodePath(path_));\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function getAmountsOut(uint256 amountIn_, bytes memory path_) external view override returns (uint256 _amountOut) {\\n        _amountOut = getAmountsOut(amountIn_, _decodePath(path_));\\n    }\\n\\n    /**\\n     * @dev getBestAmountIn require a try/catch version of getAmountsIn and try/catch do not work with internal\\n     * library functions, hence wrapped library call in this function so that it can be used in try/catch\\n     */\\n    function getAmountsIn(uint256 amountOut_, address[] memory path_) public view returns (uint256 _amountIn) {\\n        _amountIn = UniswapV2Library.getAmountsIn(factory, initCodeHash, amountOut_, path_)[0];\\n    }\\n\\n    /**\\n     * @dev getBestAmountOut require a try/catch version of getAmountsOut and try/catch do not work with internal\\n     * library functions, hence wrapped library call in this function so that it can be used in try/catch\\n     */\\n    function getAmountsOut(uint256 amountIn_, address[] memory path_) public view returns (uint256 _amountOut) {\\n        _amountOut = UniswapV2Library.getAmountsOut(factory, initCodeHash, amountIn_, path_)[path_.length - 1];\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function getBestAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external returns (uint256 _amountIn, bytes memory _path) {\\n        // 1. Check IN-OUT pair\\n        address[] memory _pathA = new address[](2);\\n        _pathA[0] = tokenIn_;\\n        _pathA[1] = tokenOut_;\\n        uint256 _amountInA = _getAmountsIn(amountOut_, _pathA);\\n\\n        if (tokenIn_ == wethLike || tokenOut_ == wethLike) {\\n            // Returns if one of the token is WETH-Like\\n            require(_amountInA > 0, \\\"no-path-found\\\");\\n            return (_amountInA, _encodePath(_pathA));\\n        }\\n\\n        // 2. Check IN-WETH-OUT path\\n        address[] memory _pathB = new address[](3);\\n        _pathB[0] = tokenIn_;\\n        _pathB[1] = wethLike;\\n        _pathB[2] = tokenOut_;\\n        uint256 _amountInB = _getAmountsIn(amountOut_, _pathB);\\n\\n        // 3. Get best route between paths A and B\\n        require(_amountInA > 0 || _amountInB > 0, \\\"no-path-found\\\");\\n\\n        // Returns A if it's valid and better than B or if B isn't valid\\n        if ((_amountInA > 0 && _amountInA < _amountInB) || _amountInB == 0) {\\n            return (_amountInA, _encodePath(_pathA));\\n        }\\n        return (_amountInB, _encodePath(_pathB));\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function getBestAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, bytes memory _path) {\\n        // 1. Check IN-OUT pair\\n        address[] memory _pathA = new address[](2);\\n        _pathA[0] = tokenIn_;\\n        _pathA[1] = tokenOut_;\\n        uint256 _amountOutA = _getAmountsOut(amountIn_, _pathA);\\n\\n        if (tokenIn_ == wethLike || tokenOut_ == wethLike) {\\n            // Returns if one of the token is WETH-Like\\n            require(_amountOutA > 0, \\\"no-path-found\\\");\\n            return (_amountOutA, _encodePath(_pathA));\\n        }\\n\\n        // 2. Check IN-WETH-OUT path\\n        address[] memory _pathB = new address[](3);\\n        _pathB[0] = tokenIn_;\\n        _pathB[1] = wethLike;\\n        _pathB[2] = tokenOut_;\\n        uint256 _amountOutB = _getAmountsOut(amountIn_, _pathB);\\n\\n        // 3. Get best route between paths A and B\\n        require(_amountOutA > 0 || _amountOutB > 0, \\\"no-path-found\\\");\\n        if (_amountOutA > _amountOutB) return (_amountOutA, _encodePath(_pathA));\\n        return (_amountOutB, _encodePath(_pathB));\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function swapExactInput(\\n        bytes calldata path_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address outReceiver_\\n    ) external returns (uint256 _amountOut) {\\n        address[] memory _path = _decodePath(path_);\\n        IERC20 _tokenIn = IERC20(_path[0]);\\n        IERC20 _tokenOut = IERC20(_path[_path.length - 1]);\\n\\n        _tokenIn.safeTransfer(UniswapV2Library.pairFor(factory, initCodeHash, _path[0], _path[1]), amountIn_);\\n        uint256 balanceBefore = _tokenOut.balanceOf(outReceiver_);\\n        _swap(_path, outReceiver_);\\n        _amountOut = _tokenOut.balanceOf(outReceiver_) - balanceBefore;\\n        require(_amountOut >= amountOutMin_, \\\"Too little received\\\");\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function swapExactOutput(\\n        bytes calldata path_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address inSender_,\\n        address outRecipient_\\n    ) external returns (uint256 _amountIn) {\\n        address[] memory _path = _decodePath(path_);\\n        IERC20 _tokenIn = IERC20(_path[0]);\\n\\n        _amountIn = UniswapV2Library.getAmountsIn(factory, initCodeHash, amountOut_, _path)[0];\\n        require(_amountIn <= amountInMax_, \\\"Too much requested\\\");\\n\\n        _tokenIn.safeTransfer(UniswapV2Library.pairFor(factory, initCodeHash, _path[0], _path[1]), _amountIn);\\n        _swap(_path, outRecipient_);\\n\\n        // If swap end up costly less than _amountInMax then return remaining\\n        uint256 _remainingAmountIn = amountInMax_ - _amountIn;\\n        if (_remainingAmountIn > 0) {\\n            _tokenIn.safeTransfer(inSender_, _remainingAmountIn);\\n        }\\n    }\\n\\n    /// @dev Returns `0` if reverts\\n    function _getAmountsIn(uint256 _amountOut, address[] memory _path) internal view returns (uint256 _amountIn) {\\n        try this.getAmountsIn(_amountOut, _path) returns (uint256 amountIn) {\\n            _amountIn = amountIn;\\n        } catch {}\\n    }\\n\\n    /// @dev Returns `0` if reverts\\n    function _getAmountsOut(uint256 amountIn_, address[] memory path_) internal view returns (uint256 _amountOut) {\\n        try this.getAmountsOut(amountIn_, path_) returns (uint256 amountOut) {\\n            _amountOut = amountOut;\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Encode path from `address[]` to `bytes`\\n     */\\n    function _encodePath(address[] memory path_) private pure returns (bytes memory _path) {\\n        return abi.encode(path_);\\n    }\\n\\n    /**\\n     * @notice Encode path from `bytes` to `address[]`\\n     */\\n    function _decodePath(bytes memory path_) private pure returns (address[] memory _path) {\\n        return abi.decode(path_, (address[]));\\n    }\\n\\n    /**\\n     * NOTICE:: This function is being used as is from Uniswap's V2SwapRouter.sol deployed\\n     * at 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45 and licensed under GPL-2.0-or-later.\\n     * - It does supports fee-on-transfer tokens\\n     * - It does requires the initial amount to have already been sent to the first pair\\n     */\\n    function _swap(address[] memory path, address _to) private {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, initCodeHash, input, output));\\n            uint256 amountInput;\\n            uint256 amountOutput;\\n            // scope to avoid stack too deep errors\\n            {\\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0\\n                    ? (reserve0, reserve1)\\n                    : (reserve1, reserve0);\\n                amountInput = IERC20(input).balanceOf(address(pair)) - reserveInput;\\n                amountOutput = UniswapV2Library.getAmountOut(amountInput, reserveInput, reserveOutput);\\n            }\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOutput)\\n                : (amountOutput, uint256(0));\\n            address to = i < path.length - 2\\n                ? UniswapV2Library.pairFor(factory, initCodeHash, output, path[i + 2])\\n                : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    /**\\n     * @notice Update WETH-Like token\\n     */\\n    function updateWethLikeToken(address wethLike_) external onlyGovernor {\\n        emit WethLikeTokenUpdated(wethLike, wethLike_);\\n        wethLike = wethLike_;\\n    }\\n}\\n\",\"keccak256\":\"0xb2ad5716a23aaeb0882101f4453d4f13a247d9a9f5671969d08eb3d885cbffa0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620026b6380380620026b68339810160408190526200003491620000ca565b6000805462010000600160b01b03191633620100008102919091178255604051909182917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a3506001600160a01b0392831660805260a091909152600280546001600160a01b031916919092161790556200010b565b80516001600160a01b0381168114620000c557600080fd5b919050565b600080600060608486031215620000e057600080fd5b620000eb84620000ad565b9250602084015191506200010260408501620000ad565b90509250925092565b60805160a05161252a6200018c600039600081816105020152818161061701528181610bf701528181610cb201528181610e680152818161140101526116100152600081816101f3015281816104e1015281816105f601528181610bd601528181610c9101528181610e47015281816113e001526115ef015261252a6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637fbb36e71161008c578063c45a015511610066578063c45a0155146101ee578063d06ca61f14610215578063f3b27bc314610228578063fee9574a1461023057600080fd5b80637fbb36e7146101b35780639d9f384d146101c8578063b6aa515b146101db57600080fd5b806329dbd944116100c857806329dbd944146101675780632aa4a9e51461017a5780634909c29a1461018d57806370b24742146101a057600080fd5b80630c340a24146100ef57806319145798146101255780631f00ca7414610146575b600080fd5b600054610108906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610138610133366004611e07565b610243565b60405161011c929190611ea4565b610159610154366004611f41565b6104da565b60405190815260200161011c565b600254610108906001600160a01b031681565b610159610188366004611fec565b61054a565b61015961019b3660046120cd565b610560565b6101386101ae366004611e07565b610822565b6101c66101c1366004612138565b610a8c565b005b6101596101d6366004612155565b610b6e565b6101c66101e9366004612138565b610d4f565b6101087f000000000000000000000000000000000000000000000000000000000000000081565b610159610223366004611f41565b610e40565b6101c6610eac565b61015961023e366004611fec565b610fac565b60408051600280825260608281019093526000929183918160200160208202803683370190505090508581600081518110610280576102806121d1565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106102b4576102b46121d1565b60200260200101906001600160a01b031690816001600160a01b03168152505060006102e08583610fbb565b6002549091506001600160a01b038881169116148061030c57506002546001600160a01b038781169116145b1561037b57600081116103665760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e640000000000000000000000000000000000000060448201526064015b60405180910390fd5b8061037083611056565b9350935050506104d2565b604080516003808252608082019092526000916020820160608036833701905050905087816000815181106103b2576103b26121d1565b6001600160a01b0392831660209182029290920101526002548251911690829060019081106103e3576103e36121d1565b60200260200101906001600160a01b031690816001600160a01b0316815250508681600281518110610417576104176121d1565b60200260200101906001600160a01b031690816001600160a01b03168152505060006104438783610fbb565b905060008311806104545750600081115b6104a05760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e6400000000000000000000000000000000000000604482015260640161035d565b808311156104bf57826104b285611056565b95509550505050506104d2565b806104c983611056565b95509550505050505b935093915050565b60006105287f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000858561107f565b60008151811061053a5761053a6121d1565b6020026020010151905092915050565b600061055983610154846111d4565b9392505050565b6000806105a287878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111d492505050565b90506000816000815181106105b9576105b96121d1565b60200260200101519050600082600184516105d4919061222f565b815181106105e4576105e46121d1565b602002602001015190506106826106717f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000086600081518110610649576106496121d1565b602002602001015187600181518110610664576106646121d1565b60200260200101516111ea565b6001600160a01b03841690896112e6565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152600091908316906370a082319060240160206040518083038186803b1580156106e057600080fd5b505afa1580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107189190612246565b9050610724848761136b565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301528291908416906370a082319060240160206040518083038186803b15801561078157600080fd5b505afa158015610795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b99190612246565b6107c3919061222f565b9450868510156108155760405162461bcd60e51b815260206004820152601360248201527f546f6f206c6974746c6520726563656976656400000000000000000000000000604482015260640161035d565b5050505095945050505050565b6040805160028082526060828101909352600092918391816020016020820280368337019050509050858160008151811061085f5761085f6121d1565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610893576108936121d1565b60200260200101906001600160a01b031690816001600160a01b03168152505060006108bf85836116f5565b6002549091506001600160a01b03888116911614806108eb57506002546001600160a01b038781169116145b1561094057600081116103665760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e6400000000000000000000000000000000000000604482015260640161035d565b60408051600380825260808201909252600091602082016060803683370190505090508781600081518110610977576109776121d1565b6001600160a01b0392831660209182029290920101526002548251911690829060019081106109a8576109a86121d1565b60200260200101906001600160a01b031690816001600160a01b03168152505086816002815181106109dc576109dc6121d1565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610a0887836116f5565b90506000831180610a195750600081115b610a655760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e6400000000000000000000000000000000000000604482015260640161035d565b600083118015610a7457508083105b80610a7d575080155b156104bf57826104b285611056565b6000546001600160a01b0362010000909104163314610aed5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f720000000000000000000000000000000000000000604482015260640161035d565b600254604080516001600160a01b03928316815291831660208301527fa660aa88bd78e0552d7e2b6cb01df732642a0ff595c9c7b2ae67fb9e3db01f55910160405180910390a1600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080610bb088888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111d492505050565b9050600081600081518110610bc757610bc76121d1565b60200260200101519050610c1d7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000898561107f565b600081518110610c2f57610c2f6121d1565b6020026020010151925085831115610c895760405162461bcd60e51b815260206004820152601260248201527f546f6f206d756368207265717565737465640000000000000000000000000000604482015260640161035d565b610d10610cff7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085600081518110610ce457610ce46121d1565b602002602001015186600181518110610664576106646121d1565b6001600160a01b03831690856112e6565b610d1a828561136b565b6000610d26848861222f565b90508015610d4257610d426001600160a01b03831687836112e6565b5050509695505050505050565b6000546001600160a01b0362010000909104163314610db05760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f720000000000000000000000000000000000000000604482015260640161035d565b6001600160a01b038116610e065760405162461bcd60e51b815260206004820152601960248201527f70726f706f7365642d676f7665726e6f722d69732d7a65726f00000000000000604482015260640161035d565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000610e8e7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008585611736565b60018351610e9c919061222f565b8151811061053a5761053a6121d1565b6001546001600160a01b03163314610f065760405162461bcd60e51b815260206004820152601960248201527f6e6f742d7468652d70726f706f7365642d676f7665726e6f7200000000000000604482015260640161035d565b600154600080546040516001600160a01b039384169362010000909204909116917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d091a360018054600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166001600160a01b03831662010000021790557fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600061055983610223846111d4565b6040517fd06ca61f000000000000000000000000000000000000000000000000000000008152600090309063d06ca61f90610ffc90869086906004016122a3565b60206040518083038186803b15801561101457600080fd5b505afa925050508015611044575060408051601f3d908101601f1916820190925261104191810190612246565b60015b61104d57611050565b90505b92915050565b60608160405160200161106991906122bc565b6040516020818303038152906040529050919050565b606060028251101561109057600080fd5b815167ffffffffffffffff8111156110aa576110aa611ebd565b6040519080825280602002602001820160405280156110d3578160200160208202803683370190505b5090508281600183516110e6919061222f565b815181106110f6576110f66121d1565b602002602001018181525050600060018351611112919061222f565b90505b80156111cb5760008061116688888761112f60018861222f565b8151811061113f5761113f6121d1565b6020026020010151888781518110611159576111596121d1565b602002602001015161186a565b9150915061118e84848151811061117f5761117f6121d1565b60200260200101518383611953565b8461119a60018661222f565b815181106111aa576111aa6121d1565b602002602001018181525050505080806111c3906122cf565b915050611115565b50949350505050565b60608180602001905181019061105091906122e6565b60008060006111f98585611a0a565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b1660348201529193509150879060480160405160208183030381529060405280519060200120876040516020016112c3939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830191909152603582015260550190565b60408051601f198184030181529190528051602090910120979650505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611366908490611a6e565b505050565b60005b6001835161137c919061222f565b81101561136657600080848381518110611398576113986121d1565b6020026020010151858460016113ae9190612375565b815181106113be576113be6121d1565b60200260200101519150915060006113d68383611a0a565b50905060006114277f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000086866111ea565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561146857600080fd5b505afa15801561147c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a091906123b0565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600080876001600160a01b03168a6001600160a01b0316146114e85782846114eb565b83835b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038a8116600483015292945090925083918c16906370a082319060240160206040518083038186803b15801561154d57600080fd5b505afa158015611561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115859190612246565b61158f919061222f565b955061159c868383611b53565b945050505050600080856001600160a01b0316886001600160a01b0316146115c6578260006115ca565b6000835b91509150600060028c516115de919061222f565b8a106115ea578a61164c565b61164c7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008a8f61163c8f6002612375565b81518110610664576106646121d1565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091529091506001600160a01b0387169063022c0d9f906116a79086908690869060248101612400565b600060405180830381600087803b1580156116c157600080fd5b505af11580156116d5573d6000803e3d6000fd5b5050505050505050505050505080806116ed9061242e565b91505061136e565b6040517f1f00ca740000000000000000000000000000000000000000000000000000000081526000903090631f00ca7490610ffc90869086906004016122a3565b606060028251101561174757600080fd5b815167ffffffffffffffff81111561176157611761611ebd565b60405190808252806020026020018201604052801561178a578160200160208202803683370190505b50905082816000815181106117a1576117a16121d1565b60200260200101818152505060005b600183516117be919061222f565b8110156111cb5760008061180588888786815181106117df576117df6121d1565b6020026020010151888760016117f59190612375565b81518110611159576111596121d1565b9150915061182d84848151811061181e5761181e6121d1565b60200260200101518383611b53565b84611839856001612375565b81518110611849576118496121d1565b602002602001018181525050505080806118629061242e565b9150506117b0565b60008060006118798585611a0a565b50905060008061188b898989896111ea565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156118c357600080fd5b505afa1580156118d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fb91906123b0565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150826001600160a01b0316876001600160a01b031614611940578082611943565b81815b909a909950975050505050505050565b60008084116119a45760405162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015260640161035d565b6000831180156119b45750600082115b6119bd57600080fd5b60006119d56103e86119cf8688611c04565b90611c04565b905060006119e96103e56119cf8689611c31565b9050611a0060016119fa8385612449565b90611c4c565b9695505050505050565b600080826001600160a01b0316846001600160a01b03161415611a2c57600080fd5b826001600160a01b0316846001600160a01b031610611a4c578284611a4f565b83835b90925090506001600160a01b038216611a6757600080fd5b9250929050565b6000611ac3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c679092919063ffffffff16565b8051909150156113665780806020019051810190611ae19190612484565b6113665760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161035d565b6000808411611ba45760405162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015260640161035d565b600083118015611bb45750600082115b611bbd57600080fd5b6000611bcb856103e5611c04565b90506000611bd98285611c04565b90506000611bed836119fa886103e8611c04565b9050611bf98183612449565b979650505050505050565b6000821580611c2857508183611c1a82826124a6565b9250611c269083612449565b145b61105057600080fd5b600082611c3e838261222f565b915081111561105057600080fd5b600082611c598382612375565b915081101561105057600080fd5b6060611c768484600085611c7e565b949350505050565b606082471015611cf65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161035d565b6001600160a01b0385163b611d4d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161035d565b600080866001600160a01b03168587604051611d6991906124c5565b60006040518083038185875af1925050503d8060008114611da6576040519150601f19603f3d011682016040523d82523d6000602084013e611dab565b606091505b5091509150611bf982828660608315611dc5575081610559565b825115611dd55782518084602001fd5b8160405162461bcd60e51b815260040161035d91906124e1565b6001600160a01b0381168114611e0457600080fd5b50565b600080600060608486031215611e1c57600080fd5b8335611e2781611def565b92506020840135611e3781611def565b929592945050506040919091013590565b60005b83811015611e63578181015183820152602001611e4b565b83811115611e72576000848401525b50505050565b60008151808452611e90816020860160208601611e48565b601f01601f19169290920160200192915050565b828152604060208201526000611c766040830184611e78565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611f1557611f15611ebd565b604052919050565b600067ffffffffffffffff821115611f3757611f37611ebd565b5060051b60200190565b60008060408385031215611f5457600080fd5b8235915060208084013567ffffffffffffffff811115611f7357600080fd5b8401601f81018613611f8457600080fd5b8035611f97611f9282611f1d565b611eec565b81815260059190911b82018301908381019088831115611fb657600080fd5b928401925b82841015611fdd578335611fce81611def565b82529284019290840190611fbb565b80955050505050509250929050565b60008060408385031215611fff57600080fd5b8235915060208084013567ffffffffffffffff8082111561201f57600080fd5b818601915086601f83011261203357600080fd5b81358181111561204557612045611ebd565b61205784601f19601f84011601611eec565b9150808252878482850101111561206d57600080fd5b80848401858401376000848284010152508093505050509250929050565b60008083601f84011261209d57600080fd5b50813567ffffffffffffffff8111156120b557600080fd5b602083019150836020828501011115611a6757600080fd5b6000806000806000608086880312156120e557600080fd5b853567ffffffffffffffff8111156120fc57600080fd5b6121088882890161208b565b9096509450506020860135925060408601359150606086013561212a81611def565b809150509295509295909350565b60006020828403121561214a57600080fd5b813561104d81611def565b60008060008060008060a0878903121561216e57600080fd5b863567ffffffffffffffff81111561218557600080fd5b61219189828a0161208b565b909750955050602087013593506040870135925060608701356121b381611def565b915060808701356121c381611def565b809150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561224157612241612200565b500390565b60006020828403121561225857600080fd5b5051919050565b600081518084526020808501945080840160005b838110156122985781516001600160a01b031687529582019590820190600101612273565b509495945050505050565b828152604060208201526000611c76604083018461225f565b602081526000610559602083018461225f565b6000816122de576122de612200565b506000190190565b600060208083850312156122f957600080fd5b825167ffffffffffffffff81111561231057600080fd5b8301601f8101851361232157600080fd5b805161232f611f9282611f1d565b81815260059190911b8201830190838101908783111561234e57600080fd5b928401925b82841015611bf957835161236681611def565b82529284019290840190612353565b6000821982111561238857612388612200565b500190565b80516dffffffffffffffffffffffffffff811681146123ab57600080fd5b919050565b6000806000606084860312156123c557600080fd5b6123ce8461238d565b92506123dc6020850161238d565b9150604084015163ffffffff811681146123f557600080fd5b809150509250925092565b8481528360208201526001600160a01b0383166040820152608060608201526000611a006080830184611e78565b600060001982141561244257612442612200565b5060010190565b60008261247f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561249657600080fd5b8151801515811461104d57600080fd5b60008160001904831182151516156124c0576124c0612200565b500290565b600082516124d7818460208701611e48565b9190910192915050565b6020815260006105596020830184611e7856fea2646970667358221220b09c966d64ae890afeaa555aec42ceaf9dd430ff01fa7b13dcb2481149997bfa64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637fbb36e71161008c578063c45a015511610066578063c45a0155146101ee578063d06ca61f14610215578063f3b27bc314610228578063fee9574a1461023057600080fd5b80637fbb36e7146101b35780639d9f384d146101c8578063b6aa515b146101db57600080fd5b806329dbd944116100c857806329dbd944146101675780632aa4a9e51461017a5780634909c29a1461018d57806370b24742146101a057600080fd5b80630c340a24146100ef57806319145798146101255780631f00ca7414610146575b600080fd5b600054610108906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610138610133366004611e07565b610243565b60405161011c929190611ea4565b610159610154366004611f41565b6104da565b60405190815260200161011c565b600254610108906001600160a01b031681565b610159610188366004611fec565b61054a565b61015961019b3660046120cd565b610560565b6101386101ae366004611e07565b610822565b6101c66101c1366004612138565b610a8c565b005b6101596101d6366004612155565b610b6e565b6101c66101e9366004612138565b610d4f565b6101087f000000000000000000000000000000000000000000000000000000000000000081565b610159610223366004611f41565b610e40565b6101c6610eac565b61015961023e366004611fec565b610fac565b60408051600280825260608281019093526000929183918160200160208202803683370190505090508581600081518110610280576102806121d1565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106102b4576102b46121d1565b60200260200101906001600160a01b031690816001600160a01b03168152505060006102e08583610fbb565b6002549091506001600160a01b038881169116148061030c57506002546001600160a01b038781169116145b1561037b57600081116103665760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e640000000000000000000000000000000000000060448201526064015b60405180910390fd5b8061037083611056565b9350935050506104d2565b604080516003808252608082019092526000916020820160608036833701905050905087816000815181106103b2576103b26121d1565b6001600160a01b0392831660209182029290920101526002548251911690829060019081106103e3576103e36121d1565b60200260200101906001600160a01b031690816001600160a01b0316815250508681600281518110610417576104176121d1565b60200260200101906001600160a01b031690816001600160a01b03168152505060006104438783610fbb565b905060008311806104545750600081115b6104a05760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e6400000000000000000000000000000000000000604482015260640161035d565b808311156104bf57826104b285611056565b95509550505050506104d2565b806104c983611056565b95509550505050505b935093915050565b60006105287f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000858561107f565b60008151811061053a5761053a6121d1565b6020026020010151905092915050565b600061055983610154846111d4565b9392505050565b6000806105a287878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111d492505050565b90506000816000815181106105b9576105b96121d1565b60200260200101519050600082600184516105d4919061222f565b815181106105e4576105e46121d1565b602002602001015190506106826106717f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000086600081518110610649576106496121d1565b602002602001015187600181518110610664576106646121d1565b60200260200101516111ea565b6001600160a01b03841690896112e6565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152600091908316906370a082319060240160206040518083038186803b1580156106e057600080fd5b505afa1580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107189190612246565b9050610724848761136b565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301528291908416906370a082319060240160206040518083038186803b15801561078157600080fd5b505afa158015610795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b99190612246565b6107c3919061222f565b9450868510156108155760405162461bcd60e51b815260206004820152601360248201527f546f6f206c6974746c6520726563656976656400000000000000000000000000604482015260640161035d565b5050505095945050505050565b6040805160028082526060828101909352600092918391816020016020820280368337019050509050858160008151811061085f5761085f6121d1565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610893576108936121d1565b60200260200101906001600160a01b031690816001600160a01b03168152505060006108bf85836116f5565b6002549091506001600160a01b03888116911614806108eb57506002546001600160a01b038781169116145b1561094057600081116103665760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e6400000000000000000000000000000000000000604482015260640161035d565b60408051600380825260808201909252600091602082016060803683370190505090508781600081518110610977576109776121d1565b6001600160a01b0392831660209182029290920101526002548251911690829060019081106109a8576109a86121d1565b60200260200101906001600160a01b031690816001600160a01b03168152505086816002815181106109dc576109dc6121d1565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610a0887836116f5565b90506000831180610a195750600081115b610a655760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e6400000000000000000000000000000000000000604482015260640161035d565b600083118015610a7457508083105b80610a7d575080155b156104bf57826104b285611056565b6000546001600160a01b0362010000909104163314610aed5760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f720000000000000000000000000000000000000000604482015260640161035d565b600254604080516001600160a01b03928316815291831660208301527fa660aa88bd78e0552d7e2b6cb01df732642a0ff595c9c7b2ae67fb9e3db01f55910160405180910390a1600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080610bb088888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111d492505050565b9050600081600081518110610bc757610bc76121d1565b60200260200101519050610c1d7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000898561107f565b600081518110610c2f57610c2f6121d1565b6020026020010151925085831115610c895760405162461bcd60e51b815260206004820152601260248201527f546f6f206d756368207265717565737465640000000000000000000000000000604482015260640161035d565b610d10610cff7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085600081518110610ce457610ce46121d1565b602002602001015186600181518110610664576106646121d1565b6001600160a01b03831690856112e6565b610d1a828561136b565b6000610d26848861222f565b90508015610d4257610d426001600160a01b03831687836112e6565b5050509695505050505050565b6000546001600160a01b0362010000909104163314610db05760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f720000000000000000000000000000000000000000604482015260640161035d565b6001600160a01b038116610e065760405162461bcd60e51b815260206004820152601960248201527f70726f706f7365642d676f7665726e6f722d69732d7a65726f00000000000000604482015260640161035d565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000610e8e7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008585611736565b60018351610e9c919061222f565b8151811061053a5761053a6121d1565b6001546001600160a01b03163314610f065760405162461bcd60e51b815260206004820152601960248201527f6e6f742d7468652d70726f706f7365642d676f7665726e6f7200000000000000604482015260640161035d565b600154600080546040516001600160a01b039384169362010000909204909116917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d091a360018054600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166001600160a01b03831662010000021790557fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600061055983610223846111d4565b6040517fd06ca61f000000000000000000000000000000000000000000000000000000008152600090309063d06ca61f90610ffc90869086906004016122a3565b60206040518083038186803b15801561101457600080fd5b505afa925050508015611044575060408051601f3d908101601f1916820190925261104191810190612246565b60015b61104d57611050565b90505b92915050565b60608160405160200161106991906122bc565b6040516020818303038152906040529050919050565b606060028251101561109057600080fd5b815167ffffffffffffffff8111156110aa576110aa611ebd565b6040519080825280602002602001820160405280156110d3578160200160208202803683370190505b5090508281600183516110e6919061222f565b815181106110f6576110f66121d1565b602002602001018181525050600060018351611112919061222f565b90505b80156111cb5760008061116688888761112f60018861222f565b8151811061113f5761113f6121d1565b6020026020010151888781518110611159576111596121d1565b602002602001015161186a565b9150915061118e84848151811061117f5761117f6121d1565b60200260200101518383611953565b8461119a60018661222f565b815181106111aa576111aa6121d1565b602002602001018181525050505080806111c3906122cf565b915050611115565b50949350505050565b60608180602001905181019061105091906122e6565b60008060006111f98585611a0a565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b1660348201529193509150879060480160405160208183030381529060405280519060200120876040516020016112c3939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830191909152603582015260550190565b60408051601f198184030181529190528051602090910120979650505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611366908490611a6e565b505050565b60005b6001835161137c919061222f565b81101561136657600080848381518110611398576113986121d1565b6020026020010151858460016113ae9190612375565b815181106113be576113be6121d1565b60200260200101519150915060006113d68383611a0a565b50905060006114277f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000086866111ea565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561146857600080fd5b505afa15801561147c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a091906123b0565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600080876001600160a01b03168a6001600160a01b0316146114e85782846114eb565b83835b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038a8116600483015292945090925083918c16906370a082319060240160206040518083038186803b15801561154d57600080fd5b505afa158015611561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115859190612246565b61158f919061222f565b955061159c868383611b53565b945050505050600080856001600160a01b0316886001600160a01b0316146115c6578260006115ca565b6000835b91509150600060028c516115de919061222f565b8a106115ea578a61164c565b61164c7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008a8f61163c8f6002612375565b81518110610664576106646121d1565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091529091506001600160a01b0387169063022c0d9f906116a79086908690869060248101612400565b600060405180830381600087803b1580156116c157600080fd5b505af11580156116d5573d6000803e3d6000fd5b5050505050505050505050505080806116ed9061242e565b91505061136e565b6040517f1f00ca740000000000000000000000000000000000000000000000000000000081526000903090631f00ca7490610ffc90869086906004016122a3565b606060028251101561174757600080fd5b815167ffffffffffffffff81111561176157611761611ebd565b60405190808252806020026020018201604052801561178a578160200160208202803683370190505b50905082816000815181106117a1576117a16121d1565b60200260200101818152505060005b600183516117be919061222f565b8110156111cb5760008061180588888786815181106117df576117df6121d1565b6020026020010151888760016117f59190612375565b81518110611159576111596121d1565b9150915061182d84848151811061181e5761181e6121d1565b60200260200101518383611b53565b84611839856001612375565b81518110611849576118496121d1565b602002602001018181525050505080806118629061242e565b9150506117b0565b60008060006118798585611a0a565b50905060008061188b898989896111ea565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156118c357600080fd5b505afa1580156118d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fb91906123b0565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150826001600160a01b0316876001600160a01b031614611940578082611943565b81815b909a909950975050505050505050565b60008084116119a45760405162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015260640161035d565b6000831180156119b45750600082115b6119bd57600080fd5b60006119d56103e86119cf8688611c04565b90611c04565b905060006119e96103e56119cf8689611c31565b9050611a0060016119fa8385612449565b90611c4c565b9695505050505050565b600080826001600160a01b0316846001600160a01b03161415611a2c57600080fd5b826001600160a01b0316846001600160a01b031610611a4c578284611a4f565b83835b90925090506001600160a01b038216611a6757600080fd5b9250929050565b6000611ac3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c679092919063ffffffff16565b8051909150156113665780806020019051810190611ae19190612484565b6113665760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161035d565b6000808411611ba45760405162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015260640161035d565b600083118015611bb45750600082115b611bbd57600080fd5b6000611bcb856103e5611c04565b90506000611bd98285611c04565b90506000611bed836119fa886103e8611c04565b9050611bf98183612449565b979650505050505050565b6000821580611c2857508183611c1a82826124a6565b9250611c269083612449565b145b61105057600080fd5b600082611c3e838261222f565b915081111561105057600080fd5b600082611c598382612375565b915081101561105057600080fd5b6060611c768484600085611c7e565b949350505050565b606082471015611cf65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161035d565b6001600160a01b0385163b611d4d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161035d565b600080866001600160a01b03168587604051611d6991906124c5565b60006040518083038185875af1925050503d8060008114611da6576040519150601f19603f3d011682016040523d82523d6000602084013e611dab565b606091505b5091509150611bf982828660608315611dc5575081610559565b825115611dd55782518084602001fd5b8160405162461bcd60e51b815260040161035d91906124e1565b6001600160a01b0381168114611e0457600080fd5b50565b600080600060608486031215611e1c57600080fd5b8335611e2781611def565b92506020840135611e3781611def565b929592945050506040919091013590565b60005b83811015611e63578181015183820152602001611e4b565b83811115611e72576000848401525b50505050565b60008151808452611e90816020860160208601611e48565b601f01601f19169290920160200192915050565b828152604060208201526000611c766040830184611e78565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611f1557611f15611ebd565b604052919050565b600067ffffffffffffffff821115611f3757611f37611ebd565b5060051b60200190565b60008060408385031215611f5457600080fd5b8235915060208084013567ffffffffffffffff811115611f7357600080fd5b8401601f81018613611f8457600080fd5b8035611f97611f9282611f1d565b611eec565b81815260059190911b82018301908381019088831115611fb657600080fd5b928401925b82841015611fdd578335611fce81611def565b82529284019290840190611fbb565b80955050505050509250929050565b60008060408385031215611fff57600080fd5b8235915060208084013567ffffffffffffffff8082111561201f57600080fd5b818601915086601f83011261203357600080fd5b81358181111561204557612045611ebd565b61205784601f19601f84011601611eec565b9150808252878482850101111561206d57600080fd5b80848401858401376000848284010152508093505050509250929050565b60008083601f84011261209d57600080fd5b50813567ffffffffffffffff8111156120b557600080fd5b602083019150836020828501011115611a6757600080fd5b6000806000806000608086880312156120e557600080fd5b853567ffffffffffffffff8111156120fc57600080fd5b6121088882890161208b565b9096509450506020860135925060408601359150606086013561212a81611def565b809150509295509295909350565b60006020828403121561214a57600080fd5b813561104d81611def565b60008060008060008060a0878903121561216e57600080fd5b863567ffffffffffffffff81111561218557600080fd5b61219189828a0161208b565b909750955050602087013593506040870135925060608701356121b381611def565b915060808701356121c381611def565b809150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561224157612241612200565b500390565b60006020828403121561225857600080fd5b5051919050565b600081518084526020808501945080840160005b838110156122985781516001600160a01b031687529582019590820190600101612273565b509495945050505050565b828152604060208201526000611c76604083018461225f565b602081526000610559602083018461225f565b6000816122de576122de612200565b506000190190565b600060208083850312156122f957600080fd5b825167ffffffffffffffff81111561231057600080fd5b8301601f8101851361232157600080fd5b805161232f611f9282611f1d565b81815260059190911b8201830190838101908783111561234e57600080fd5b928401925b82841015611bf957835161236681611def565b82529284019290840190612353565b6000821982111561238857612388612200565b500190565b80516dffffffffffffffffffffffffffff811681146123ab57600080fd5b919050565b6000806000606084860312156123c557600080fd5b6123ce8461238d565b92506123dc6020850161238d565b9150604084015163ffffffff811681146123f557600080fd5b809150509250925092565b8481528360208201526001600160a01b0383166040820152608060608201526000611a006080830184611e78565b600060001982141561244257612442612200565b5060010190565b60008261247f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561249657600080fd5b8151801515811461104d57600080fd5b60008160001904831182151516156124c0576124c0612200565b500290565b600082516124d7818460208701611e48565b9190910192915050565b6020815260006105596020830184611e7856fea2646970667358221220b09c966d64ae890afeaa555aec42ceaf9dd430ff01fa7b13dcb2481149997bfa64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptGovernorship()": {
        "details": "Allows new governor to accept governorship of the contract."
      },
      "constructor": {
        "details": "Doesn't consider router.WETH() as `wethLike` because isn't guaranteed that it's the most liquid token."
      },
      "getAmountsIn(uint256,address[])": {
        "details": "getBestAmountIn require a try/catch version of getAmountsIn and try/catch do not work with internal library functions, hence wrapped library call in this function so that it can be used in try/catch"
      },
      "getAmountsIn(uint256,bytes)": {
        "details": "It shouldn't be used as oracle!!!"
      },
      "getAmountsOut(uint256,address[])": {
        "details": "getBestAmountOut require a try/catch version of getAmountsOut and try/catch do not work with internal library functions, hence wrapped library call in this function so that it can be used in try/catch"
      },
      "getAmountsOut(uint256,bytes)": {
        "details": "It shouldn't be used as oracle!!!"
      },
      "getBestAmountIn(address,address,uint256)": {
        "details": "It shouldn't be used as oracle!!!"
      },
      "getBestAmountOut(address,address,uint256)": {
        "details": "It shouldn't be used as oracle!!!"
      },
      "swapExactInput(bytes,uint256,uint256,address)": {
        "details": "Should transfer `amountIn_` before performing swap"
      },
      "swapExactOutput(bytes,uint256,uint256,address,address)": {
        "details": "Should transfer `amountInMax_` before performing swapSends swap remains - if any - to the `inSender_`"
      },
      "transferGovernorship(address)": {
        "details": "Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "wethLike": {
        "details": "I.e. should be the most liquid token that offer best routers among trade pairsIt's usually the wrapper token of the chain's native coin but it isn't always true For instance: On Polygon, the `WETH` is more liquid than `WMATIC` on UniV3 protocol."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "WethLikeTokenUpdated(address,address)": {
        "notice": "Emitted when wethLike token is updated"
      }
    },
    "kind": "user",
    "methods": {
      "factory()": {
        "notice": "The UniswapV2-Like factory contract"
      },
      "getAmountsIn(uint256,bytes)": {
        "notice": "Get *spot* quote It will return the swap amount based on the current reserves of the given path (i.e. spot price)"
      },
      "getAmountsOut(uint256,bytes)": {
        "notice": "Get *spot* quote It will return the swap amount based on the current reserves of the given path (i.e. spot price)"
      },
      "getBestAmountIn(address,address,uint256)": {
        "notice": "Get *spot* quote It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)"
      },
      "getBestAmountOut(address,address,uint256)": {
        "notice": "Get *spot* quote It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)"
      },
      "swapExactInput(bytes,uint256,uint256,address)": {
        "notice": "Perform an exact input swap"
      },
      "swapExactOutput(bytes,uint256,uint256,address,address)": {
        "notice": "Perform an exact output swap"
      },
      "updateWethLikeToken(address)": {
        "notice": "Update WETH-Like token"
      },
      "wethLike()": {
        "notice": "The WETH-Like token (a.k.a. Native Token)"
      }
    },
    "notice": "UniswapV2 Like Exchange",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 420,
        "contract": "contracts/swapper/UniswapV2LikeExchange.sol:UniswapV2LikeExchange",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 423,
        "contract": "contracts/swapper/UniswapV2LikeExchange.sol:UniswapV2LikeExchange",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6513,
        "contract": "contracts/swapper/UniswapV2LikeExchange.sol:UniswapV2LikeExchange",
        "label": "governor",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6515,
        "contract": "contracts/swapper/UniswapV2LikeExchange.sol:UniswapV2LikeExchange",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 16104,
        "contract": "contracts/swapper/UniswapV2LikeExchange.sol:UniswapV2LikeExchange",
        "label": "wethLike",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
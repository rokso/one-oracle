{
  "address": "0xB9Aafc7A5dEEd4C705Ce622dB91db30366C010ec",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "initCodeHash_",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "wethLike_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldWethLike",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newWethLike",
          "type": "address"
        }
      ],
      "name": "WethLikeTokenUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path_",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path_",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        }
      ],
      "name": "getBestAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "getBestAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "outReceiver_",
          "type": "address"
        }
      ],
      "name": "swapExactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "inSender_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outRecipient_",
          "type": "address"
        }
      ],
      "name": "swapExactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wethLike_",
          "type": "address"
        }
      ],
      "name": "updateWethLikeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethLike",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xad28bcba68f838473255eac384c8ae188a13fbe33c4199a565a6b31baacd6ab4",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xB9Aafc7A5dEEd4C705Ce622dB91db30366C010ec",
    "transactionIndex": 1,
    "gasUsed": "2041494",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xcdf441bced7482555bfbaf816d453138921e86f942b5f2b3575a431996656314",
    "transactionHash": "0xad28bcba68f838473255eac384c8ae188a13fbe33c4199a565a6b31baacd6ab4",
    "logs": [],
    "blockNumber": 19147176,
    "cumulativeGasUsed": "2176326",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10",
    "0x0bbca9af0511ad1a1da383135cf3a8d2ac620e549ef9f6ae3a4c33c2fed0af91",
    "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
  ],
  "numDeployments": 2,
  "solcInputHash": "8788abf910bbace5701d10d9df51ca12",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wethLike_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldWethLike\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWethLike\",\"type\":\"address\"}],\"name\":\"WethLikeTokenUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path_\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path_\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"}],\"name\":\"getBestAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"getBestAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outReceiver_\",\"type\":\"address\"}],\"name\":\"swapExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inSender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outRecipient_\",\"type\":\"address\"}],\"name\":\"swapExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wethLike_\",\"type\":\"address\"}],\"name\":\"updateWethLikeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethLike\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Doesn't consider router.WETH() as `wethLike` because isn't guaranteed that it's the most liquid token.\"},\"getAmountsIn(uint256,address[])\":{\"details\":\"getBestAmountIn require a try/catch version of getAmountsIn and try/catch do not work with internal library functions, hence wrapped library call in this function so that it can be used in try/catch\"},\"getAmountsIn(uint256,bytes)\":{\"details\":\"It shouldn't be used as oracle!!!\"},\"getAmountsOut(uint256,address[])\":{\"details\":\"getBestAmountOut require a try/catch version of getAmountsOut and try/catch do not work with internal library functions, hence wrapped library call in this function so that it can be used in try/catch\"},\"getAmountsOut(uint256,bytes)\":{\"details\":\"It shouldn't be used as oracle!!!\"},\"getBestAmountIn(address,address,uint256)\":{\"details\":\"It shouldn't be used as oracle!!!\"},\"getBestAmountOut(address,address,uint256)\":{\"details\":\"It shouldn't be used as oracle!!!\"},\"swapExactInput(bytes,uint256,uint256,address)\":{\"details\":\"Should transfer `amountIn_` before performing swap\"},\"swapExactOutput(bytes,uint256,uint256,address,address)\":{\"details\":\"Should transfer `amountInMax_` before performing swapSends swap remains - if any - to the `inSender_`\"}},\"stateVariables\":{\"wethLike\":{\"details\":\"I.e. should be the most liquid token that offer best routers among trade pairsIt's usually the wrapper token of the chain's native coin but it isn't always true For instance: On Polygon, the `WETH` is more liquid than `WMATIC` on UniV3 protocol.\"}},\"version\":1},\"userdoc\":{\"events\":{\"WethLikeTokenUpdated(address,address)\":{\"notice\":\"Emitted when wethLike token is updated\"}},\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The UniswapV2-Like factory contract\"},\"getAmountsIn(uint256,bytes)\":{\"notice\":\"Get *spot* quote It will return the swap amount based on the current reserves of the given path (i.e. spot price)\"},\"getAmountsOut(uint256,bytes)\":{\"notice\":\"Get *spot* quote It will return the swap amount based on the current reserves of the given path (i.e. spot price)\"},\"getBestAmountIn(address,address,uint256)\":{\"notice\":\"Get *spot* quote It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)\"},\"getBestAmountOut(address,address,uint256)\":{\"notice\":\"Get *spot* quote It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)\"},\"swapExactInput(bytes,uint256,uint256,address)\":{\"notice\":\"Perform an exact input swap\"},\"swapExactOutput(bytes,uint256,uint256,address,address)\":{\"notice\":\"Perform an exact output swap\"},\"updateWethLikeToken(address)\":{\"notice\":\"Update WETH-Like token\"},\"wethLike()\":{\"notice\":\"The WETH-Like token (a.k.a. Native Token)\"}},\"notice\":\"UniswapV2 Like Exchange\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swapper/UniswapV2LikeExchange.sol\":\"UniswapV2LikeExchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../core/AddressProvider.sol\\\";\\n\\n/**\\n * @notice Contract module which provides access control mechanism, where\\n * the governor account is granted with exclusive access to specific functions.\\n * @dev Uses the AddressProvider to get the governor\\n */\\nabstract contract Governable {\\n    IAddressProvider public constant addressProvider = IAddressProvider(0xfbA0816A81bcAbBf3829bED28618177a2bf0e82A);\\n\\n    /// @dev Throws if called by any account other than the governor.\\n    modifier onlyGovernor() {\\n        require(msg.sender == addressProvider.governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0aeb534826bb8e2428dd859d5cf5eb82664c4de97106a783d8fb92a2a7661e38\",\"license\":\"MIT\"},\"contracts/core/AddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/core/IAddressProvider.sol\\\";\\n\\ncontract AddressProvider is IAddressProvider, Initializable {\\n    /// @notice The governor account\\n    address public governor;\\n\\n    /// @notice The proposed governor account. Becomes the new governor after acceptance\\n    address public proposedGovernor;\\n\\n    /// @notice The PriceProvidersAggregator contract\\n    IPriceProvidersAggregator public override providersAggregator;\\n\\n    /// @notice The StableCoinProvider contract\\n    IStableCoinProvider public override stableCoinProvider;\\n\\n    /// @notice Emitted when providers aggregator is updated\\n    event ProvidersAggregatorUpdated(\\n        IPriceProvidersAggregator oldProvidersAggregator,\\n        IPriceProvidersAggregator newProvidersAggregator\\n    );\\n\\n    /// @notice Emitted when stable coin provider is updated\\n    event StableCoinProviderUpdated(\\n        IStableCoinProvider oldStableCoinProvider,\\n        IStableCoinProvider newStableCoinProvider\\n    );\\n\\n    /// @notice Emitted when governor is updated\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == msg.sender, \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    function initialize(address governor_) external initializer {\\n        governor = governor_;\\n        emit UpdatedGovernor(address(0), governor_);\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(msg.sender == proposedGovernor, \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @notice Update PriceProvidersAggregator contract\\n     */\\n    function updateProvidersAggregator(IPriceProvidersAggregator providersAggregator_) external onlyGovernor {\\n        require(address(providersAggregator_) != address(0), \\\"address-is-null\\\");\\n        emit ProvidersAggregatorUpdated(providersAggregator, providersAggregator_);\\n        providersAggregator = providersAggregator_;\\n    }\\n\\n    /**\\n     * @notice Update StableCoinProvider contract\\n     */\\n    function updateStableCoinProvider(IStableCoinProvider stableCoinProvider_) external onlyGovernor {\\n        emit StableCoinProviderUpdated(stableCoinProvider, stableCoinProvider_);\\n        stableCoinProvider = stableCoinProvider_;\\n    }\\n}\\n\",\"keccak256\":\"0x145bfcd3b2e957400f54636b517e54599fd918fd9e6e368a85e4362677e96ffa\",\"license\":\"MIT\"},\"contracts/dependencies/uniswap/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\\n\\n/**\\n * This is copied from Uniswap's V2SwapRouter.sol deployed at 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45\\n * and licensed under GPL-2.0-or-later.\\n * Changelog:\\n * - Removed hardcoded initCodeHash and taking as param so that we can support multiple UniswapV2Like exchanges\\n * - Added function getAmountsOut()\\n */\\nlibrary UniswapV2Library {\\n    using LowGasSafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB);\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0));\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, bytes32 initCodeHash, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint160\\n        (uint256(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                initCodeHash\\n            )))));\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        bytes32 initCodeHash,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, initCodeHash, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, 'INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0);\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, 'INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0);\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n        // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        bytes32 initCodeHash,\\n        uint amountIn,\\n        address[] memory path\\n    ) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2);\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i < path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, initCodeHash, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        bytes32 initCodeHash,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2);\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory,initCodeHash, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9a68d6ffa30117faaec498b632a6264664e01c154b79741e3bfaf859d90b2885\",\"license\":\"MIT\"},\"contracts/interfaces/core/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStableCoinProvider.sol\\\";\\nimport \\\"./IPriceProvidersAggregator.sol\\\";\\n\\ninterface IAddressProvider {\\n    function governor() external view returns (address);\\n\\n    function providersAggregator() external view returns (IPriceProvidersAggregator);\\n\\n    function stableCoinProvider() external view returns (IStableCoinProvider);\\n}\\n\",\"keccak256\":\"0xa17f9e29e3de520c35faa21ddeb139fe73b3663c1ebf83f17b2c0aa00c297cf8\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n}\\n\",\"keccak256\":\"0x05e6cf557c19e2f9e439b483ed67e85713c0045dced6133f530003382e9b72d1\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvidersAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"./IPriceProvider.sol\\\";\\n\\n/**\\n * @notice PriceProvidersAggregator interface\\n * @dev Worth noting that the `_lastUpdatedAt` logic depends on the underlying price provider. In summary:\\n * ChainLink: returns the last updated date from the aggregator\\n * UniswapV2: returns the date of the latest pair oracle update\\n * UniswapV3: assumes that the price is always updated (returns block.timestamp)\\n * Flux: returns the last updated date from the aggregator\\n * Umbrella (FCD): returns the last updated date returned from their oracle contract\\n * Umbrella (Passport): returns the date of the latest pallet submission\\n * Anytime that a quote performs more than one query, it uses the oldest date as the `_lastUpdatedAt`.\\n * See more: https://github.com/bloqpriv/one-oracle/issues/64\\n */\\ninterface IPriceProvidersAggregator {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        external\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Provider Providers' mapping\\n     */\\n    function priceProviders(DataTypes.Provider provider_) external view returns (IPriceProvider _priceProvider);\\n\\n    /**\\n     * @notice Get quote\\n     * @param provider_ The price provider to get quote from\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @dev If providers aren't the same, uses native token as \\\"bridge\\\"\\n     * @param providerIn_ The price provider to get quote for the tokenIn\\n     * @param tokenIn_ The address of assetIn\\n     * @param providerOut_ The price provider to get quote for the tokenOut\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        DataTypes.Provider providerIn_,\\n        address tokenIn_,\\n        DataTypes.Provider providerOut_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Set a price provider\\n     * @dev Administrative function\\n     * @param provider_ The provider (from enum)\\n     * @param priceProvider_ The price provider contract\\n     */\\n    function setPriceProvider(DataTypes.Provider provider_, IPriceProvider priceProvider_) external;\\n}\\n\",\"keccak256\":\"0xf1708572db9b1b429856b6f5fc22e5c9a6e98047559f1d29ba854621bf155dc9\",\"license\":\"MIT\"},\"contracts/interfaces/core/IStableCoinProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStableCoinProvider {\\n    /**\\n     * @notice Return the stable coin if pegged\\n     * @dev Check price relation between both stable coins and revert if peg is too loose\\n     * @return _stableCoin The primary stable coin if pass all checks\\n     */\\n    function getStableCoinIfPegged() external view returns (address _stableCoin);\\n\\n    /**\\n     * @notice Convert given amount of stable coin to USD representation (18 decimals)\\n     */\\n    function toUsdRepresentation(uint256 stableCoinAmount_) external view returns (uint256 _usdAmount);\\n}\\n\",\"keccak256\":\"0x57121c0faef63ea2d06b05048054ffa78d4d3c5734c2dabc1aaa4c5032e194c5\",\"license\":\"MIT\"},\"contracts/interfaces/swapper/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity <=0.8.9;\\n\\n/**\\n * @notice Exchange interface\\n */\\ninterface IExchange {\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the given path (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountsIn(uint256 _amountOut, bytes memory path_) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the given path (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountsOut(uint256 amountIn_, bytes memory path_) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getBestAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external returns (uint256 _amountIn, bytes memory _path);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getBestAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, bytes memory _path);\\n\\n    /**\\n     * @notice Perform an exact input swap\\n     * @dev Should transfer `amountIn_` before performing swap\\n     */\\n    function swapExactInput(\\n        bytes calldata path_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address outReceiver_\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap\\n     * @dev Should transfer `amountInMax_` before performing swap\\n     * @dev Sends swap remains - if any - to the `inSender_`\\n     */\\n    function swapExactOutput(\\n        bytes calldata path_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address inSender_,\\n        address outRecipient_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x7bda5651920a3a8f8c20c338350ca9b93f6b4f030cf8665005a15809b364bf22\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary DataTypes {\\n    /**\\n     * @notice Price providers enumeration\\n     */\\n    enum Provider {\\n        NONE,\\n        CHAINLINK,\\n        UNISWAP_V3,\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UMBRELLA_FIRST_CLASS,\\n        UMBRELLA_PASSPORT,\\n        FLUX\\n    }\\n\\n    enum ExchangeType {\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UNISWAP_V3\\n    }\\n\\n    enum SwapType {\\n        EXACT_INPUT,\\n        EXACT_OUTPUT\\n    }\\n}\\n\",\"keccak256\":\"0xfafdbf0aa3657f082acf0fba2742fddd38552382646a14193a78782f731dc393\",\"license\":\"MIT\"},\"contracts/swapper/UniswapV2LikeExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../dependencies/uniswap/libraries/UniswapV2Library.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\nimport \\\"../interfaces/swapper/IExchange.sol\\\";\\n\\n/**\\n * @notice UniswapV2 Like Exchange\\n */\\ncontract UniswapV2LikeExchange is IExchange, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice The WETH-Like token (a.k.a. Native Token)\\n     * @dev I.e. should be the most liquid token that offer best routers among trade pairs\\n     * @dev It's usually the wrapper token of the chain's native coin but it isn't always true\\n     * For instance: On Polygon, the `WETH` is more liquid than `WMATIC` on UniV3 protocol.\\n     */\\n    address public wethLike;\\n\\n    /**\\n     * @notice The UniswapV2-Like factory contract\\n     */\\n    address public immutable factory;\\n\\n    bytes32 internal immutable initCodeHash;\\n    /// @notice Emitted when wethLike token is updated\\n    event WethLikeTokenUpdated(address oldWethLike, address newWethLike);\\n\\n    /**\\n     * @dev Doesn't consider router.WETH() as `wethLike` because isn't guaranteed that it's the most liquid token.\\n     */\\n    constructor(\\n        address factory_,\\n        bytes32 initCodeHash_,\\n        address wethLike_\\n    ) {\\n        factory = factory_;\\n        initCodeHash = initCodeHash_;\\n        wethLike = wethLike_;\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function getAmountsIn(uint256 amountOut_, bytes memory path_) external view override returns (uint256 _amountIn) {\\n        _amountIn = getAmountsIn(amountOut_, _decodePath(path_));\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function getAmountsOut(uint256 amountIn_, bytes memory path_) external view override returns (uint256 _amountOut) {\\n        _amountOut = getAmountsOut(amountIn_, _decodePath(path_));\\n    }\\n\\n    /**\\n     * @dev getBestAmountIn require a try/catch version of getAmountsIn and try/catch do not work with internal\\n     * library functions, hence wrapped library call in this function so that it can be used in try/catch\\n     */\\n    function getAmountsIn(uint256 amountOut_, address[] memory path_) public view returns (uint256 _amountIn) {\\n        _amountIn = UniswapV2Library.getAmountsIn(factory, initCodeHash, amountOut_, path_)[0];\\n    }\\n\\n    /**\\n     * @dev getBestAmountOut require a try/catch version of getAmountsOut and try/catch do not work with internal\\n     * library functions, hence wrapped library call in this function so that it can be used in try/catch\\n     */\\n    function getAmountsOut(uint256 amountIn_, address[] memory path_) public view returns (uint256 _amountOut) {\\n        _amountOut = UniswapV2Library.getAmountsOut(factory, initCodeHash, amountIn_, path_)[path_.length - 1];\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function getBestAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external returns (uint256 _amountIn, bytes memory _path) {\\n        // 1. Check IN-OUT pair\\n        address[] memory _pathA = new address[](2);\\n        _pathA[0] = tokenIn_;\\n        _pathA[1] = tokenOut_;\\n        uint256 _amountInA = _getAmountsIn(amountOut_, _pathA);\\n\\n        if (tokenIn_ == wethLike || tokenOut_ == wethLike) {\\n            // Returns if one of the token is WETH-Like\\n            require(_amountInA > 0, \\\"no-path-found\\\");\\n            return (_amountInA, _encodePath(_pathA));\\n        }\\n\\n        // 2. Check IN-WETH-OUT path\\n        address[] memory _pathB = new address[](3);\\n        _pathB[0] = tokenIn_;\\n        _pathB[1] = wethLike;\\n        _pathB[2] = tokenOut_;\\n        uint256 _amountInB = _getAmountsIn(amountOut_, _pathB);\\n\\n        // 3. Get best route between paths A and B\\n        require(_amountInA > 0 || _amountInB > 0, \\\"no-path-found\\\");\\n\\n        // Returns A if it's valid and better than B or if B isn't valid\\n        if ((_amountInA > 0 && _amountInA < _amountInB) || _amountInB == 0) {\\n            return (_amountInA, _encodePath(_pathA));\\n        }\\n        return (_amountInB, _encodePath(_pathB));\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function getBestAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, bytes memory _path) {\\n        // 1. Check IN-OUT pair\\n        address[] memory _pathA = new address[](2);\\n        _pathA[0] = tokenIn_;\\n        _pathA[1] = tokenOut_;\\n        uint256 _amountOutA = _getAmountsOut(amountIn_, _pathA);\\n\\n        if (tokenIn_ == wethLike || tokenOut_ == wethLike) {\\n            // Returns if one of the token is WETH-Like\\n            require(_amountOutA > 0, \\\"no-path-found\\\");\\n            return (_amountOutA, _encodePath(_pathA));\\n        }\\n\\n        // 2. Check IN-WETH-OUT path\\n        address[] memory _pathB = new address[](3);\\n        _pathB[0] = tokenIn_;\\n        _pathB[1] = wethLike;\\n        _pathB[2] = tokenOut_;\\n        uint256 _amountOutB = _getAmountsOut(amountIn_, _pathB);\\n\\n        // 3. Get best route between paths A and B\\n        require(_amountOutA > 0 || _amountOutB > 0, \\\"no-path-found\\\");\\n        if (_amountOutA > _amountOutB) return (_amountOutA, _encodePath(_pathA));\\n        return (_amountOutB, _encodePath(_pathB));\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function swapExactInput(\\n        bytes calldata path_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address outReceiver_\\n    ) external returns (uint256 _amountOut) {\\n        address[] memory _path = _decodePath(path_);\\n        IERC20 _tokenIn = IERC20(_path[0]);\\n        IERC20 _tokenOut = IERC20(_path[_path.length - 1]);\\n\\n        _tokenIn.safeTransfer(UniswapV2Library.pairFor(factory, initCodeHash, _path[0], _path[1]), amountIn_);\\n        uint256 balanceBefore = _tokenOut.balanceOf(outReceiver_);\\n        _swap(_path, outReceiver_);\\n        _amountOut = _tokenOut.balanceOf(outReceiver_) - balanceBefore;\\n        require(_amountOut >= amountOutMin_, \\\"Too little received\\\");\\n    }\\n\\n    /// @inheritdoc IExchange\\n    function swapExactOutput(\\n        bytes calldata path_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address inSender_,\\n        address outRecipient_\\n    ) external returns (uint256 _amountIn) {\\n        address[] memory _path = _decodePath(path_);\\n        IERC20 _tokenIn = IERC20(_path[0]);\\n\\n        _amountIn = UniswapV2Library.getAmountsIn(factory, initCodeHash, amountOut_, _path)[0];\\n        require(_amountIn <= amountInMax_, \\\"Too much requested\\\");\\n\\n        _tokenIn.safeTransfer(UniswapV2Library.pairFor(factory, initCodeHash, _path[0], _path[1]), _amountIn);\\n        _swap(_path, outRecipient_);\\n\\n        // If swap end up costly less than _amountInMax then return remaining\\n        uint256 _remainingAmountIn = amountInMax_ - _amountIn;\\n        if (_remainingAmountIn > 0) {\\n            _tokenIn.safeTransfer(inSender_, _remainingAmountIn);\\n        }\\n    }\\n\\n    /// @dev Returns `0` if reverts\\n    function _getAmountsIn(uint256 _amountOut, address[] memory _path) internal view returns (uint256 _amountIn) {\\n        try this.getAmountsIn(_amountOut, _path) returns (uint256 amountIn) {\\n            _amountIn = amountIn;\\n        } catch {}\\n    }\\n\\n    /// @dev Returns `0` if reverts\\n    function _getAmountsOut(uint256 amountIn_, address[] memory path_) internal view returns (uint256 _amountOut) {\\n        try this.getAmountsOut(amountIn_, path_) returns (uint256 amountOut) {\\n            _amountOut = amountOut;\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Encode path from `address[]` to `bytes`\\n     */\\n    function _encodePath(address[] memory path_) private pure returns (bytes memory _path) {\\n        return abi.encode(path_);\\n    }\\n\\n    /**\\n     * @notice Encode path from `bytes` to `address[]`\\n     */\\n    function _decodePath(bytes memory path_) private pure returns (address[] memory _path) {\\n        return abi.decode(path_, (address[]));\\n    }\\n\\n    /**\\n     * NOTICE:: This function is being used as is from Uniswap's V2SwapRouter.sol deployed\\n     * at 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45 and licensed under GPL-2.0-or-later.\\n     * - It does supports fee-on-transfer tokens\\n     * - It does requires the initial amount to have already been sent to the first pair\\n     */\\n    function _swap(address[] memory path, address _to) private {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, initCodeHash, input, output));\\n            uint256 amountInput;\\n            uint256 amountOutput;\\n            // scope to avoid stack too deep errors\\n            {\\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0\\n                    ? (reserve0, reserve1)\\n                    : (reserve1, reserve0);\\n                amountInput = IERC20(input).balanceOf(address(pair)) - reserveInput;\\n                amountOutput = UniswapV2Library.getAmountOut(amountInput, reserveInput, reserveOutput);\\n            }\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOutput)\\n                : (amountOutput, uint256(0));\\n            address to = i < path.length - 2\\n                ? UniswapV2Library.pairFor(factory, initCodeHash, output, path[i + 2])\\n                : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    /**\\n     * @notice Update WETH-Like token\\n     */\\n    function updateWethLikeToken(address wethLike_) external onlyGovernor {\\n        emit WethLikeTokenUpdated(wethLike, wethLike_);\\n        wethLike = wethLike_;\\n    }\\n}\\n\",\"keccak256\":\"0xb2ad5716a23aaeb0882101f4453d4f13a247d9a9f5671969d08eb3d885cbffa0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620024f1380380620024f1833981016040819052620000349162000080565b6001600160a01b0392831660805260a091909152600080546001600160a01b03191691909216179055620000c1565b80516001600160a01b03811681146200007b57600080fd5b919050565b6000806000606084860312156200009657600080fd5b620000a18462000063565b925060208401519150620000b86040850162000063565b90509250925092565b60805160a0516123af62000142600039600081816104d7015281816105ec01528181610c5001528181610d0b01528181610dd00152818161126901526114780152600081816101d0015281816104b6015281816105cb01528181610c2f01528181610cea01528181610daf01528181611248015261145701526123af6000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806370b2474211610081578063c45a01551161005b578063c45a0155146101cb578063d06ca61f146101f2578063fee9574a1461020557600080fd5b806370b24742146101905780637fbb36e7146101a35780639d9f384d146101b857600080fd5b806329dbd944116100b257806329dbd944146101575780632aa4a9e51461016a5780634909c29a1461017d57600080fd5b806319145798146100d95780631f00ca74146101035780632954018c14610124575b600080fd5b6100ec6100e7366004611c6f565b610218565b6040516100fa929190611d0c565b60405180910390f35b610116610111366004611da9565b6104af565b6040519081526020016100fa565b61013f73fba0816a81bcabbf3829bed28618177a2bf0e82a81565b6040516001600160a01b0390911681526020016100fa565b60005461013f906001600160a01b031681565b610116610178366004611e54565b61051f565b61011661018b366004611f35565b610535565b6100ec61019e366004611c6f565b6107f7565b6101b66101b1366004611fa0565b610a61565b005b6101166101c6366004611fbd565b610bc7565b61013f7f000000000000000000000000000000000000000000000000000000000000000081565b610116610200366004611da9565b610da8565b610116610213366004611e54565b610e14565b6040805160028082526060828101909352600092918391816020016020820280368337019050509050858160008151811061025557610255612039565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061028957610289612039565b60200260200101906001600160a01b031690816001600160a01b03168152505060006102b58583610e23565b6000549091506001600160a01b03888116911614806102e157506000546001600160a01b038781169116145b15610350576000811161033b5760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e640000000000000000000000000000000000000060448201526064015b60405180910390fd5b8061034583610ebe565b9350935050506104a7565b6040805160038082526080820190925260009160208201606080368337019050509050878160008151811061038757610387612039565b6001600160a01b0392831660209182029290920101526000548251911690829060019081106103b8576103b8612039565b60200260200101906001600160a01b031690816001600160a01b03168152505086816002815181106103ec576103ec612039565b60200260200101906001600160a01b031690816001600160a01b03168152505060006104188783610e23565b905060008311806104295750600081115b6104755760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e64000000000000000000000000000000000000006044820152606401610332565b80831115610494578261048785610ebe565b95509550505050506104a7565b8061049e83610ebe565b95509550505050505b935093915050565b60006104fd7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008585610ee7565b60008151811061050f5761050f612039565b6020026020010151905092915050565b600061052e836101118461103c565b9392505050565b60008061057787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061103c92505050565b905060008160008151811061058e5761058e612039565b60200260200101519050600082600184516105a99190612097565b815181106105b9576105b9612039565b602002602001015190506106576106467f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008660008151811061061e5761061e612039565b60200260200101518760018151811061063957610639612039565b6020026020010151611052565b6001600160a01b038416908961114e565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152600091908316906370a082319060240160206040518083038186803b1580156106b557600080fd5b505afa1580156106c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ed91906120ae565b90506106f984876111d3565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301528291908416906370a082319060240160206040518083038186803b15801561075657600080fd5b505afa15801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e91906120ae565b6107989190612097565b9450868510156107ea5760405162461bcd60e51b815260206004820152601360248201527f546f6f206c6974746c65207265636569766564000000000000000000000000006044820152606401610332565b5050505095945050505050565b6040805160028082526060828101909352600092918391816020016020820280368337019050509050858160008151811061083457610834612039565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061086857610868612039565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610894858361155d565b6000549091506001600160a01b03888116911614806108c057506000546001600160a01b038781169116145b15610915576000811161033b5760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e64000000000000000000000000000000000000006044820152606401610332565b6040805160038082526080820190925260009160208201606080368337019050509050878160008151811061094c5761094c612039565b6001600160a01b03928316602091820292909201015260005482519116908290600190811061097d5761097d612039565b60200260200101906001600160a01b031690816001600160a01b03168152505086816002815181106109b1576109b1612039565b60200260200101906001600160a01b031690816001600160a01b03168152505060006109dd878361155d565b905060008311806109ee5750600081115b610a3a5760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e64000000000000000000000000000000000000006044820152606401610332565b600083118015610a4957508083105b80610a52575080155b15610494578261048785610ebe565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610aae57600080fd5b505afa158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae691906120c7565b6001600160a01b0316336001600160a01b031614610b465760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610332565b600054604080516001600160a01b03928316815291831660208301527fa660aa88bd78e0552d7e2b6cb01df732642a0ff595c9c7b2ae67fb9e3db01f55910160405180910390a1600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080610c0988888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061103c92505050565b9050600081600081518110610c2057610c20612039565b60200260200101519050610c767f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008985610ee7565b600081518110610c8857610c88612039565b6020026020010151925085831115610ce25760405162461bcd60e51b815260206004820152601260248201527f546f6f206d7563682072657175657374656400000000000000000000000000006044820152606401610332565b610d69610d587f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085600081518110610d3d57610d3d612039565b60200260200101518660018151811061063957610639612039565b6001600160a01b038316908561114e565b610d7382856111d3565b6000610d7f8488612097565b90508015610d9b57610d9b6001600160a01b038316878361114e565b5050509695505050505050565b6000610df67f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000858561159e565b60018351610e049190612097565b8151811061050f5761050f612039565b600061052e836102008461103c565b6040517fd06ca61f000000000000000000000000000000000000000000000000000000008152600090309063d06ca61f90610e649086908690600401612128565b60206040518083038186803b158015610e7c57600080fd5b505afa925050508015610eac575060408051601f3d908101601f19168201909252610ea9918101906120ae565b60015b610eb557610eb8565b90505b92915050565b606081604051602001610ed19190612141565b6040516020818303038152906040529050919050565b6060600282511015610ef857600080fd5b815167ffffffffffffffff811115610f1257610f12611d25565b604051908082528060200260200182016040528015610f3b578160200160208202803683370190505b509050828160018351610f4e9190612097565b81518110610f5e57610f5e612039565b602002602001018181525050600060018351610f7a9190612097565b90505b801561103357600080610fce888887610f97600188612097565b81518110610fa757610fa7612039565b6020026020010151888781518110610fc157610fc1612039565b60200260200101516116d2565b91509150610ff6848481518110610fe757610fe7612039565b602002602001015183836117bb565b84611002600186612097565b8151811061101257611012612039565b6020026020010181815250505050808061102b90612154565b915050610f7d565b50949350505050565b606081806020019051810190610eb8919061216b565b60008060006110618585611872565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b16603482015291935091508790604801604051602081830303815290604052805190602001208760405160200161112b939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830191909152603582015260550190565b60408051601f198184030181529190528051602090910120979650505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526111ce9084906118d6565b505050565b60005b600183516111e49190612097565b8110156111ce5760008084838151811061120057611200612039565b60200260200101518584600161121691906121fa565b8151811061122657611226612039565b602002602001015191509150600061123e8383611872565b509050600061128f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008686611052565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156112d057600080fd5b505afa1580156112e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113089190612235565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600080876001600160a01b03168a6001600160a01b031614611350578284611353565b83835b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038a8116600483015292945090925083918c16906370a082319060240160206040518083038186803b1580156113b557600080fd5b505afa1580156113c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ed91906120ae565b6113f79190612097565b95506114048683836119bb565b945050505050600080856001600160a01b0316886001600160a01b03161461142e57826000611432565b6000835b91509150600060028c516114469190612097565b8a10611452578a6114b4565b6114b47f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008a8f6114a48f60026121fa565b8151811061063957610639612039565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091529091506001600160a01b0387169063022c0d9f9061150f9086908690869060248101612285565b600060405180830381600087803b15801561152957600080fd5b505af115801561153d573d6000803e3d6000fd5b505050505050505050505050508080611555906122b3565b9150506111d6565b6040517f1f00ca740000000000000000000000000000000000000000000000000000000081526000903090631f00ca7490610e649086908690600401612128565b60606002825110156115af57600080fd5b815167ffffffffffffffff8111156115c9576115c9611d25565b6040519080825280602002602001820160405280156115f2578160200160208202803683370190505b509050828160008151811061160957611609612039565b60200260200101818152505060005b600183516116269190612097565b8110156110335760008061166d888887868151811061164757611647612039565b60200260200101518887600161165d91906121fa565b81518110610fc157610fc1612039565b9150915061169584848151811061168657611686612039565b602002602001015183836119bb565b846116a18560016121fa565b815181106116b1576116b1612039565b602002602001018181525050505080806116ca906122b3565b915050611618565b60008060006116e18585611872565b5090506000806116f389898989611052565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561172b57600080fd5b505afa15801561173f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117639190612235565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150826001600160a01b0316876001600160a01b0316146117a85780826117ab565b81815b909a909950975050505050505050565b600080841161180c5760405162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e540000000000006044820152606401610332565b60008311801561181c5750600082115b61182557600080fd5b600061183d6103e86118378688611a6c565b90611a6c565b905060006118516103e56118378689611a99565b9050611868600161186283856122ce565b90611ab4565b9695505050505050565b600080826001600160a01b0316846001600160a01b0316141561189457600080fd5b826001600160a01b0316846001600160a01b0316106118b45782846118b7565b83835b90925090506001600160a01b0382166118cf57600080fd5b9250929050565b600061192b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611acf9092919063ffffffff16565b8051909150156111ce57808060200190518101906119499190612309565b6111ce5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610332565b6000808411611a0c5760405162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e54000000000000006044820152606401610332565b600083118015611a1c5750600082115b611a2557600080fd5b6000611a33856103e5611a6c565b90506000611a418285611a6c565b90506000611a5583611862886103e8611a6c565b9050611a6181836122ce565b979650505050505050565b6000821580611a9057508183611a82828261232b565b9250611a8e90836122ce565b145b610eb857600080fd5b600082611aa68382612097565b9150811115610eb857600080fd5b600082611ac183826121fa565b9150811015610eb857600080fd5b6060611ade8484600085611ae6565b949350505050565b606082471015611b5e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610332565b6001600160a01b0385163b611bb55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610332565b600080866001600160a01b03168587604051611bd1919061234a565b60006040518083038185875af1925050503d8060008114611c0e576040519150601f19603f3d011682016040523d82523d6000602084013e611c13565b606091505b5091509150611a6182828660608315611c2d57508161052e565b825115611c3d5782518084602001fd5b8160405162461bcd60e51b81526004016103329190612366565b6001600160a01b0381168114611c6c57600080fd5b50565b600080600060608486031215611c8457600080fd5b8335611c8f81611c57565b92506020840135611c9f81611c57565b929592945050506040919091013590565b60005b83811015611ccb578181015183820152602001611cb3565b83811115611cda576000848401525b50505050565b60008151808452611cf8816020860160208601611cb0565b601f01601f19169290920160200192915050565b828152604060208201526000611ade6040830184611ce0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611d7d57611d7d611d25565b604052919050565b600067ffffffffffffffff821115611d9f57611d9f611d25565b5060051b60200190565b60008060408385031215611dbc57600080fd5b8235915060208084013567ffffffffffffffff811115611ddb57600080fd5b8401601f81018613611dec57600080fd5b8035611dff611dfa82611d85565b611d54565b81815260059190911b82018301908381019088831115611e1e57600080fd5b928401925b82841015611e45578335611e3681611c57565b82529284019290840190611e23565b80955050505050509250929050565b60008060408385031215611e6757600080fd5b8235915060208084013567ffffffffffffffff80821115611e8757600080fd5b818601915086601f830112611e9b57600080fd5b813581811115611ead57611ead611d25565b611ebf84601f19601f84011601611d54565b91508082528784828501011115611ed557600080fd5b80848401858401376000848284010152508093505050509250929050565b60008083601f840112611f0557600080fd5b50813567ffffffffffffffff811115611f1d57600080fd5b6020830191508360208285010111156118cf57600080fd5b600080600080600060808688031215611f4d57600080fd5b853567ffffffffffffffff811115611f6457600080fd5b611f7088828901611ef3565b90965094505060208601359250604086013591506060860135611f9281611c57565b809150509295509295909350565b600060208284031215611fb257600080fd5b8135610eb581611c57565b60008060008060008060a08789031215611fd657600080fd5b863567ffffffffffffffff811115611fed57600080fd5b611ff989828a01611ef3565b9097509550506020870135935060408701359250606087013561201b81611c57565b9150608087013561202b81611c57565b809150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156120a9576120a9612068565b500390565b6000602082840312156120c057600080fd5b5051919050565b6000602082840312156120d957600080fd5b8151610eb581611c57565b600081518084526020808501945080840160005b8381101561211d5781516001600160a01b0316875295820195908201906001016120f8565b509495945050505050565b828152604060208201526000611ade60408301846120e4565b60208152600061052e60208301846120e4565b60008161216357612163612068565b506000190190565b6000602080838503121561217e57600080fd5b825167ffffffffffffffff81111561219557600080fd5b8301601f810185136121a657600080fd5b80516121b4611dfa82611d85565b81815260059190911b820183019083810190878311156121d357600080fd5b928401925b82841015611a615783516121eb81611c57565b825292840192908401906121d8565b6000821982111561220d5761220d612068565b500190565b80516dffffffffffffffffffffffffffff8116811461223057600080fd5b919050565b60008060006060848603121561224a57600080fd5b61225384612212565b925061226160208501612212565b9150604084015163ffffffff8116811461227a57600080fd5b809150509250925092565b8481528360208201526001600160a01b03831660408201526080606082015260006118686080830184611ce0565b60006000198214156122c7576122c7612068565b5060010190565b600082612304577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561231b57600080fd5b81518015158114610eb557600080fd5b600081600019048311821515161561234557612345612068565b500290565b6000825161235c818460208701611cb0565b9190910192915050565b60208152600061052e6020830184611ce056fea2646970667358221220c6ce26d74a4471490b92978c76d7044d9d098b0e108e8344131824652bb4d86d64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c806370b2474211610081578063c45a01551161005b578063c45a0155146101cb578063d06ca61f146101f2578063fee9574a1461020557600080fd5b806370b24742146101905780637fbb36e7146101a35780639d9f384d146101b857600080fd5b806329dbd944116100b257806329dbd944146101575780632aa4a9e51461016a5780634909c29a1461017d57600080fd5b806319145798146100d95780631f00ca74146101035780632954018c14610124575b600080fd5b6100ec6100e7366004611c6f565b610218565b6040516100fa929190611d0c565b60405180910390f35b610116610111366004611da9565b6104af565b6040519081526020016100fa565b61013f73fba0816a81bcabbf3829bed28618177a2bf0e82a81565b6040516001600160a01b0390911681526020016100fa565b60005461013f906001600160a01b031681565b610116610178366004611e54565b61051f565b61011661018b366004611f35565b610535565b6100ec61019e366004611c6f565b6107f7565b6101b66101b1366004611fa0565b610a61565b005b6101166101c6366004611fbd565b610bc7565b61013f7f000000000000000000000000000000000000000000000000000000000000000081565b610116610200366004611da9565b610da8565b610116610213366004611e54565b610e14565b6040805160028082526060828101909352600092918391816020016020820280368337019050509050858160008151811061025557610255612039565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061028957610289612039565b60200260200101906001600160a01b031690816001600160a01b03168152505060006102b58583610e23565b6000549091506001600160a01b03888116911614806102e157506000546001600160a01b038781169116145b15610350576000811161033b5760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e640000000000000000000000000000000000000060448201526064015b60405180910390fd5b8061034583610ebe565b9350935050506104a7565b6040805160038082526080820190925260009160208201606080368337019050509050878160008151811061038757610387612039565b6001600160a01b0392831660209182029290920101526000548251911690829060019081106103b8576103b8612039565b60200260200101906001600160a01b031690816001600160a01b03168152505086816002815181106103ec576103ec612039565b60200260200101906001600160a01b031690816001600160a01b03168152505060006104188783610e23565b905060008311806104295750600081115b6104755760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e64000000000000000000000000000000000000006044820152606401610332565b80831115610494578261048785610ebe565b95509550505050506104a7565b8061049e83610ebe565b95509550505050505b935093915050565b60006104fd7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008585610ee7565b60008151811061050f5761050f612039565b6020026020010151905092915050565b600061052e836101118461103c565b9392505050565b60008061057787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061103c92505050565b905060008160008151811061058e5761058e612039565b60200260200101519050600082600184516105a99190612097565b815181106105b9576105b9612039565b602002602001015190506106576106467f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008660008151811061061e5761061e612039565b60200260200101518760018151811061063957610639612039565b6020026020010151611052565b6001600160a01b038416908961114e565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152600091908316906370a082319060240160206040518083038186803b1580156106b557600080fd5b505afa1580156106c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ed91906120ae565b90506106f984876111d3565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301528291908416906370a082319060240160206040518083038186803b15801561075657600080fd5b505afa15801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e91906120ae565b6107989190612097565b9450868510156107ea5760405162461bcd60e51b815260206004820152601360248201527f546f6f206c6974746c65207265636569766564000000000000000000000000006044820152606401610332565b5050505095945050505050565b6040805160028082526060828101909352600092918391816020016020820280368337019050509050858160008151811061083457610834612039565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061086857610868612039565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610894858361155d565b6000549091506001600160a01b03888116911614806108c057506000546001600160a01b038781169116145b15610915576000811161033b5760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e64000000000000000000000000000000000000006044820152606401610332565b6040805160038082526080820190925260009160208201606080368337019050509050878160008151811061094c5761094c612039565b6001600160a01b03928316602091820292909201015260005482519116908290600190811061097d5761097d612039565b60200260200101906001600160a01b031690816001600160a01b03168152505086816002815181106109b1576109b1612039565b60200260200101906001600160a01b031690816001600160a01b03168152505060006109dd878361155d565b905060008311806109ee5750600081115b610a3a5760405162461bcd60e51b815260206004820152600d60248201527f6e6f2d706174682d666f756e64000000000000000000000000000000000000006044820152606401610332565b600083118015610a4957508083105b80610a52575080155b15610494578261048785610ebe565b73fba0816a81bcabbf3829bed28618177a2bf0e82a6001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610aae57600080fd5b505afa158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae691906120c7565b6001600160a01b0316336001600160a01b031614610b465760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610332565b600054604080516001600160a01b03928316815291831660208301527fa660aa88bd78e0552d7e2b6cb01df732642a0ff595c9c7b2ae67fb9e3db01f55910160405180910390a1600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080610c0988888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061103c92505050565b9050600081600081518110610c2057610c20612039565b60200260200101519050610c767f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008985610ee7565b600081518110610c8857610c88612039565b6020026020010151925085831115610ce25760405162461bcd60e51b815260206004820152601260248201527f546f6f206d7563682072657175657374656400000000000000000000000000006044820152606401610332565b610d69610d587f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085600081518110610d3d57610d3d612039565b60200260200101518660018151811061063957610639612039565b6001600160a01b038316908561114e565b610d7382856111d3565b6000610d7f8488612097565b90508015610d9b57610d9b6001600160a01b038316878361114e565b5050509695505050505050565b6000610df67f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000858561159e565b60018351610e049190612097565b8151811061050f5761050f612039565b600061052e836102008461103c565b6040517fd06ca61f000000000000000000000000000000000000000000000000000000008152600090309063d06ca61f90610e649086908690600401612128565b60206040518083038186803b158015610e7c57600080fd5b505afa925050508015610eac575060408051601f3d908101601f19168201909252610ea9918101906120ae565b60015b610eb557610eb8565b90505b92915050565b606081604051602001610ed19190612141565b6040516020818303038152906040529050919050565b6060600282511015610ef857600080fd5b815167ffffffffffffffff811115610f1257610f12611d25565b604051908082528060200260200182016040528015610f3b578160200160208202803683370190505b509050828160018351610f4e9190612097565b81518110610f5e57610f5e612039565b602002602001018181525050600060018351610f7a9190612097565b90505b801561103357600080610fce888887610f97600188612097565b81518110610fa757610fa7612039565b6020026020010151888781518110610fc157610fc1612039565b60200260200101516116d2565b91509150610ff6848481518110610fe757610fe7612039565b602002602001015183836117bb565b84611002600186612097565b8151811061101257611012612039565b6020026020010181815250505050808061102b90612154565b915050610f7d565b50949350505050565b606081806020019051810190610eb8919061216b565b60008060006110618585611872565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b16603482015291935091508790604801604051602081830303815290604052805190602001208760405160200161112b939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830191909152603582015260550190565b60408051601f198184030181529190528051602090910120979650505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526111ce9084906118d6565b505050565b60005b600183516111e49190612097565b8110156111ce5760008084838151811061120057611200612039565b60200260200101518584600161121691906121fa565b8151811061122657611226612039565b602002602001015191509150600061123e8383611872565b509050600061128f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008686611052565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156112d057600080fd5b505afa1580156112e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113089190612235565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600080876001600160a01b03168a6001600160a01b031614611350578284611353565b83835b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038a8116600483015292945090925083918c16906370a082319060240160206040518083038186803b1580156113b557600080fd5b505afa1580156113c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ed91906120ae565b6113f79190612097565b95506114048683836119bb565b945050505050600080856001600160a01b0316886001600160a01b03161461142e57826000611432565b6000835b91509150600060028c516114469190612097565b8a10611452578a6114b4565b6114b47f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008a8f6114a48f60026121fa565b8151811061063957610639612039565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091529091506001600160a01b0387169063022c0d9f9061150f9086908690869060248101612285565b600060405180830381600087803b15801561152957600080fd5b505af115801561153d573d6000803e3d6000fd5b505050505050505050505050508080611555906122b3565b9150506111d6565b6040517f1f00ca740000000000000000000000000000000000000000000000000000000081526000903090631f00ca7490610e649086908690600401612128565b60606002825110156115af57600080fd5b815167ffffffffffffffff8111156115c9576115c9611d25565b6040519080825280602002602001820160405280156115f2578160200160208202803683370190505b509050828160008151811061160957611609612039565b60200260200101818152505060005b600183516116269190612097565b8110156110335760008061166d888887868151811061164757611647612039565b60200260200101518887600161165d91906121fa565b81518110610fc157610fc1612039565b9150915061169584848151811061168657611686612039565b602002602001015183836119bb565b846116a18560016121fa565b815181106116b1576116b1612039565b602002602001018181525050505080806116ca906122b3565b915050611618565b60008060006116e18585611872565b5090506000806116f389898989611052565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561172b57600080fd5b505afa15801561173f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117639190612235565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150826001600160a01b0316876001600160a01b0316146117a85780826117ab565b81815b909a909950975050505050505050565b600080841161180c5760405162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e540000000000006044820152606401610332565b60008311801561181c5750600082115b61182557600080fd5b600061183d6103e86118378688611a6c565b90611a6c565b905060006118516103e56118378689611a99565b9050611868600161186283856122ce565b90611ab4565b9695505050505050565b600080826001600160a01b0316846001600160a01b0316141561189457600080fd5b826001600160a01b0316846001600160a01b0316106118b45782846118b7565b83835b90925090506001600160a01b0382166118cf57600080fd5b9250929050565b600061192b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611acf9092919063ffffffff16565b8051909150156111ce57808060200190518101906119499190612309565b6111ce5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610332565b6000808411611a0c5760405162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e54000000000000006044820152606401610332565b600083118015611a1c5750600082115b611a2557600080fd5b6000611a33856103e5611a6c565b90506000611a418285611a6c565b90506000611a5583611862886103e8611a6c565b9050611a6181836122ce565b979650505050505050565b6000821580611a9057508183611a82828261232b565b9250611a8e90836122ce565b145b610eb857600080fd5b600082611aa68382612097565b9150811115610eb857600080fd5b600082611ac183826121fa565b9150811015610eb857600080fd5b6060611ade8484600085611ae6565b949350505050565b606082471015611b5e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610332565b6001600160a01b0385163b611bb55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610332565b600080866001600160a01b03168587604051611bd1919061234a565b60006040518083038185875af1925050503d8060008114611c0e576040519150601f19603f3d011682016040523d82523d6000602084013e611c13565b606091505b5091509150611a6182828660608315611c2d57508161052e565b825115611c3d5782518084602001fd5b8160405162461bcd60e51b81526004016103329190612366565b6001600160a01b0381168114611c6c57600080fd5b50565b600080600060608486031215611c8457600080fd5b8335611c8f81611c57565b92506020840135611c9f81611c57565b929592945050506040919091013590565b60005b83811015611ccb578181015183820152602001611cb3565b83811115611cda576000848401525b50505050565b60008151808452611cf8816020860160208601611cb0565b601f01601f19169290920160200192915050565b828152604060208201526000611ade6040830184611ce0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611d7d57611d7d611d25565b604052919050565b600067ffffffffffffffff821115611d9f57611d9f611d25565b5060051b60200190565b60008060408385031215611dbc57600080fd5b8235915060208084013567ffffffffffffffff811115611ddb57600080fd5b8401601f81018613611dec57600080fd5b8035611dff611dfa82611d85565b611d54565b81815260059190911b82018301908381019088831115611e1e57600080fd5b928401925b82841015611e45578335611e3681611c57565b82529284019290840190611e23565b80955050505050509250929050565b60008060408385031215611e6757600080fd5b8235915060208084013567ffffffffffffffff80821115611e8757600080fd5b818601915086601f830112611e9b57600080fd5b813581811115611ead57611ead611d25565b611ebf84601f19601f84011601611d54565b91508082528784828501011115611ed557600080fd5b80848401858401376000848284010152508093505050509250929050565b60008083601f840112611f0557600080fd5b50813567ffffffffffffffff811115611f1d57600080fd5b6020830191508360208285010111156118cf57600080fd5b600080600080600060808688031215611f4d57600080fd5b853567ffffffffffffffff811115611f6457600080fd5b611f7088828901611ef3565b90965094505060208601359250604086013591506060860135611f9281611c57565b809150509295509295909350565b600060208284031215611fb257600080fd5b8135610eb581611c57565b60008060008060008060a08789031215611fd657600080fd5b863567ffffffffffffffff811115611fed57600080fd5b611ff989828a01611ef3565b9097509550506020870135935060408701359250606087013561201b81611c57565b9150608087013561202b81611c57565b809150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156120a9576120a9612068565b500390565b6000602082840312156120c057600080fd5b5051919050565b6000602082840312156120d957600080fd5b8151610eb581611c57565b600081518084526020808501945080840160005b8381101561211d5781516001600160a01b0316875295820195908201906001016120f8565b509495945050505050565b828152604060208201526000611ade60408301846120e4565b60208152600061052e60208301846120e4565b60008161216357612163612068565b506000190190565b6000602080838503121561217e57600080fd5b825167ffffffffffffffff81111561219557600080fd5b8301601f810185136121a657600080fd5b80516121b4611dfa82611d85565b81815260059190911b820183019083810190878311156121d357600080fd5b928401925b82841015611a615783516121eb81611c57565b825292840192908401906121d8565b6000821982111561220d5761220d612068565b500190565b80516dffffffffffffffffffffffffffff8116811461223057600080fd5b919050565b60008060006060848603121561224a57600080fd5b61225384612212565b925061226160208501612212565b9150604084015163ffffffff8116811461227a57600080fd5b809150509250925092565b8481528360208201526001600160a01b03831660408201526080606082015260006118686080830184611ce0565b60006000198214156122c7576122c7612068565b5060010190565b600082612304577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561231b57600080fd5b81518015158114610eb557600080fd5b600081600019048311821515161561234557612345612068565b500290565b6000825161235c818460208701611cb0565b9190910192915050565b60208152600061052e6020830184611ce056fea2646970667358221220c6ce26d74a4471490b92978c76d7044d9d098b0e108e8344131824652bb4d86d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Doesn't consider router.WETH() as `wethLike` because isn't guaranteed that it's the most liquid token."
      },
      "getAmountsIn(uint256,address[])": {
        "details": "getBestAmountIn require a try/catch version of getAmountsIn and try/catch do not work with internal library functions, hence wrapped library call in this function so that it can be used in try/catch"
      },
      "getAmountsIn(uint256,bytes)": {
        "details": "It shouldn't be used as oracle!!!"
      },
      "getAmountsOut(uint256,address[])": {
        "details": "getBestAmountOut require a try/catch version of getAmountsOut and try/catch do not work with internal library functions, hence wrapped library call in this function so that it can be used in try/catch"
      },
      "getAmountsOut(uint256,bytes)": {
        "details": "It shouldn't be used as oracle!!!"
      },
      "getBestAmountIn(address,address,uint256)": {
        "details": "It shouldn't be used as oracle!!!"
      },
      "getBestAmountOut(address,address,uint256)": {
        "details": "It shouldn't be used as oracle!!!"
      },
      "swapExactInput(bytes,uint256,uint256,address)": {
        "details": "Should transfer `amountIn_` before performing swap"
      },
      "swapExactOutput(bytes,uint256,uint256,address,address)": {
        "details": "Should transfer `amountInMax_` before performing swapSends swap remains - if any - to the `inSender_`"
      }
    },
    "stateVariables": {
      "wethLike": {
        "details": "I.e. should be the most liquid token that offer best routers among trade pairsIt's usually the wrapper token of the chain's native coin but it isn't always true For instance: On Polygon, the `WETH` is more liquid than `WMATIC` on UniV3 protocol."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "WethLikeTokenUpdated(address,address)": {
        "notice": "Emitted when wethLike token is updated"
      }
    },
    "kind": "user",
    "methods": {
      "factory()": {
        "notice": "The UniswapV2-Like factory contract"
      },
      "getAmountsIn(uint256,bytes)": {
        "notice": "Get *spot* quote It will return the swap amount based on the current reserves of the given path (i.e. spot price)"
      },
      "getAmountsOut(uint256,bytes)": {
        "notice": "Get *spot* quote It will return the swap amount based on the current reserves of the given path (i.e. spot price)"
      },
      "getBestAmountIn(address,address,uint256)": {
        "notice": "Get *spot* quote It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)"
      },
      "getBestAmountOut(address,address,uint256)": {
        "notice": "Get *spot* quote It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price)"
      },
      "swapExactInput(bytes,uint256,uint256,address)": {
        "notice": "Perform an exact input swap"
      },
      "swapExactOutput(bytes,uint256,uint256,address,address)": {
        "notice": "Perform an exact output swap"
      },
      "updateWethLikeToken(address)": {
        "notice": "Update WETH-Like token"
      },
      "wethLike()": {
        "notice": "The WETH-Like token (a.k.a. Native Token)"
      }
    },
    "notice": "UniswapV2 Like Exchange",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17829,
        "contract": "contracts/swapper/UniswapV2LikeExchange.sol:UniswapV2LikeExchange",
        "label": "wethLike",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}
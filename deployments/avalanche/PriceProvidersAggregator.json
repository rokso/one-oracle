{
  "address": "0xd71Bb8e10b2d200Dd935a6c95699E18de2bBE013",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nativeToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum DataTypes.Provider",
          "name": "provider",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "contract IPriceProvider",
          "name": "oldPriceProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPriceProvider",
          "name": "newPriceProvider",
          "type": "address"
        }
      ],
      "name": "PriceProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "provider_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceInUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "priceProviders",
      "outputs": [
        {
          "internalType": "contract IPriceProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "provider_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "providerIn_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "enum DataTypes.Provider",
          "name": "providerOut_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "provider_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteTokenToUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "provider_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteUsdToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.Provider",
          "name": "provider_",
          "type": "uint8"
        },
        {
          "internalType": "contract IPriceProvider",
          "name": "priceProvider_",
          "type": "address"
        }
      ],
      "name": "setPriceProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposedGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb4d1fff6770c96ba00f9035d38a7bcc3ba4a19557a9ad16e4d70d921f323b422",
  "receipt": {
    "to": null,
    "from": "0xF5F5195cF6998c57C651f9f0bBFA7cFC72a6FaC1",
    "contractAddress": "0xd71Bb8e10b2d200Dd935a6c95699E18de2bBE013",
    "transactionIndex": 0,
    "gasUsed": "992969",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000002000000000000001000000000000000000000000000800000000000000000000000000400000000000000000000000000000000000000000000000000000000020000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000008000000000000000000000000000400000000000020000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x713916ced7c536817dfed6dd630e648d0a1648cdcf759ffb43e088c86b6c594c",
    "transactionHash": "0xb4d1fff6770c96ba00f9035d38a7bcc3ba4a19557a9ad16e4d70d921f323b422",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18546578,
        "transactionHash": "0xb4d1fff6770c96ba00f9035d38a7bcc3ba4a19557a9ad16e4d70d921f323b422",
        "address": "0xd71Bb8e10b2d200Dd935a6c95699E18de2bBE013",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5f5195cf6998c57c651f9f0bbfa7cfc72a6fac1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x713916ced7c536817dfed6dd630e648d0a1648cdcf759ffb43e088c86b6c594c"
      }
    ],
    "blockNumber": 18546578,
    "cumulativeGasUsed": "992969",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
  ],
  "numDeployments": 1,
  "solcInputHash": "3b00cb4db1117bcb9429730108fe71c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nativeToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum DataTypes.Provider\",\"name\":\"provider\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"contract IPriceProvider\",\"name\":\"oldPriceProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPriceProvider\",\"name\":\"newPriceProvider\",\"type\":\"address\"}],\"name\":\"PriceProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"provider_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"priceProviders\",\"outputs\":[{\"internalType\":\"contract IPriceProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"provider_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"providerIn_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"providerOut_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"provider_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteTokenToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"provider_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteUsdToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.Provider\",\"name\":\"provider_\",\"type\":\"uint8\"},{\"internalType\":\"contract IPriceProvider\",\"name\":\"priceProvider_\",\"type\":\"address\"}],\"name\":\"setPriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptGovernorship()\":{\"details\":\"Allows new governor to accept governorship of the contract.\"},\"getPriceInUsd(uint8,address)\":{\"params\":{\"provider_\":\"The price provider to get quote from\",\"token_\":\"The address of asset\"},\"returns\":{\"_lastUpdatedAt\":\"Last updated timestamp\",\"_priceInUsd\":\"The USD price\"}},\"quote(uint8,address,address,uint256)\":{\"params\":{\"amountIn_\":\"Amount of input token\",\"provider_\":\"The price provider to get quote from\",\"tokenIn_\":\"The address of assetIn\",\"tokenOut_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Amount out\",\"_lastUpdatedAt\":\"Last updated timestamp\"}},\"quote(uint8,address,uint8,address,uint256)\":{\"details\":\"If providers aren't the same, uses native token as \\\"bridge\\\"\",\"params\":{\"amountIn_\":\"Amount of input token\",\"providerIn_\":\"The price provider to get quote for the tokenIn\",\"providerOut_\":\"The price provider to get quote for the tokenOut\",\"tokenIn_\":\"The address of assetIn\",\"tokenOut_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Amount out\",\"_lastUpdatedAt\":\"Last updated timestamp\"}},\"quoteTokenToUsd(uint8,address,uint256)\":{\"params\":{\"amountIn_\":\"Amount of input token.\",\"provider_\":\"The price provider to get quote from\",\"token_\":\"The address of assetIn\"},\"returns\":{\"_lastUpdatedAt\":\"Last updated timestamp\",\"amountOut_\":\"Amount in USD\"}},\"quoteUsdToToken(uint8,address,uint256)\":{\"params\":{\"amountIn_\":\"Input amount in USD\",\"provider_\":\"The price provider to get quote from\",\"token_\":\"The address of assetOut\"},\"returns\":{\"_amountOut\":\"Output amount of token\",\"_lastUpdatedAt\":\"Last updated timestamp\"}},\"setPriceProvider(uint8,address)\":{\"details\":\"Administrative function\",\"params\":{\"priceProvider_\":\"The price provider contract\",\"provider_\":\"The provider (from enum)\"}},\"transferGovernorship(address)\":{\"details\":\"Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner.\"}},\"stateVariables\":{\"nativeToken\":{\"details\":\"Is used when getting quote from two price providers\"}},\"title\":\"Price Providers Aggregator\",\"version\":1},\"userdoc\":{\"events\":{\"PriceProviderUpdated(uint8,address,address)\":{\"notice\":\"Emitted when an price provider is updated\"}},\"kind\":\"user\",\"methods\":{\"getPriceInUsd(uint8,address)\":{\"notice\":\"Get USD (or equivalent) price of an asset\"},\"nativeToken()\":{\"notice\":\"The native token (usually the most liquid asset in the chain)\"},\"priceProviders(uint8)\":{\"notice\":\"Price providers map\"},\"quote(uint8,address,address,uint256)\":{\"notice\":\"Get quote\"},\"quote(uint8,address,uint8,address,uint256)\":{\"notice\":\"Get quote\"},\"quoteTokenToUsd(uint8,address,uint256)\":{\"notice\":\"Get quote in USD (or equivalent) amount\"},\"quoteUsdToToken(uint8,address,uint256)\":{\"notice\":\"Get quote from USD (or equivalent) amount to amount of token\"},\"setPriceProvider(uint8,address)\":{\"notice\":\"Set a price provider\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/PriceProvidersAggregator.sol\":\"PriceProvidersAggregator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, Context, Initializable {\\n    address public governor;\\n    address private proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Governable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal initializer {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == _msgSender(), \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(proposedGovernor == _msgSender(), \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x57b52a711313030d4d996899be3c248fbfd4ee72b5578d4b427dddb500d668ab\",\"license\":\"MIT\"},\"contracts/core/PriceProvidersAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../interfaces/core/IPriceProvidersAggregator.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\n/**\\n * @title Price Providers Aggregator\\n */\\ncontract PriceProvidersAggregator is IPriceProvidersAggregator, Governable {\\n    /**\\n     * The native token (usually the most liquid asset in the chain)\\n     * @dev Is used when getting quote from two price providers\\n     */\\n    address public immutable nativeToken;\\n\\n    /**\\n     * @notice Price providers map\\n     */\\n    mapping(DataTypes.Provider => IPriceProvider) public override priceProviders;\\n\\n    /// Emitted when an price provider is updated\\n    event PriceProviderUpdated(\\n        DataTypes.Provider provider,\\n        IPriceProvider oldPriceProvider,\\n        IPriceProvider newPriceProvider\\n    );\\n\\n    constructor(address nativeToken_) {\\n        require(nativeToken_ != address(0), \\\"native-token-is-null\\\");\\n        nativeToken = nativeToken_;\\n    }\\n\\n    /// @inheritdoc IPriceProvidersAggregator\\n    function getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        external\\n        view\\n        override\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt)\\n    {\\n        IPriceProvider _provider = priceProviders[provider_];\\n        require(address(_provider) != address(0), \\\"provider-not-set\\\");\\n        return _provider.getPriceInUsd(token_);\\n    }\\n\\n    /// @inheritdoc IPriceProvidersAggregator\\n    function quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view override returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        IPriceProvider _provider = priceProviders[provider_];\\n        require(address(_provider) != address(0), \\\"provider-not-set\\\");\\n        return _provider.quote(tokenIn_, tokenOut_, amountIn_);\\n    }\\n\\n    /// @inheritdoc IPriceProvidersAggregator\\n    function quote(\\n        DataTypes.Provider providerIn_,\\n        address tokenIn_,\\n        DataTypes.Provider providerOut_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) public view override returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        IPriceProvider _providerIn = priceProviders[providerIn_];\\n        require(address(_providerIn) != address(0), \\\"provider-in-not-set\\\");\\n\\n        if (providerIn_ == providerOut_) {\\n            return _providerIn.quote(tokenIn_, tokenOut_, amountIn_);\\n        }\\n\\n        IPriceProvider _providerOut = priceProviders[providerOut_];\\n        require(address(_providerOut) != address(0), \\\"provider-out-not-set\\\");\\n\\n        (_amountOut, _lastUpdatedAt) = _providerIn.quote(tokenIn_, nativeToken, amountIn_);\\n        uint256 __lastUpdatedAt;\\n        (_amountOut, __lastUpdatedAt) = _providerOut.quote(nativeToken, tokenOut_, _amountOut);\\n        _lastUpdatedAt = Math.min(__lastUpdatedAt, _lastUpdatedAt);\\n    }\\n\\n    /// @inheritdoc IPriceProvidersAggregator\\n    function quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view override returns (uint256 amountOut_, uint256 _lastUpdatedAt) {\\n        IPriceProvider _provider = priceProviders[provider_];\\n        require(address(_provider) != address(0), \\\"provider-not-set\\\");\\n        return _provider.quoteTokenToUsd(token_, amountIn_);\\n    }\\n\\n    /// @inheritdoc IPriceProvidersAggregator\\n    function quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view override returns (uint256 _amountOut, uint256 _lastUpdatedAt) {\\n        IPriceProvider _provider = priceProviders[provider_];\\n        require(address(_provider) != address(0), \\\"provider-not-set\\\");\\n        return _provider.quoteUsdToToken(token_, amountIn_);\\n    }\\n\\n    /// @inheritdoc IPriceProvidersAggregator\\n    function setPriceProvider(DataTypes.Provider provider_, IPriceProvider priceProvider_)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        require(provider_ != DataTypes.Provider.NONE, \\\"invalid-provider\\\");\\n        IPriceProvider _current = priceProviders[provider_];\\n        require(priceProvider_ != _current, \\\"same-as-current\\\");\\n\\n        emit PriceProviderUpdated(provider_, _current, priceProvider_);\\n\\n        priceProviders[provider_] = priceProvider_;\\n    }\\n}\\n\",\"keccak256\":\"0xaa7f8cd6abee82c45a4bee077b2fd1e15bf8a7f85f562a96305b383f8869bfb5\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(address token_, uint256 amountIn_)\\n        external\\n        view\\n        returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n}\\n\",\"keccak256\":\"0x05e6cf557c19e2f9e439b483ed67e85713c0045dced6133f530003382e9b72d1\",\"license\":\"MIT\"},\"contracts/interfaces/core/IPriceProvidersAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"./IPriceProvider.sol\\\";\\n\\n/**\\n * @notice PriceProvidersAggregator interface\\n * @dev Worth noting that the `_lastUpdatedAt` logic depends on the underlying price provider. In summary:\\n * ChainLink: returns the last updated date from the aggregator\\n * UniswapV2: returns the date of the latest pair oracle update\\n * UniswapV3: assumes that the price is always updated (returns block.timestamp)\\n * Flux: returns the last updated date from the aggregator\\n * Umbrella (FCD): returns the last updated date returned from their oracle contract\\n * Umbrella (Passport): returns the date of the latest pallet submission\\n * Anytime that a quote performs more than one query, it uses the oldest date as the `_lastUpdatedAt`.\\n * See more: https://github.com/bloqpriv/one-oracle/issues/64\\n */\\ninterface IPriceProvidersAggregator {\\n    /**\\n     * @notice Get USD (or equivalent) price of an asset\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of asset\\n     * @return _priceInUsd The USD price\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function getPriceInUsd(DataTypes.Provider provider_, address token_)\\n        external\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Provider Providers' mapping\\n     */\\n    function priceProviders(DataTypes.Provider provider_) external view returns (IPriceProvider _priceProvider);\\n\\n    /**\\n     * @notice Get quote\\n     * @param provider_ The price provider to get quote from\\n     * @param tokenIn_ The address of assetIn\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        DataTypes.Provider provider_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote\\n     * @dev If providers aren't the same, uses native token as \\\"bridge\\\"\\n     * @param providerIn_ The price provider to get quote for the tokenIn\\n     * @param tokenIn_ The address of assetIn\\n     * @param providerOut_ The price provider to get quote for the tokenOut\\n     * @param tokenOut_ The address of assetOut\\n     * @param amountIn_ Amount of input token\\n     * @return _amountOut Amount out\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quote(\\n        DataTypes.Provider providerIn_,\\n        address tokenIn_,\\n        DataTypes.Provider providerOut_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote in USD (or equivalent) amount\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetIn\\n     * @param amountIn_ Amount of input token.\\n     * @return amountOut_ Amount in USD\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteTokenToUsd(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 amountOut_, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Get quote from USD (or equivalent) amount to amount of token\\n     * @param provider_ The price provider to get quote from\\n     * @param token_ The address of assetOut\\n     * @param amountIn_ Input amount in USD\\n     * @return _amountOut Output amount of token\\n     * @return _lastUpdatedAt Last updated timestamp\\n     */\\n    function quoteUsdToToken(\\n        DataTypes.Provider provider_,\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _lastUpdatedAt);\\n\\n    /**\\n     * @notice Set a price provider\\n     * @dev Administrative function\\n     * @param provider_ The provider (from enum)\\n     * @param priceProvider_ The price provider contract\\n     */\\n    function setPriceProvider(DataTypes.Provider provider_, IPriceProvider priceProvider_) external;\\n}\\n\",\"keccak256\":\"0xf1708572db9b1b429856b6f5fc22e5c9a6e98047559f1d29ba854621bf155dc9\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary DataTypes {\\n    /**\\n     * @notice Price providers enumeration\\n     */\\n    enum Provider {\\n        NONE,\\n        CHAINLINK,\\n        UNISWAP_V3,\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UMBRELLA_FIRST_CLASS,\\n        UMBRELLA_PASSPORT,\\n        FLUX\\n    }\\n\\n    enum ExchangeType {\\n        UNISWAP_V2,\\n        SUSHISWAP,\\n        TRADERJOE,\\n        PANGOLIN,\\n        QUICKSWAP,\\n        UNISWAP_V3\\n    }\\n\\n    enum SwapType {\\n        EXACT_INPUT,\\n        EXACT_OUTPUT\\n    }\\n}\\n\",\"keccak256\":\"0xfafdbf0aa3657f082acf0fba2742fddd38552382646a14193a78782f731dc393\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516111d93803806111d983398101604081905261002f916100e4565b6000805462010000600160b01b03191633620100008102919091178255604051909182917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a3506001600160a01b0381166100d35760405162461bcd60e51b815260206004820152601460248201527f6e61746976652d746f6b656e2d69732d6e756c6c000000000000000000000000604482015260640160405180910390fd5b6001600160a01b0316608052610114565b6000602082840312156100f657600080fd5b81516001600160a01b038116811461010d57600080fd5b9392505050565b60805161109c61013d600039600081816101ce015281816108a3015261095b015261109c6000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c8063777f1be911610081578063c6222eba1161005b578063c6222eba146101a0578063e1758bd8146101c9578063f3b27bc3146101f057600080fd5b8063777f1be914610167578063828509481461017a578063b6aa515b1461018d57600080fd5b80630fd01228116100b25780630fd012281461012c5780632b041e3a14610141578063769e8e3f1461015457600080fd5b8063037c696a146100ce5780630c340a24146100fb575b600080fd5b6100e16100dc366004610e5d565b6101f8565b604080519283526020830191909152015b60405180910390f35b600054610114906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100f2565b61013f61013a366004610eac565b610340565b005b6100e161014f366004610ee3565b610535565b6100e1610162366004610f22565b610670565b6100e1610175366004610ee3565b610a13565b6100e1610188366004610eac565b610af6565b61013f61019b366004610f82565b610c28565b6101146101ae366004610f9f565b6002602052600090815260409020546001600160a01b031681565b6101147f000000000000000000000000000000000000000000000000000000000000000081565b61013f610d19565b60008060006002600088600a81111561021357610213610fba565b600a81111561022457610224610fba565b81526020810191909152604001600020546001600160a01b03169050806102925760405162461bcd60e51b815260206004820152601060248201527f70726f76696465722d6e6f742d7365740000000000000000000000000000000060448201526064015b60405180910390fd5b6040517fb64663840000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301526044820186905282169063b646638490606401604080518083038186803b1580156102fa57600080fd5b505afa15801561030e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103329190610fe9565b925092505094509492505050565b6000546001600160a01b03620100009091041633146103a15760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610289565b600082600a8111156103b5576103b5610fba565b14156104035760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642d70726f7669646572000000000000000000000000000000006044820152606401610289565b60006002600084600a81111561041b5761041b610fba565b600a81111561042c5761042c610fba565b81526020810191909152604001600020546001600160a01b039081169150821681141561049b5760405162461bcd60e51b815260206004820152600f60248201527f73616d652d61732d63757272656e7400000000000000000000000000000000006044820152606401610289565b7f6d8522a73cf263ee8c1097d5bd32695416c18e9df8cfc47b646f465297177f8e8382846040516104ce9392919061100d565b60405180910390a1816002600085600a8111156104ed576104ed610fba565b600a8111156104fe576104fe610fba565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b60008060006002600087600a81111561055057610550610fba565b600a81111561056157610561610fba565b81526020810191909152604001600020546001600160a01b03169050806105ca5760405162461bcd60e51b815260206004820152601060248201527f70726f76696465722d6e6f742d736574000000000000000000000000000000006044820152606401610289565b6040517f8d0dba000000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201869052821690638d0dba00906044015b604080518083038186803b15801561062b57600080fd5b505afa15801561063f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106639190610fe9565b9250925050935093915050565b60008060006002600089600a81111561068b5761068b610fba565b600a81111561069c5761069c610fba565b81526020810191909152604001600020546001600160a01b03169050806107055760405162461bcd60e51b815260206004820152601360248201527f70726f76696465722d696e2d6e6f742d736574000000000000000000000000006044820152606401610289565b85600a81111561071757610717610fba565b88600a81111561072957610729610fba565b14156107d9576040517fb64663840000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015286811660248301526044820186905282169063b646638490606401604080518083038186803b15801561079757600080fd5b505afa1580156107ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cf9190610fe9565b9250925050610a09565b60006002600088600a8111156107f1576107f1610fba565b600a81111561080257610802610fba565b81526020810191909152604001600020546001600160a01b031690508061086b5760405162461bcd60e51b815260206004820152601460248201527f70726f76696465722d6f75742d6e6f742d7365740000000000000000000000006044820152606401610289565b6040517fb64663840000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820187905283169063b646638490606401604080518083038186803b1580156108f357600080fd5b505afa158015610907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092b9190610fe9565b6040517fb64663840000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015289811660248301526044820184905292965090945060009183169063b646638490606401604080518083038186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f49190610fe9565b9095509050610a038185610e19565b93505050505b9550959350505050565b60008060006002600087600a811115610a2e57610a2e610fba565b600a811115610a3f57610a3f610fba565b81526020810191909152604001600020546001600160a01b0316905080610aa85760405162461bcd60e51b815260206004820152601060248201527f70726f76696465722d6e6f742d736574000000000000000000000000000000006044820152606401610289565b6040517fb5e9bef50000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301526024820186905282169063b5e9bef590604401610614565b60008060006002600086600a811115610b1157610b11610fba565b600a811115610b2257610b22610fba565b81526020810191909152604001600020546001600160a01b0316905080610b8b5760405162461bcd60e51b815260206004820152601060248201527f70726f76696465722d6e6f742d736574000000000000000000000000000000006044820152606401610289565b6040517f07ee40bf0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528216906307ee40bf90602401604080518083038186803b158015610be457600080fd5b505afa158015610bf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1c9190610fe9565b92509250509250929050565b6000546001600160a01b0362010000909104163314610c895760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610289565b6001600160a01b038116610cdf5760405162461bcd60e51b815260206004820152601960248201527f70726f706f7365642d676f7665726e6f722d69732d7a65726f000000000000006044820152606401610289565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610d735760405162461bcd60e51b815260206004820152601960248201527f6e6f742d7468652d70726f706f7365642d676f7665726e6f72000000000000006044820152606401610289565b600154600080546040516001600160a01b039384169362010000909204909116917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d091a360018054600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166001600160a01b03831662010000021790557fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6000818310610e285781610e2a565b825b9392505050565b8035600b8110610e4057600080fd5b919050565b6001600160a01b0381168114610e5a57600080fd5b50565b60008060008060808587031215610e7357600080fd5b610e7c85610e31565b93506020850135610e8c81610e45565b92506040850135610e9c81610e45565b9396929550929360600135925050565b60008060408385031215610ebf57600080fd5b610ec883610e31565b91506020830135610ed881610e45565b809150509250929050565b600080600060608486031215610ef857600080fd5b610f0184610e31565b92506020840135610f1181610e45565b929592945050506040919091013590565b600080600080600060a08688031215610f3a57600080fd5b610f4386610e31565b94506020860135610f5381610e45565b9350610f6160408701610e31565b92506060860135610f7181610e45565b949793965091946080013592915050565b600060208284031215610f9457600080fd5b8135610e2a81610e45565b600060208284031215610fb157600080fd5b610e2a82610e31565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008060408385031215610ffc57600080fd5b505080516020909101519092909150565b60608101600b8510611048577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9381526001600160a01b03928316602082015291166040909101529056fea2646970667358221220d00e9e21fa489c84b138013bf8a721b1772a9ca72d9deb3dd59be2ed9345007164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c8063777f1be911610081578063c6222eba1161005b578063c6222eba146101a0578063e1758bd8146101c9578063f3b27bc3146101f057600080fd5b8063777f1be914610167578063828509481461017a578063b6aa515b1461018d57600080fd5b80630fd01228116100b25780630fd012281461012c5780632b041e3a14610141578063769e8e3f1461015457600080fd5b8063037c696a146100ce5780630c340a24146100fb575b600080fd5b6100e16100dc366004610e5d565b6101f8565b604080519283526020830191909152015b60405180910390f35b600054610114906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100f2565b61013f61013a366004610eac565b610340565b005b6100e161014f366004610ee3565b610535565b6100e1610162366004610f22565b610670565b6100e1610175366004610ee3565b610a13565b6100e1610188366004610eac565b610af6565b61013f61019b366004610f82565b610c28565b6101146101ae366004610f9f565b6002602052600090815260409020546001600160a01b031681565b6101147f000000000000000000000000000000000000000000000000000000000000000081565b61013f610d19565b60008060006002600088600a81111561021357610213610fba565b600a81111561022457610224610fba565b81526020810191909152604001600020546001600160a01b03169050806102925760405162461bcd60e51b815260206004820152601060248201527f70726f76696465722d6e6f742d7365740000000000000000000000000000000060448201526064015b60405180910390fd5b6040517fb64663840000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301526044820186905282169063b646638490606401604080518083038186803b1580156102fa57600080fd5b505afa15801561030e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103329190610fe9565b925092505094509492505050565b6000546001600160a01b03620100009091041633146103a15760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610289565b600082600a8111156103b5576103b5610fba565b14156104035760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642d70726f7669646572000000000000000000000000000000006044820152606401610289565b60006002600084600a81111561041b5761041b610fba565b600a81111561042c5761042c610fba565b81526020810191909152604001600020546001600160a01b039081169150821681141561049b5760405162461bcd60e51b815260206004820152600f60248201527f73616d652d61732d63757272656e7400000000000000000000000000000000006044820152606401610289565b7f6d8522a73cf263ee8c1097d5bd32695416c18e9df8cfc47b646f465297177f8e8382846040516104ce9392919061100d565b60405180910390a1816002600085600a8111156104ed576104ed610fba565b600a8111156104fe576104fe610fba565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b60008060006002600087600a81111561055057610550610fba565b600a81111561056157610561610fba565b81526020810191909152604001600020546001600160a01b03169050806105ca5760405162461bcd60e51b815260206004820152601060248201527f70726f76696465722d6e6f742d736574000000000000000000000000000000006044820152606401610289565b6040517f8d0dba000000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201869052821690638d0dba00906044015b604080518083038186803b15801561062b57600080fd5b505afa15801561063f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106639190610fe9565b9250925050935093915050565b60008060006002600089600a81111561068b5761068b610fba565b600a81111561069c5761069c610fba565b81526020810191909152604001600020546001600160a01b03169050806107055760405162461bcd60e51b815260206004820152601360248201527f70726f76696465722d696e2d6e6f742d736574000000000000000000000000006044820152606401610289565b85600a81111561071757610717610fba565b88600a81111561072957610729610fba565b14156107d9576040517fb64663840000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015286811660248301526044820186905282169063b646638490606401604080518083038186803b15801561079757600080fd5b505afa1580156107ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cf9190610fe9565b9250925050610a09565b60006002600088600a8111156107f1576107f1610fba565b600a81111561080257610802610fba565b81526020810191909152604001600020546001600160a01b031690508061086b5760405162461bcd60e51b815260206004820152601460248201527f70726f76696465722d6f75742d6e6f742d7365740000000000000000000000006044820152606401610289565b6040517fb64663840000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820187905283169063b646638490606401604080518083038186803b1580156108f357600080fd5b505afa158015610907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092b9190610fe9565b6040517fb64663840000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015289811660248301526044820184905292965090945060009183169063b646638490606401604080518083038186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f49190610fe9565b9095509050610a038185610e19565b93505050505b9550959350505050565b60008060006002600087600a811115610a2e57610a2e610fba565b600a811115610a3f57610a3f610fba565b81526020810191909152604001600020546001600160a01b0316905080610aa85760405162461bcd60e51b815260206004820152601060248201527f70726f76696465722d6e6f742d736574000000000000000000000000000000006044820152606401610289565b6040517fb5e9bef50000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301526024820186905282169063b5e9bef590604401610614565b60008060006002600086600a811115610b1157610b11610fba565b600a811115610b2257610b22610fba565b81526020810191909152604001600020546001600160a01b0316905080610b8b5760405162461bcd60e51b815260206004820152601060248201527f70726f76696465722d6e6f742d736574000000000000000000000000000000006044820152606401610289565b6040517f07ee40bf0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528216906307ee40bf90602401604080518083038186803b158015610be457600080fd5b505afa158015610bf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1c9190610fe9565b92509250509250929050565b6000546001600160a01b0362010000909104163314610c895760405162461bcd60e51b815260206004820152600c60248201527f6e6f742d676f7665726e6f7200000000000000000000000000000000000000006044820152606401610289565b6001600160a01b038116610cdf5760405162461bcd60e51b815260206004820152601960248201527f70726f706f7365642d676f7665726e6f722d69732d7a65726f000000000000006044820152606401610289565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610d735760405162461bcd60e51b815260206004820152601960248201527f6e6f742d7468652d70726f706f7365642d676f7665726e6f72000000000000006044820152606401610289565b600154600080546040516001600160a01b039384169362010000909204909116917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d091a360018054600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166001600160a01b03831662010000021790557fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6000818310610e285781610e2a565b825b9392505050565b8035600b8110610e4057600080fd5b919050565b6001600160a01b0381168114610e5a57600080fd5b50565b60008060008060808587031215610e7357600080fd5b610e7c85610e31565b93506020850135610e8c81610e45565b92506040850135610e9c81610e45565b9396929550929360600135925050565b60008060408385031215610ebf57600080fd5b610ec883610e31565b91506020830135610ed881610e45565b809150509250929050565b600080600060608486031215610ef857600080fd5b610f0184610e31565b92506020840135610f1181610e45565b929592945050506040919091013590565b600080600080600060a08688031215610f3a57600080fd5b610f4386610e31565b94506020860135610f5381610e45565b9350610f6160408701610e31565b92506060860135610f7181610e45565b949793965091946080013592915050565b600060208284031215610f9457600080fd5b8135610e2a81610e45565b600060208284031215610fb157600080fd5b610e2a82610e31565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008060408385031215610ffc57600080fd5b505080516020909101519092909150565b60608101600b8510611048577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9381526001600160a01b03928316602082015291166040909101529056fea2646970667358221220d00e9e21fa489c84b138013bf8a721b1772a9ca72d9deb3dd59be2ed9345007164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptGovernorship()": {
        "details": "Allows new governor to accept governorship of the contract."
      },
      "getPriceInUsd(uint8,address)": {
        "params": {
          "provider_": "The price provider to get quote from",
          "token_": "The address of asset"
        },
        "returns": {
          "_lastUpdatedAt": "Last updated timestamp",
          "_priceInUsd": "The USD price"
        }
      },
      "quote(uint8,address,address,uint256)": {
        "params": {
          "amountIn_": "Amount of input token",
          "provider_": "The price provider to get quote from",
          "tokenIn_": "The address of assetIn",
          "tokenOut_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Amount out",
          "_lastUpdatedAt": "Last updated timestamp"
        }
      },
      "quote(uint8,address,uint8,address,uint256)": {
        "details": "If providers aren't the same, uses native token as \"bridge\"",
        "params": {
          "amountIn_": "Amount of input token",
          "providerIn_": "The price provider to get quote for the tokenIn",
          "providerOut_": "The price provider to get quote for the tokenOut",
          "tokenIn_": "The address of assetIn",
          "tokenOut_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Amount out",
          "_lastUpdatedAt": "Last updated timestamp"
        }
      },
      "quoteTokenToUsd(uint8,address,uint256)": {
        "params": {
          "amountIn_": "Amount of input token.",
          "provider_": "The price provider to get quote from",
          "token_": "The address of assetIn"
        },
        "returns": {
          "_lastUpdatedAt": "Last updated timestamp",
          "amountOut_": "Amount in USD"
        }
      },
      "quoteUsdToToken(uint8,address,uint256)": {
        "params": {
          "amountIn_": "Input amount in USD",
          "provider_": "The price provider to get quote from",
          "token_": "The address of assetOut"
        },
        "returns": {
          "_amountOut": "Output amount of token",
          "_lastUpdatedAt": "Last updated timestamp"
        }
      },
      "setPriceProvider(uint8,address)": {
        "details": "Administrative function",
        "params": {
          "priceProvider_": "The price provider contract",
          "provider_": "The provider (from enum)"
        }
      },
      "transferGovernorship(address)": {
        "details": "Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "nativeToken": {
        "details": "Is used when getting quote from two price providers"
      }
    },
    "title": "Price Providers Aggregator",
    "version": 1
  },
  "userdoc": {
    "events": {
      "PriceProviderUpdated(uint8,address,address)": {
        "notice": "Emitted when an price provider is updated"
      }
    },
    "kind": "user",
    "methods": {
      "getPriceInUsd(uint8,address)": {
        "notice": "Get USD (or equivalent) price of an asset"
      },
      "nativeToken()": {
        "notice": "The native token (usually the most liquid asset in the chain)"
      },
      "priceProviders(uint8)": {
        "notice": "Price providers map"
      },
      "quote(uint8,address,address,uint256)": {
        "notice": "Get quote"
      },
      "quote(uint8,address,uint8,address,uint256)": {
        "notice": "Get quote"
      },
      "quoteTokenToUsd(uint8,address,uint256)": {
        "notice": "Get quote in USD (or equivalent) amount"
      },
      "quoteUsdToToken(uint8,address,uint256)": {
        "notice": "Get quote from USD (or equivalent) amount to amount of token"
      },
      "setPriceProvider(uint8,address)": {
        "notice": "Set a price provider"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 420,
        "contract": "contracts/core/PriceProvidersAggregator.sol:PriceProvidersAggregator",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 423,
        "contract": "contracts/core/PriceProvidersAggregator.sol:PriceProvidersAggregator",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6513,
        "contract": "contracts/core/PriceProvidersAggregator.sol:PriceProvidersAggregator",
        "label": "governor",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6515,
        "contract": "contracts/core/PriceProvidersAggregator.sol:PriceProvidersAggregator",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8204,
        "contract": "contracts/core/PriceProvidersAggregator.sol:PriceProvidersAggregator",
        "label": "priceProviders",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_enum(Provider)13024,t_contract(IPriceProvider)11703)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPriceProvider)11703": {
        "encoding": "inplace",
        "label": "contract IPriceProvider",
        "numberOfBytes": "20"
      },
      "t_enum(Provider)13024": {
        "encoding": "inplace",
        "label": "enum DataTypes.Provider",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(Provider)13024,t_contract(IPriceProvider)11703)": {
        "encoding": "mapping",
        "key": "t_enum(Provider)13024",
        "label": "mapping(enum DataTypes.Provider => contract IPriceProvider)",
        "numberOfBytes": "32",
        "value": "t_contract(IPriceProvider)11703"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}